#include "p4_prefix.h"
namespace p4_pd_rpc {

EntryHandle_t netbufferv4Client::access_cm2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm2_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm2_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_cm2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm2_tbl_table_get_default_entry(netbufferv4_access_cm2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_cm2_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_cm2_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_cm2_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_get_default_entry(netbufferv4_access_cm2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm3_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm3_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_cm3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm3_tbl_table_get_default_entry(netbufferv4_access_cm3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_cm3_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_cm3_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_cm3_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_get_default_entry(netbufferv4_access_cm3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm4_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm4_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_cm4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm4_tbl_table_get_default_entry(netbufferv4_access_cm4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_cm4_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_cm4_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_cm4_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_get_default_entry(netbufferv4_access_cm4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_deleted_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_deleted_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_deleted_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_deleted_tbl_table_get_default_entry(netbufferv4_access_deleted_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_deleted_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_deleted_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_deleted_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_get_default_entry(netbufferv4_access_deleted_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_latest_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_latest_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_latest_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_latest_tbl_table_get_default_entry(netbufferv4_access_latest_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_latest_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_latest_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_latest_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_get_default_entry(netbufferv4_access_latest_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_savedseq_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_savedseq_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_savedseq_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_savedseq_tbl_table_get_default_entry(netbufferv4_access_savedseq_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_savedseq_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_savedseq_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_savedseq_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_get_default_entry(netbufferv4_access_savedseq_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_seq_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_seq_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_seq_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_seq_tbl_table_get_default_entry(netbufferv4_access_seq_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_seq_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_seq_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_seq_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_get_default_entry(netbufferv4_access_seq_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_validvalue_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_access_validvalue_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_access_validvalue_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::access_validvalue_tbl_table_get_default_entry(netbufferv4_access_validvalue_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_access_validvalue_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_access_validvalue_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_access_validvalue_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_get_default_entry(netbufferv4_access_validvalue_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_add_and_remove_value_header_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_add_and_remove_value_header_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_get_default_entry(netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_add_and_remove_value_header_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_add_and_remove_value_header_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_get_default_entry(netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_cache_lookup_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_cache_lookup_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_cache_lookup_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::cache_lookup_tbl_table_get_default_entry(netbufferv4_cache_lookup_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_cache_lookup_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_cache_lookup_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_cache_lookup_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_get_default_entry(netbufferv4_cache_lookup_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_drop_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_drop_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_drop_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::drop_tbl_table_get_default_entry(netbufferv4_drop_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_drop_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_drop_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_drop_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_get_default_entry(netbufferv4_drop_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_eg_port_forward_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_eg_port_forward_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::eg_port_forward_tbl_table_get_default_entry(netbufferv4_eg_port_forward_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_eg_port_forward_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_eg_port_forward_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_eg_port_forward_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_get_default_entry(netbufferv4_eg_port_forward_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm1_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm1_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm1_tbl_table_get_default_entry(netbufferv4_hash_for_cm1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_for_cm1_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_for_cm1_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_get_default_entry(netbufferv4_hash_for_cm1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm2_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm2_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm2_tbl_table_get_default_entry(netbufferv4_hash_for_cm2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_for_cm2_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_for_cm2_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_get_default_entry(netbufferv4_hash_for_cm2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm3_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm3_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm3_tbl_table_get_default_entry(netbufferv4_hash_for_cm3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_for_cm3_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_for_cm3_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_get_default_entry(netbufferv4_hash_for_cm3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm4_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm4_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm4_tbl_table_get_default_entry(netbufferv4_hash_for_cm4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_for_cm4_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_for_cm4_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_get_default_entry(netbufferv4_hash_for_cm4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_partition_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_partition_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_partition_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_partition_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_partition_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_partition_tbl_table_get_default_entry(netbufferv4_hash_for_partition_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_for_partition_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_for_partition_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_for_partition_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_get_default_entry(netbufferv4_hash_for_partition_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_seq_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_seq_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_seq_tbl_table_get_default_entry(netbufferv4_hash_for_seq_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_for_seq_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_for_seq_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_for_seq_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_get_default_entry(netbufferv4_hash_for_seq_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_partition_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_partition_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_partition_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_hash_partition_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_partition_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_partition_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_partition_tbl_table_get_default_entry(netbufferv4_hash_partition_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_hash_partition_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_hash_partition_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_hash_partition_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_get_default_entry(netbufferv4_hash_partition_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ig_port_forward_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_ig_port_forward_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::ig_port_forward_tbl_table_get_default_entry(netbufferv4_ig_port_forward_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_ig_port_forward_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_ig_port_forward_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_ig_port_forward_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_get_default_entry(netbufferv4_ig_port_forward_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ipv4_forward_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_ipv4_forward_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::ipv4_forward_tbl_table_get_default_entry(netbufferv4_ipv4_forward_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_ipv4_forward_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_ipv4_forward_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_ipv4_forward_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_get_default_entry(netbufferv4_ipv4_forward_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_is_hot_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_is_hot_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_is_hot_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::is_hot_tbl_table_get_default_entry(netbufferv4_is_hot_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_is_hot_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_is_hot_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_is_hot_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_get_default_entry(netbufferv4_is_hot_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_lastclone_lastscansplit_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_lastclone_lastscansplit_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_get_default_entry(netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_lastclone_lastscansplit_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_lastclone_lastscansplit_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_get_default_entry(netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_need_recirculate_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_need_recirculate_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_need_recirculate_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::need_recirculate_tbl_table_get_default_entry(netbufferv4_need_recirculate_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_need_recirculate_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_need_recirculate_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_need_recirculate_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_get_default_entry(netbufferv4_need_recirculate_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_prepare_for_cachehit_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_prepare_for_cachehit_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_get_default_entry(netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_prepare_for_cachehit_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_prepare_for_cachehit_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_get_default_entry(netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_recirculate_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_recirculate_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_recirculate_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::recirculate_tbl_table_get_default_entry(netbufferv4_recirculate_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_recirculate_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_recirculate_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_recirculate_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_get_default_entry(netbufferv4_recirculate_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_sample_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_sample_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_sample_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::sample_tbl_table_get_default_entry(netbufferv4_sample_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_sample_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_sample_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_sample_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_get_default_entry(netbufferv4_sample_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_save_client_udpport_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_save_client_udpport_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::save_client_udpport_tbl_table_get_default_entry(netbufferv4_save_client_udpport_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_save_client_udpport_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_save_client_udpport_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_save_client_udpport_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_get_default_entry(netbufferv4_save_client_udpport_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::set_hot_threshold_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_set_hot_threshold_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_set_hot_threshold_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_set_hot_threshold_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_set_hot_threshold_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::set_hot_threshold_tbl_table_get_default_entry(netbufferv4_set_hot_threshold_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_set_hot_threshold_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_set_hot_threshold_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_set_hot_threshold_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_hot_threshold_tbl_table_get_default_entry(netbufferv4_set_hot_threshold_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_hot_threshold_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_snapshot_flag_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_snapshot_flag_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::snapshot_flag_tbl_table_get_default_entry(netbufferv4_snapshot_flag_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_snapshot_flag_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_snapshot_flag_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_snapshot_flag_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_get_default_entry(netbufferv4_snapshot_flag_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_ipmac_srcport_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_ipmac_srcport_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_get_default_entry(netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_ipmac_srcport_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_ipmac_srcport_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_get_default_entry(netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_pktlen_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_pktlen_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_pktlen_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_pktlen_tbl_table_get_default_entry(netbufferv4_update_pktlen_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_pktlen_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_pktlen_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_pktlen_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_get_default_entry(netbufferv4_update_pktlen_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi10_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi10_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi10_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi10_tbl_table_get_default_entry(netbufferv4_update_valhi10_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi10_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi10_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi10_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_get_default_entry(netbufferv4_update_valhi10_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi11_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi11_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi11_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi11_tbl_table_get_default_entry(netbufferv4_update_valhi11_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi11_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi11_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi11_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_get_default_entry(netbufferv4_update_valhi11_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi12_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi12_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi12_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi12_tbl_table_get_default_entry(netbufferv4_update_valhi12_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi12_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi12_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi12_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_get_default_entry(netbufferv4_update_valhi12_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi13_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi13_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi13_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi13_tbl_table_get_default_entry(netbufferv4_update_valhi13_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi13_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi13_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi13_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_get_default_entry(netbufferv4_update_valhi13_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi14_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi14_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi14_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi14_tbl_table_get_default_entry(netbufferv4_update_valhi14_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi14_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi14_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi14_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_get_default_entry(netbufferv4_update_valhi14_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi15_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi15_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi15_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi15_tbl_table_get_default_entry(netbufferv4_update_valhi15_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi15_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi15_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi15_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_get_default_entry(netbufferv4_update_valhi15_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi16_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi16_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi16_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi16_tbl_table_get_default_entry(netbufferv4_update_valhi16_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi16_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi16_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi16_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_get_default_entry(netbufferv4_update_valhi16_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi1_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi1_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi1_tbl_table_get_default_entry(netbufferv4_update_valhi1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi1_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi1_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi1_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_get_default_entry(netbufferv4_update_valhi1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi2_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi2_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi2_tbl_table_get_default_entry(netbufferv4_update_valhi2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi2_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi2_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi2_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_get_default_entry(netbufferv4_update_valhi2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi3_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi3_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi3_tbl_table_get_default_entry(netbufferv4_update_valhi3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi3_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi3_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi3_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_get_default_entry(netbufferv4_update_valhi3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi4_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi4_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi4_tbl_table_get_default_entry(netbufferv4_update_valhi4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi4_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi4_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi4_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_get_default_entry(netbufferv4_update_valhi4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi5_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi5_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi5_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi5_tbl_table_get_default_entry(netbufferv4_update_valhi5_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi5_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi5_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi5_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_get_default_entry(netbufferv4_update_valhi5_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi6_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi6_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi6_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi6_tbl_table_get_default_entry(netbufferv4_update_valhi6_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi6_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi6_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi6_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_get_default_entry(netbufferv4_update_valhi6_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi7_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi7_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi7_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi7_tbl_table_get_default_entry(netbufferv4_update_valhi7_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi7_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi7_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi7_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_get_default_entry(netbufferv4_update_valhi7_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi8_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi8_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi8_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi8_tbl_table_get_default_entry(netbufferv4_update_valhi8_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi8_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi8_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi8_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_get_default_entry(netbufferv4_update_valhi8_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi9_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi9_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_valhi9_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi9_tbl_table_get_default_entry(netbufferv4_update_valhi9_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_valhi9_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_valhi9_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_valhi9_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_get_default_entry(netbufferv4_update_valhi9_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallen_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallen_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallen_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallen_tbl_table_get_default_entry(netbufferv4_update_vallen_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallen_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallen_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallen_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_get_default_entry(netbufferv4_update_vallen_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo10_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo10_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo10_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo10_tbl_table_get_default_entry(netbufferv4_update_vallo10_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo10_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo10_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo10_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_get_default_entry(netbufferv4_update_vallo10_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo11_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo11_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo11_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo11_tbl_table_get_default_entry(netbufferv4_update_vallo11_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo11_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo11_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo11_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_get_default_entry(netbufferv4_update_vallo11_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo12_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo12_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo12_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo12_tbl_table_get_default_entry(netbufferv4_update_vallo12_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo12_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo12_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo12_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_get_default_entry(netbufferv4_update_vallo12_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo13_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo13_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo13_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo13_tbl_table_get_default_entry(netbufferv4_update_vallo13_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo13_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo13_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo13_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_get_default_entry(netbufferv4_update_vallo13_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo14_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo14_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo14_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo14_tbl_table_get_default_entry(netbufferv4_update_vallo14_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo14_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo14_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo14_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_get_default_entry(netbufferv4_update_vallo14_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo15_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo15_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo15_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo15_tbl_table_get_default_entry(netbufferv4_update_vallo15_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo15_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo15_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo15_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_get_default_entry(netbufferv4_update_vallo15_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo16_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo16_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo16_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo16_tbl_table_get_default_entry(netbufferv4_update_vallo16_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo16_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo16_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo16_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_get_default_entry(netbufferv4_update_vallo16_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo1_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo1_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo1_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo1_tbl_table_get_default_entry(netbufferv4_update_vallo1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo1_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo1_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo1_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_get_default_entry(netbufferv4_update_vallo1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo2_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo2_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo2_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo2_tbl_table_get_default_entry(netbufferv4_update_vallo2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo2_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo2_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo2_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_get_default_entry(netbufferv4_update_vallo2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo3_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo3_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo3_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo3_tbl_table_get_default_entry(netbufferv4_update_vallo3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo3_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo3_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo3_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_get_default_entry(netbufferv4_update_vallo3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo4_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo4_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo4_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo4_tbl_table_get_default_entry(netbufferv4_update_vallo4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo4_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo4_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo4_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_get_default_entry(netbufferv4_update_vallo4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo5_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo5_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo5_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo5_tbl_table_get_default_entry(netbufferv4_update_vallo5_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo5_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo5_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo5_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_get_default_entry(netbufferv4_update_vallo5_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo6_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo6_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo6_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo6_tbl_table_get_default_entry(netbufferv4_update_vallo6_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo6_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo6_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo6_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_get_default_entry(netbufferv4_update_vallo6_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo7_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo7_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo7_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo7_tbl_table_get_default_entry(netbufferv4_update_vallo7_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo7_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo7_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo7_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_get_default_entry(netbufferv4_update_vallo7_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo8_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo8_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo8_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo8_tbl_table_get_default_entry(netbufferv4_update_vallo8_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo8_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo8_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo8_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_get_default_entry(netbufferv4_update_vallo8_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_get_default_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo9_tbl_table_get_default_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo9_tbl_table_get_default_entry_handle();
}

void netbufferv4Client::send_update_vallo9_tbl_table_get_default_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_get_default_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_get_default_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_get_default_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_get_default_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_get_default_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_get_default_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo9_tbl_table_get_default_entry(netbufferv4_update_vallo9_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  send_update_vallo9_tbl_table_get_default_entry(sess_hdl, dev_tgt, read_from_hw);
  recv_update_vallo9_tbl_table_get_default_entry(_return);
}

void netbufferv4Client::send_update_vallo9_tbl_table_get_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_get_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_get_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_get_default_entry(netbufferv4_update_vallo9_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_get_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_get_default_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_get_default_entry failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cache_frequency_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_cache_frequency_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_case1_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_case1_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_case1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm1_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_cm1_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_cm1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm2_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_cm2_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_cm2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm3_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_cm3_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_cm3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm4_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_cm4_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_cm4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_deleted_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_deleted_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_deleted_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_latest_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_latest_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_latest_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_savedseq_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_savedseq_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_savedseq_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_seq_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_seq_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_seq_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_validvalue_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_access_validvalue_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_access_validvalue_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_add_and_remove_value_header_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_add_and_remove_value_header_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_cache_lookup_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_cache_lookup_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_cache_lookup_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_drop_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_drop_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_drop_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_eg_port_forward_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_eg_port_forward_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm1_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_for_cm1_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm2_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_for_cm2_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm3_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_for_cm3_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm4_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_for_cm4_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_partition_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_for_partition_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_for_partition_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_seq_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_for_seq_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_partition_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_hash_partition_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_hash_partition_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ig_port_forward_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_ig_port_forward_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ipv4_forward_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_ipv4_forward_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_is_hot_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_is_hot_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_is_hot_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_lastclone_lastscansplit_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_lastclone_lastscansplit_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_need_recirculate_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_need_recirculate_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_need_recirculate_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_prepare_for_cachehit_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_prepare_for_cachehit_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_recirculate_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_recirculate_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_recirculate_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_sample_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_sample_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_sample_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_save_client_udpport_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_save_client_udpport_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::set_hot_threshold_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_set_hot_threshold_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_set_hot_threshold_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_set_hot_threshold_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_hot_threshold_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_hot_threshold_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_snapshot_flag_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_snapshot_flag_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_ipmac_srcport_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_ipmac_srcport_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_pktlen_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_pktlen_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_pktlen_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi10_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi10_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi10_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi11_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi11_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi11_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi12_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi12_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi12_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi13_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi13_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi13_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi14_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi14_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi14_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi15_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi15_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi15_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi16_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi16_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi16_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi1_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi1_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi2_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi2_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi3_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi3_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi4_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi4_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi5_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi5_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi5_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi6_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi6_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi6_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi7_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi7_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi7_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi8_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi8_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi8_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi9_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_valhi9_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_valhi9_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallen_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallen_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallen_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo10_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo10_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo10_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo11_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo11_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo11_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo12_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo12_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo12_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo13_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo13_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo13_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo14_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo14_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo14_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo15_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo15_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo15_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo16_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo16_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo16_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo1_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo1_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo1_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo2_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo2_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo2_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo3_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo3_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo3_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo4_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo4_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo4_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo5_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo5_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo5_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo6_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo6_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo6_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo7_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo7_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo7_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo8_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo8_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo8_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo9_tbl_table_reset_default_entry(sess_hdl, dev_tgt);
  recv_update_vallo9_tbl_table_reset_default_entry();
}

void netbufferv4Client::send_update_vallo9_tbl_table_reset_default_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_reset_default_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_reset_default_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_reset_default_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_reset_default_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_reset_default_entry_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

int32_t netbufferv4Client::access_cache_frequency_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cache_frequency_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_cache_frequency_tbl_get_entry_count();
}

void netbufferv4Client::send_access_cache_frequency_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cache_frequency_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cache_frequency_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_case1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_case1_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_case1_tbl_get_entry_count();
}

void netbufferv4Client::send_access_case1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_case1_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_case1_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_cm1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm1_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_cm1_tbl_get_entry_count();
}

void netbufferv4Client::send_access_cm1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm1_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm1_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_cm2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm2_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_cm2_tbl_get_entry_count();
}

void netbufferv4Client::send_access_cm2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm2_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm2_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_cm3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm3_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_cm3_tbl_get_entry_count();
}

void netbufferv4Client::send_access_cm3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm3_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm3_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_cm4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm4_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_cm4_tbl_get_entry_count();
}

void netbufferv4Client::send_access_cm4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm4_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm4_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_deleted_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_deleted_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_deleted_tbl_get_entry_count();
}

void netbufferv4Client::send_access_deleted_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_deleted_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_deleted_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_latest_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_latest_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_latest_tbl_get_entry_count();
}

void netbufferv4Client::send_access_latest_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_latest_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_latest_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_savedseq_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_savedseq_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_savedseq_tbl_get_entry_count();
}

void netbufferv4Client::send_access_savedseq_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_savedseq_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_savedseq_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_seq_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_seq_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_seq_tbl_get_entry_count();
}

void netbufferv4Client::send_access_seq_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_seq_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_seq_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_validvalue_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_validvalue_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_access_validvalue_tbl_get_entry_count();
}

void netbufferv4Client::send_access_validvalue_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_validvalue_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_validvalue_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::add_and_remove_value_header_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_add_and_remove_value_header_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_add_and_remove_value_header_tbl_get_entry_count();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_add_and_remove_value_header_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_add_and_remove_value_header_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::cache_lookup_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_cache_lookup_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_cache_lookup_tbl_get_entry_count();
}

void netbufferv4Client::send_cache_lookup_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_cache_lookup_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_cache_lookup_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::drop_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_drop_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_drop_tbl_get_entry_count();
}

void netbufferv4Client::send_drop_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_drop_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_drop_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::eg_port_forward_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_eg_port_forward_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_eg_port_forward_tbl_get_entry_count();
}

void netbufferv4Client::send_eg_port_forward_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_eg_port_forward_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_eg_port_forward_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm1_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_for_cm1_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_for_cm1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm1_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm1_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm2_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_for_cm2_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_for_cm2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm2_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm2_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm3_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_for_cm3_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_for_cm3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm3_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm3_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm4_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_for_cm4_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_for_cm4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm4_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm4_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_for_partition_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_partition_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_for_partition_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_for_partition_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_partition_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_partition_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_for_seq_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_seq_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_for_seq_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_for_seq_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_seq_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_seq_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::hash_partition_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_partition_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_hash_partition_tbl_get_entry_count();
}

void netbufferv4Client::send_hash_partition_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_partition_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_partition_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::ig_port_forward_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ig_port_forward_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_ig_port_forward_tbl_get_entry_count();
}

void netbufferv4Client::send_ig_port_forward_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_ig_port_forward_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_ig_port_forward_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::ipv4_forward_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ipv4_forward_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_ipv4_forward_tbl_get_entry_count();
}

void netbufferv4Client::send_ipv4_forward_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_ipv4_forward_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_ipv4_forward_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::is_hot_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_is_hot_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_is_hot_tbl_get_entry_count();
}

void netbufferv4Client::send_is_hot_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_is_hot_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_is_hot_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::lastclone_lastscansplit_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_lastclone_lastscansplit_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_lastclone_lastscansplit_tbl_get_entry_count();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::need_recirculate_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_need_recirculate_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_need_recirculate_tbl_get_entry_count();
}

void netbufferv4Client::send_need_recirculate_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_need_recirculate_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_need_recirculate_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::prepare_for_cachehit_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_prepare_for_cachehit_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_prepare_for_cachehit_tbl_get_entry_count();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_prepare_for_cachehit_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_prepare_for_cachehit_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::recirculate_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_recirculate_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_recirculate_tbl_get_entry_count();
}

void netbufferv4Client::send_recirculate_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_recirculate_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_recirculate_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::sample_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_sample_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_sample_tbl_get_entry_count();
}

void netbufferv4Client::send_sample_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_sample_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_sample_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::save_client_udpport_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_save_client_udpport_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_save_client_udpport_tbl_get_entry_count();
}

void netbufferv4Client::send_save_client_udpport_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_save_client_udpport_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_save_client_udpport_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::set_hot_threshold_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_set_hot_threshold_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_set_hot_threshold_tbl_get_entry_count();
}

void netbufferv4Client::send_set_hot_threshold_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_set_hot_threshold_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_set_hot_threshold_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::snapshot_flag_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_snapshot_flag_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_snapshot_flag_tbl_get_entry_count();
}

void netbufferv4Client::send_snapshot_flag_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_snapshot_flag_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_snapshot_flag_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_ipmac_srcport_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_ipmac_srcport_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_ipmac_srcport_tbl_get_entry_count();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_ipmac_srcport_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_ipmac_srcport_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_pktlen_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_pktlen_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_pktlen_tbl_get_entry_count();
}

void netbufferv4Client::send_update_pktlen_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_pktlen_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_pktlen_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi10_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi10_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi10_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi10_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi10_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi10_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi11_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi11_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi11_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi11_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi11_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi11_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi12_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi12_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi12_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi12_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi12_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi12_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi13_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi13_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi13_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi13_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi13_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi13_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi14_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi14_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi14_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi14_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi14_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi14_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi15_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi15_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi15_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi15_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi15_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi15_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi16_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi16_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi16_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi16_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi16_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi16_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi1_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi1_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi1_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi1_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi2_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi2_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi2_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi2_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi3_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi3_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi3_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi3_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi4_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi4_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi4_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi4_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi5_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi5_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi5_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi5_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi5_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi5_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi6_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi6_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi6_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi6_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi6_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi6_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi7_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi7_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi7_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi7_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi7_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi7_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi8_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi8_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi8_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi8_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi8_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi8_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_valhi9_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi9_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_valhi9_tbl_get_entry_count();
}

void netbufferv4Client::send_update_valhi9_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi9_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi9_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallen_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallen_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallen_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallen_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallen_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallen_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo10_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo10_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo10_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo10_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo10_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo10_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo11_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo11_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo11_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo11_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo11_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo11_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo12_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo12_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo12_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo12_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo12_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo12_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo13_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo13_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo13_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo13_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo13_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo13_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo14_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo14_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo14_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo14_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo14_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo14_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo15_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo15_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo15_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo15_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo15_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo15_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo16_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo16_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo16_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo16_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo16_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo16_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo1_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo1_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo1_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo1_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo1_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo2_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo2_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo2_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo2_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo2_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo3_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo3_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo3_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo3_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo3_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo4_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo4_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo4_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo4_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo4_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo5_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo5_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo5_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo5_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo5_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo5_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo6_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo6_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo6_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo6_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo6_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo6_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo7_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo7_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo7_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo7_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo7_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo7_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo8_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo8_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo8_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo8_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo8_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo8_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::update_vallo9_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo9_tbl_get_entry_count(sess_hdl, dev_tgt);
  return recv_update_vallo9_tbl_get_entry_count();
}

void netbufferv4Client::send_update_vallo9_tbl_get_entry_count(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_get_entry_count", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_get_entry_count_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo9_tbl_get_entry_count()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_get_entry_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo9_tbl_get_entry_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_get_entry_count failed: unknown result");
}

int32_t netbufferv4Client::access_cache_frequency_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cache_frequency_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cache_frequency_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_cache_frequency_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cache_frequency_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cache_frequency_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_cache_frequency_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_cache_frequency_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_cache_frequency_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_get_entry(netbufferv4_access_cache_frequency_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_cache_frequency_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_cache_frequency_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_cache_frequency_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_get_entry(netbufferv4_access_cache_frequency_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_case1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_case1_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_case1_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_case1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_case1_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_case1_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_case1_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_case1_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_case1_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_case1_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_case1_tbl_get_entry(netbufferv4_access_case1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_case1_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_case1_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_case1_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_get_entry(netbufferv4_access_case1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_cm1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm1_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm1_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_cm1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm1_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm1_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm1_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_cm1_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_cm1_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_cm1_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_cm1_tbl_get_entry(netbufferv4_access_cm1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_cm1_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_cm1_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_cm1_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_get_entry(netbufferv4_access_cm1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_cm2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm2_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm2_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_cm2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm2_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm2_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm2_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_cm2_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_cm2_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_cm2_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_cm2_tbl_get_entry(netbufferv4_access_cm2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_cm2_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_cm2_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_cm2_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_get_entry(netbufferv4_access_cm2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_cm3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm3_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm3_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_cm3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm3_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm3_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm3_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_cm3_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_cm3_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_cm3_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_cm3_tbl_get_entry(netbufferv4_access_cm3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_cm3_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_cm3_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_cm3_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_get_entry(netbufferv4_access_cm3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_cm4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm4_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_cm4_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_cm4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_cm4_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_cm4_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_cm4_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_cm4_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_cm4_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_cm4_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_cm4_tbl_get_entry(netbufferv4_access_cm4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_cm4_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_cm4_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_cm4_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_get_entry(netbufferv4_access_cm4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_deleted_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_deleted_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_deleted_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_deleted_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_deleted_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_deleted_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_deleted_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_deleted_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_deleted_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_deleted_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_deleted_tbl_get_entry(netbufferv4_access_deleted_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_deleted_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_deleted_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_deleted_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_get_entry(netbufferv4_access_deleted_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_latest_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_latest_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_latest_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_latest_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_latest_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_latest_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_latest_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_latest_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_latest_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_latest_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_latest_tbl_get_entry(netbufferv4_access_latest_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_latest_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_latest_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_latest_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_get_entry(netbufferv4_access_latest_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_savedseq_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_savedseq_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_savedseq_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_savedseq_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_savedseq_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_savedseq_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_savedseq_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_savedseq_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_savedseq_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_savedseq_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_savedseq_tbl_get_entry(netbufferv4_access_savedseq_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_savedseq_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_savedseq_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_savedseq_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_get_entry(netbufferv4_access_savedseq_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_seq_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_seq_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_seq_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_seq_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_seq_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_seq_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_seq_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_seq_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_seq_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_seq_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_seq_tbl_get_entry(netbufferv4_access_seq_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_seq_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_seq_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_seq_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_get_entry(netbufferv4_access_seq_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::access_validvalue_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_validvalue_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_access_validvalue_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_access_validvalue_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_access_validvalue_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_access_validvalue_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::access_validvalue_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_access_validvalue_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_access_validvalue_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_access_validvalue_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::access_validvalue_tbl_get_entry(netbufferv4_access_validvalue_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_access_validvalue_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_access_validvalue_tbl_get_entry(_return);
}

void netbufferv4Client::send_access_validvalue_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_get_entry(netbufferv4_access_validvalue_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::add_and_remove_value_header_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_add_and_remove_value_header_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_add_and_remove_value_header_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_add_and_remove_value_header_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_add_and_remove_value_header_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::add_and_remove_value_header_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_add_and_remove_value_header_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_add_and_remove_value_header_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::add_and_remove_value_header_tbl_get_entry(netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_add_and_remove_value_header_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_add_and_remove_value_header_tbl_get_entry(_return);
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_get_entry(netbufferv4_add_and_remove_value_header_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::cache_lookup_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_cache_lookup_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_cache_lookup_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_cache_lookup_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_cache_lookup_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_cache_lookup_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::cache_lookup_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_cache_lookup_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_cache_lookup_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_cache_lookup_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::cache_lookup_tbl_get_entry(netbufferv4_cache_lookup_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_cache_lookup_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_cache_lookup_tbl_get_entry(_return);
}

void netbufferv4Client::send_cache_lookup_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_get_entry(netbufferv4_cache_lookup_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::drop_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_drop_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_drop_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_drop_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_drop_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_drop_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::drop_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_drop_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_drop_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_drop_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::drop_tbl_get_entry(netbufferv4_drop_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_drop_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_drop_tbl_get_entry(_return);
}

void netbufferv4Client::send_drop_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_get_entry(netbufferv4_drop_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::eg_port_forward_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_eg_port_forward_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_eg_port_forward_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_eg_port_forward_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_eg_port_forward_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_eg_port_forward_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::eg_port_forward_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_eg_port_forward_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_eg_port_forward_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_eg_port_forward_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::eg_port_forward_tbl_get_entry(netbufferv4_eg_port_forward_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_eg_port_forward_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_eg_port_forward_tbl_get_entry(_return);
}

void netbufferv4Client::send_eg_port_forward_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_get_entry(netbufferv4_eg_port_forward_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm1_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm1_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_for_cm1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm1_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm1_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm1_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_for_cm1_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_for_cm1_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_for_cm1_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_for_cm1_tbl_get_entry(netbufferv4_hash_for_cm1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_for_cm1_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_for_cm1_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_for_cm1_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_get_entry(netbufferv4_hash_for_cm1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm2_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm2_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_for_cm2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm2_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm2_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm2_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_for_cm2_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_for_cm2_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_for_cm2_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_for_cm2_tbl_get_entry(netbufferv4_hash_for_cm2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_for_cm2_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_for_cm2_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_for_cm2_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_get_entry(netbufferv4_hash_for_cm2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm3_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm3_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_for_cm3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm3_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm3_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm3_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_for_cm3_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_for_cm3_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_for_cm3_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_for_cm3_tbl_get_entry(netbufferv4_hash_for_cm3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_for_cm3_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_for_cm3_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_for_cm3_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_get_entry(netbufferv4_hash_for_cm3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_for_cm4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm4_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_cm4_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_for_cm4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_cm4_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_cm4_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_cm4_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_for_cm4_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_for_cm4_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_for_cm4_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_for_cm4_tbl_get_entry(netbufferv4_hash_for_cm4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_for_cm4_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_for_cm4_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_for_cm4_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_get_entry(netbufferv4_hash_for_cm4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_for_partition_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_partition_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_partition_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_for_partition_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_partition_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_partition_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_partition_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_for_partition_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_for_partition_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_for_partition_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_for_partition_tbl_get_entry(netbufferv4_hash_for_partition_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_for_partition_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_for_partition_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_for_partition_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_get_entry(netbufferv4_hash_for_partition_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_for_seq_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_seq_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_for_seq_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_for_seq_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_for_seq_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_for_seq_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_for_seq_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_for_seq_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_for_seq_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_for_seq_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_for_seq_tbl_get_entry(netbufferv4_hash_for_seq_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_for_seq_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_for_seq_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_for_seq_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_get_entry(netbufferv4_hash_for_seq_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::hash_partition_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_partition_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_hash_partition_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_hash_partition_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_hash_partition_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_hash_partition_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::hash_partition_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_hash_partition_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_hash_partition_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_hash_partition_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::hash_partition_tbl_get_entry(netbufferv4_hash_partition_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_hash_partition_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_hash_partition_tbl_get_entry(_return);
}

void netbufferv4Client::send_hash_partition_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_get_entry(netbufferv4_hash_partition_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::ig_port_forward_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ig_port_forward_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_ig_port_forward_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_ig_port_forward_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_ig_port_forward_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_ig_port_forward_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::ig_port_forward_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_ig_port_forward_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_ig_port_forward_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_ig_port_forward_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::ig_port_forward_tbl_get_entry(netbufferv4_ig_port_forward_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_ig_port_forward_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_ig_port_forward_tbl_get_entry(_return);
}

void netbufferv4Client::send_ig_port_forward_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_get_entry(netbufferv4_ig_port_forward_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::ipv4_forward_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ipv4_forward_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_ipv4_forward_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_ipv4_forward_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_ipv4_forward_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_ipv4_forward_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::ipv4_forward_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_ipv4_forward_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_ipv4_forward_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_ipv4_forward_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::ipv4_forward_tbl_get_entry(netbufferv4_ipv4_forward_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_ipv4_forward_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_ipv4_forward_tbl_get_entry(_return);
}

void netbufferv4Client::send_ipv4_forward_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_get_entry(netbufferv4_ipv4_forward_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::is_hot_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_is_hot_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_is_hot_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_is_hot_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_is_hot_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_is_hot_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::is_hot_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_is_hot_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_is_hot_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_is_hot_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::is_hot_tbl_get_entry(netbufferv4_is_hot_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_is_hot_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_is_hot_tbl_get_entry(_return);
}

void netbufferv4Client::send_is_hot_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_get_entry(netbufferv4_is_hot_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::lastclone_lastscansplit_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_lastclone_lastscansplit_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_lastclone_lastscansplit_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::lastclone_lastscansplit_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_lastclone_lastscansplit_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_lastclone_lastscansplit_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::lastclone_lastscansplit_tbl_get_entry(netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_lastclone_lastscansplit_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_lastclone_lastscansplit_tbl_get_entry(_return);
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_get_entry(netbufferv4_lastclone_lastscansplit_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::need_recirculate_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_need_recirculate_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_need_recirculate_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_need_recirculate_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_need_recirculate_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_need_recirculate_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::need_recirculate_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_need_recirculate_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_need_recirculate_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_need_recirculate_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::need_recirculate_tbl_get_entry(netbufferv4_need_recirculate_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_need_recirculate_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_need_recirculate_tbl_get_entry(_return);
}

void netbufferv4Client::send_need_recirculate_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_get_entry(netbufferv4_need_recirculate_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::prepare_for_cachehit_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_prepare_for_cachehit_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_prepare_for_cachehit_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_prepare_for_cachehit_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_prepare_for_cachehit_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::prepare_for_cachehit_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_prepare_for_cachehit_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_prepare_for_cachehit_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::prepare_for_cachehit_tbl_get_entry(netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_prepare_for_cachehit_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_prepare_for_cachehit_tbl_get_entry(_return);
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_get_entry(netbufferv4_prepare_for_cachehit_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::recirculate_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_recirculate_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_recirculate_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_recirculate_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_recirculate_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_recirculate_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::recirculate_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_recirculate_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_recirculate_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_recirculate_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::recirculate_tbl_get_entry(netbufferv4_recirculate_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_recirculate_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_recirculate_tbl_get_entry(_return);
}

void netbufferv4Client::send_recirculate_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_get_entry(netbufferv4_recirculate_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::sample_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_sample_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_sample_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_sample_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_sample_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_sample_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::sample_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_sample_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_sample_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_sample_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::sample_tbl_get_entry(netbufferv4_sample_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_sample_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_sample_tbl_get_entry(_return);
}

void netbufferv4Client::send_sample_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_get_entry(netbufferv4_sample_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::save_client_udpport_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_save_client_udpport_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_save_client_udpport_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_save_client_udpport_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_save_client_udpport_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_save_client_udpport_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::save_client_udpport_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_save_client_udpport_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_save_client_udpport_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_save_client_udpport_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::save_client_udpport_tbl_get_entry(netbufferv4_save_client_udpport_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_save_client_udpport_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_save_client_udpport_tbl_get_entry(_return);
}

void netbufferv4Client::send_save_client_udpport_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_get_entry(netbufferv4_save_client_udpport_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::set_hot_threshold_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_set_hot_threshold_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_set_hot_threshold_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_set_hot_threshold_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_set_hot_threshold_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_set_hot_threshold_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::set_hot_threshold_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_set_hot_threshold_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_set_hot_threshold_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_set_hot_threshold_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_hot_threshold_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_hot_threshold_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::set_hot_threshold_tbl_get_entry(netbufferv4_set_hot_threshold_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_set_hot_threshold_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_set_hot_threshold_tbl_get_entry(_return);
}

void netbufferv4Client::send_set_hot_threshold_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_hot_threshold_tbl_get_entry(netbufferv4_set_hot_threshold_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_hot_threshold_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::snapshot_flag_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_snapshot_flag_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_snapshot_flag_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_snapshot_flag_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_snapshot_flag_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_snapshot_flag_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::snapshot_flag_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_snapshot_flag_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_snapshot_flag_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_snapshot_flag_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::snapshot_flag_tbl_get_entry(netbufferv4_snapshot_flag_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_snapshot_flag_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_snapshot_flag_tbl_get_entry(_return);
}

void netbufferv4Client::send_snapshot_flag_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_get_entry(netbufferv4_snapshot_flag_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_ipmac_srcport_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_ipmac_srcport_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_ipmac_srcport_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_ipmac_srcport_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_ipmac_srcport_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_ipmac_srcport_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_ipmac_srcport_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_ipmac_srcport_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_ipmac_srcport_tbl_get_entry(netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_ipmac_srcport_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_ipmac_srcport_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_get_entry(netbufferv4_update_ipmac_srcport_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_pktlen_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_pktlen_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_pktlen_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_pktlen_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_pktlen_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_pktlen_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_pktlen_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_pktlen_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_pktlen_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_pktlen_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_pktlen_tbl_get_entry(netbufferv4_update_pktlen_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_pktlen_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_pktlen_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_pktlen_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_get_entry(netbufferv4_update_pktlen_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi10_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi10_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi10_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi10_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi10_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi10_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi10_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi10_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi10_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi10_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi10_tbl_get_entry(netbufferv4_update_valhi10_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi10_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi10_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi10_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_get_entry(netbufferv4_update_valhi10_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi11_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi11_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi11_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi11_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi11_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi11_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi11_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi11_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi11_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi11_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi11_tbl_get_entry(netbufferv4_update_valhi11_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi11_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi11_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi11_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_get_entry(netbufferv4_update_valhi11_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi12_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi12_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi12_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi12_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi12_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi12_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi12_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi12_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi12_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi12_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi12_tbl_get_entry(netbufferv4_update_valhi12_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi12_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi12_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi12_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_get_entry(netbufferv4_update_valhi12_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi13_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi13_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi13_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi13_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi13_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi13_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi13_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi13_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi13_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi13_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi13_tbl_get_entry(netbufferv4_update_valhi13_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi13_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi13_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi13_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_get_entry(netbufferv4_update_valhi13_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi14_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi14_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi14_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi14_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi14_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi14_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi14_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi14_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi14_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi14_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi14_tbl_get_entry(netbufferv4_update_valhi14_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi14_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi14_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi14_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_get_entry(netbufferv4_update_valhi14_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi15_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi15_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi15_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi15_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi15_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi15_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi15_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi15_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi15_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi15_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi15_tbl_get_entry(netbufferv4_update_valhi15_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi15_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi15_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi15_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_get_entry(netbufferv4_update_valhi15_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi16_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi16_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi16_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi16_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi16_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi16_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi16_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi16_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi16_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi16_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi16_tbl_get_entry(netbufferv4_update_valhi16_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi16_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi16_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi16_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_get_entry(netbufferv4_update_valhi16_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi1_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi1_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi1_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi1_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi1_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi1_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi1_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi1_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi1_tbl_get_entry(netbufferv4_update_valhi1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi1_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi1_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi1_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_get_entry(netbufferv4_update_valhi1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi2_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi2_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi2_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi2_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi2_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi2_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi2_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi2_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi2_tbl_get_entry(netbufferv4_update_valhi2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi2_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi2_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi2_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_get_entry(netbufferv4_update_valhi2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi3_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi3_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi3_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi3_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi3_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi3_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi3_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi3_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi3_tbl_get_entry(netbufferv4_update_valhi3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi3_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi3_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi3_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_get_entry(netbufferv4_update_valhi3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi4_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi4_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi4_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi4_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi4_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi4_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi4_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi4_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi4_tbl_get_entry(netbufferv4_update_valhi4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi4_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi4_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi4_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_get_entry(netbufferv4_update_valhi4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi5_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi5_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi5_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi5_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi5_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi5_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi5_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi5_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi5_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi5_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi5_tbl_get_entry(netbufferv4_update_valhi5_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi5_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi5_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi5_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_get_entry(netbufferv4_update_valhi5_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi6_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi6_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi6_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi6_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi6_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi6_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi6_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi6_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi6_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi6_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi6_tbl_get_entry(netbufferv4_update_valhi6_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi6_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi6_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi6_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_get_entry(netbufferv4_update_valhi6_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi7_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi7_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi7_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi7_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi7_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi7_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi7_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi7_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi7_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi7_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi7_tbl_get_entry(netbufferv4_update_valhi7_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi7_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi7_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi7_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_get_entry(netbufferv4_update_valhi7_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi8_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi8_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi8_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi8_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi8_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi8_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi8_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi8_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi8_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi8_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi8_tbl_get_entry(netbufferv4_update_valhi8_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi8_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi8_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi8_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_get_entry(netbufferv4_update_valhi8_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_valhi9_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi9_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_valhi9_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_valhi9_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_valhi9_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_valhi9_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_valhi9_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_valhi9_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_valhi9_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_valhi9_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_valhi9_tbl_get_entry(netbufferv4_update_valhi9_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_valhi9_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_valhi9_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_valhi9_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_get_entry(netbufferv4_update_valhi9_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallen_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallen_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallen_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallen_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallen_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallen_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallen_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallen_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallen_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallen_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallen_tbl_get_entry(netbufferv4_update_vallen_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallen_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallen_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallen_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_get_entry(netbufferv4_update_vallen_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo10_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo10_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo10_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo10_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo10_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo10_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo10_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo10_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo10_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo10_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo10_tbl_get_entry(netbufferv4_update_vallo10_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo10_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo10_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo10_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_get_entry(netbufferv4_update_vallo10_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo11_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo11_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo11_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo11_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo11_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo11_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo11_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo11_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo11_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo11_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo11_tbl_get_entry(netbufferv4_update_vallo11_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo11_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo11_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo11_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_get_entry(netbufferv4_update_vallo11_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo12_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo12_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo12_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo12_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo12_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo12_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo12_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo12_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo12_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo12_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo12_tbl_get_entry(netbufferv4_update_vallo12_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo12_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo12_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo12_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_get_entry(netbufferv4_update_vallo12_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo13_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo13_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo13_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo13_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo13_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo13_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo13_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo13_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo13_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo13_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo13_tbl_get_entry(netbufferv4_update_vallo13_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo13_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo13_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo13_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_get_entry(netbufferv4_update_vallo13_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo14_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo14_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo14_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo14_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo14_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo14_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo14_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo14_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo14_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo14_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo14_tbl_get_entry(netbufferv4_update_vallo14_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo14_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo14_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo14_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_get_entry(netbufferv4_update_vallo14_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo15_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo15_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo15_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo15_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo15_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo15_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo15_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo15_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo15_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo15_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo15_tbl_get_entry(netbufferv4_update_vallo15_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo15_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo15_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo15_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_get_entry(netbufferv4_update_vallo15_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo16_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo16_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo16_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo16_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo16_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo16_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo16_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo16_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo16_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo16_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo16_tbl_get_entry(netbufferv4_update_vallo16_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo16_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo16_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo16_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_get_entry(netbufferv4_update_vallo16_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo1_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo1_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo1_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo1_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo1_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo1_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo1_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo1_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo1_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo1_tbl_get_entry(netbufferv4_update_vallo1_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo1_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo1_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo1_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_get_entry(netbufferv4_update_vallo1_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo2_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo2_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo2_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo2_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo2_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo2_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo2_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo2_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo2_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo2_tbl_get_entry(netbufferv4_update_vallo2_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo2_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo2_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo2_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_get_entry(netbufferv4_update_vallo2_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo3_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo3_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo3_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo3_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo3_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo3_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo3_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo3_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo3_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo3_tbl_get_entry(netbufferv4_update_vallo3_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo3_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo3_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo3_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_get_entry(netbufferv4_update_vallo3_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo4_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo4_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo4_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo4_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo4_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo4_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo4_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo4_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo4_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo4_tbl_get_entry(netbufferv4_update_vallo4_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo4_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo4_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo4_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_get_entry(netbufferv4_update_vallo4_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo5_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo5_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo5_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo5_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo5_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo5_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo5_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo5_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo5_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo5_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo5_tbl_get_entry(netbufferv4_update_vallo5_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo5_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo5_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo5_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_get_entry(netbufferv4_update_vallo5_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo6_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo6_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo6_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo6_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo6_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo6_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo6_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo6_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo6_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo6_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo6_tbl_get_entry(netbufferv4_update_vallo6_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo6_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo6_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo6_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_get_entry(netbufferv4_update_vallo6_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo7_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo7_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo7_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo7_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo7_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo7_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo7_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo7_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo7_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo7_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo7_tbl_get_entry(netbufferv4_update_vallo7_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo7_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo7_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo7_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_get_entry(netbufferv4_update_vallo7_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo8_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo8_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo8_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo8_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo8_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo8_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo8_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo8_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo8_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo8_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo8_tbl_get_entry(netbufferv4_update_vallo8_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo8_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo8_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo8_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_get_entry(netbufferv4_update_vallo8_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_get_entry failed: unknown result");
}

int32_t netbufferv4Client::update_vallo9_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo9_tbl_get_first_entry_handle(sess_hdl, dev_tgt);
  return recv_update_vallo9_tbl_get_first_entry_handle();
}

void netbufferv4Client::send_update_vallo9_tbl_get_first_entry_handle(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_get_first_entry_handle", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_get_first_entry_handle_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_update_vallo9_tbl_get_first_entry_handle()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_get_first_entry_handle") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_update_vallo9_tbl_get_first_entry_handle_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_get_first_entry_handle failed: unknown result");
}

void netbufferv4Client::update_vallo9_tbl_get_next_entry_handles(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  send_update_vallo9_tbl_get_next_entry_handles(sess_hdl, dev_tgt, entry_hdl, n);
  recv_update_vallo9_tbl_get_next_entry_handles(_return);
}

void netbufferv4Client::send_update_vallo9_tbl_get_next_entry_handles(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const EntryHandle_t entry_hdl, const int32_t n)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_get_next_entry_handles", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_get_next_entry_handles_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.entry_hdl = &entry_hdl;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_get_next_entry_handles(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_get_next_entry_handles") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_get_next_entry_handles_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_get_next_entry_handles failed: unknown result");
}

void netbufferv4Client::update_vallo9_tbl_get_entry(netbufferv4_update_vallo9_tbl_entry_desc_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  send_update_vallo9_tbl_get_entry(sess_hdl, dev_id, entry_hdl, read_from_hw);
  recv_update_vallo9_tbl_get_entry(_return);
}

void netbufferv4Client::send_update_vallo9_tbl_get_entry(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry_hdl, const bool read_from_hw)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_get_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_get_entry_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry_hdl = &entry_hdl;
  args.read_from_hw = &read_from_hw;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_get_entry(netbufferv4_update_vallo9_tbl_entry_desc_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_get_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_get_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_get_entry failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cache_frequency_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_access_cache_frequency_tbl_set_default_action_nop();
}

void netbufferv4Client::send_access_cache_frequency_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_set_default_action_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_case1_tbl_set_default_action_reset_is_case1(sess_hdl, dev_tgt);
  return recv_access_case1_tbl_set_default_action_reset_is_case1();
}

void netbufferv4Client::send_access_case1_tbl_set_default_action_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_set_default_action_reset_is_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_set_default_action_reset_is_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_set_default_action_reset_is_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_set_default_action_reset_is_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_set_default_action_reset_is_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_set_default_action_reset_is_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_set_default_action_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm1_tbl_set_default_action_initialize_cm1_predicate(sess_hdl, dev_tgt);
  return recv_access_cm1_tbl_set_default_action_initialize_cm1_predicate();
}

void netbufferv4Client::send_access_cm1_tbl_set_default_action_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_set_default_action_initialize_cm1_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_set_default_action_initialize_cm1_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_set_default_action_initialize_cm1_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_set_default_action_initialize_cm1_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_set_default_action_initialize_cm1_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_set_default_action_initialize_cm1_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_set_default_action_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm2_tbl_set_default_action_initialize_cm2_predicate(sess_hdl, dev_tgt);
  return recv_access_cm2_tbl_set_default_action_initialize_cm2_predicate();
}

void netbufferv4Client::send_access_cm2_tbl_set_default_action_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_set_default_action_initialize_cm2_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_set_default_action_initialize_cm2_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_set_default_action_initialize_cm2_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_set_default_action_initialize_cm2_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_set_default_action_initialize_cm2_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_set_default_action_initialize_cm2_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_set_default_action_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm3_tbl_set_default_action_initialize_cm3_predicate(sess_hdl, dev_tgt);
  return recv_access_cm3_tbl_set_default_action_initialize_cm3_predicate();
}

void netbufferv4Client::send_access_cm3_tbl_set_default_action_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_set_default_action_initialize_cm3_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_set_default_action_initialize_cm3_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_set_default_action_initialize_cm3_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_set_default_action_initialize_cm3_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_set_default_action_initialize_cm3_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_set_default_action_initialize_cm3_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_set_default_action_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_cm4_tbl_set_default_action_initialize_cm4_predicate(sess_hdl, dev_tgt);
  return recv_access_cm4_tbl_set_default_action_initialize_cm4_predicate();
}

void netbufferv4Client::send_access_cm4_tbl_set_default_action_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_set_default_action_initialize_cm4_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_set_default_action_initialize_cm4_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_set_default_action_initialize_cm4_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_set_default_action_initialize_cm4_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_set_default_action_initialize_cm4_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_set_default_action_initialize_cm4_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_set_default_action_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_deleted_tbl_set_default_action_reset_is_deleted(sess_hdl, dev_tgt);
  return recv_access_deleted_tbl_set_default_action_reset_is_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_set_default_action_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_set_default_action_reset_is_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_set_default_action_reset_is_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_set_default_action_reset_is_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_set_default_action_reset_is_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_set_default_action_reset_is_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_set_default_action_reset_is_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_set_default_action_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_latest_tbl_set_default_action_reset_is_latest(sess_hdl, dev_tgt);
  return recv_access_latest_tbl_set_default_action_reset_is_latest();
}

void netbufferv4Client::send_access_latest_tbl_set_default_action_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_set_default_action_reset_is_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_set_default_action_reset_is_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_set_default_action_reset_is_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_set_default_action_reset_is_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_set_default_action_reset_is_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_set_default_action_reset_is_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_savedseq_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_access_savedseq_tbl_set_default_action_nop();
}

void netbufferv4Client::send_access_savedseq_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_seq_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_access_seq_tbl_set_default_action_nop();
}

void netbufferv4Client::send_access_seq_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_set_default_action_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_access_validvalue_tbl_set_default_action_reset_meta_validvalue(sess_hdl, dev_tgt);
  return recv_access_validvalue_tbl_set_default_action_reset_meta_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_set_default_action_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_set_default_action_reset_meta_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_set_default_action_reset_meta_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_set_default_action_reset_meta_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_set_default_action_reset_meta_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_set_default_action_reset_meta_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_set_default_action_reset_meta_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_set_default_action_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_add_and_remove_value_header_tbl_set_default_action_remove_all(sess_hdl, dev_tgt);
  return recv_add_and_remove_value_header_tbl_set_default_action_remove_all();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_set_default_action_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_set_default_action_remove_all", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_set_default_action_remove_all_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_set_default_action_remove_all()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_set_default_action_remove_all") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_set_default_action_remove_all_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_set_default_action_remove_all failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_set_default_action_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_cache_lookup_tbl_set_default_action_uncached_action(sess_hdl, dev_tgt);
  return recv_cache_lookup_tbl_set_default_action_uncached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_set_default_action_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_set_default_action_uncached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_set_default_action_uncached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_set_default_action_uncached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_set_default_action_uncached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_set_default_action_uncached_action_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_set_default_action_uncached_action failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_drop_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_drop_tbl_set_default_action_nop();
}

void netbufferv4Client::send_drop_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_eg_port_forward_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_eg_port_forward_tbl_set_default_action_nop();
}

void netbufferv4Client::send_eg_port_forward_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm1_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_for_cm1_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_for_cm1_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm2_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_for_cm2_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_for_cm2_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm3_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_for_cm3_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_for_cm3_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_cm4_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_for_cm4_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_for_cm4_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_partition_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_partition_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_for_partition_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_for_partition_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_partition_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_partition_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_for_seq_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_for_seq_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_for_seq_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_partition_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_hash_partition_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_hash_partition_tbl_set_default_action_nop();
}

void netbufferv4Client::send_hash_partition_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_partition_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_partition_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ig_port_forward_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_ig_port_forward_tbl_set_default_action_nop();
}

void netbufferv4Client::send_ig_port_forward_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_ipv4_forward_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_ipv4_forward_tbl_set_default_action_nop();
}

void netbufferv4Client::send_ipv4_forward_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_set_default_action_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_is_hot_tbl_set_default_action_reset_is_hot(sess_hdl, dev_tgt);
  return recv_is_hot_tbl_set_default_action_reset_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_set_default_action_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_set_default_action_reset_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_set_default_action_reset_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_set_default_action_reset_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_set_default_action_reset_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_set_default_action_reset_is_hot_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_set_default_action_reset_is_hot failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit(sess_hdl, dev_tgt);
  return recv_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_set_default_action_reset_is_lastclone_lastscansplit failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_set_default_action_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_need_recirculate_tbl_set_default_action_reset_need_recirculate(sess_hdl, dev_tgt);
  return recv_need_recirculate_tbl_set_default_action_reset_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_set_default_action_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_set_default_action_reset_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_set_default_action_reset_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_set_default_action_reset_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_set_default_action_reset_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_set_default_action_reset_need_recirculate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_set_default_action_reset_need_recirculate failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_set_default_action_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_set_default_action_set_client_sid(sess_hdl, dev_tgt, action_spec);
  return recv_prepare_for_cachehit_tbl_set_default_action_set_client_sid();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_set_default_action_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_set_default_action_set_client_sid", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_set_default_action_set_client_sid_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_set_default_action_set_client_sid()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_set_default_action_set_client_sid") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_set_default_action_set_client_sid_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_set_default_action_set_client_sid failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_recirculate_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_recirculate_tbl_set_default_action_nop();
}

void netbufferv4Client::send_recirculate_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_sample_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_sample_tbl_set_default_action_nop();
}

void netbufferv4Client::send_sample_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_save_client_udpport_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_save_client_udpport_tbl_set_default_action_nop();
}

void netbufferv4Client::send_save_client_udpport_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::set_hot_threshold_tbl_set_default_action_set_hot_threshold(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_set_hot_threshold_action_spec_t& action_spec)
{
  send_set_hot_threshold_tbl_set_default_action_set_hot_threshold(sess_hdl, dev_tgt, action_spec);
  return recv_set_hot_threshold_tbl_set_default_action_set_hot_threshold();
}

void netbufferv4Client::send_set_hot_threshold_tbl_set_default_action_set_hot_threshold(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_set_hot_threshold_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_set_default_action_set_hot_threshold", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_set_default_action_set_hot_threshold_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_set_hot_threshold_tbl_set_default_action_set_hot_threshold()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_set_default_action_set_hot_threshold") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_set_hot_threshold_tbl_set_default_action_set_hot_threshold_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_set_default_action_set_hot_threshold failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_set_default_action_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_snapshot_flag_tbl_set_default_action_reset_snapshot_flag(sess_hdl, dev_tgt);
  return recv_snapshot_flag_tbl_set_default_action_reset_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_set_default_action_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_set_default_action_reset_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_set_default_action_reset_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_set_default_action_reset_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_set_default_action_reset_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_set_default_action_reset_snapshot_flag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_set_default_action_reset_snapshot_flag failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_ipmac_srcport_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_ipmac_srcport_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_pktlen_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_pktlen_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_pktlen_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi10_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi10_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi10_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi11_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi11_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi11_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi12_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi12_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi12_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi13_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi13_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi13_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi14_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi14_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi14_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi15_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi15_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi15_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi16_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi16_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi16_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi1_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi1_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi1_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi2_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi2_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi2_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi3_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi3_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi3_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi4_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi4_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi4_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi5_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi5_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi5_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi6_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi6_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi6_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi7_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi7_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi7_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi8_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi8_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi8_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_valhi9_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_valhi9_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_valhi9_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_set_default_action_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallen_tbl_set_default_action_reset_access_val_mode(sess_hdl, dev_tgt);
  return recv_update_vallen_tbl_set_default_action_reset_access_val_mode();
}

void netbufferv4Client::send_update_vallen_tbl_set_default_action_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_set_default_action_reset_access_val_mode", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_set_default_action_reset_access_val_mode_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_set_default_action_reset_access_val_mode()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_set_default_action_reset_access_val_mode") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_set_default_action_reset_access_val_mode_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_set_default_action_reset_access_val_mode failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo10_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo10_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo10_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo11_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo11_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo11_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo12_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo12_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo12_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo13_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo13_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo13_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo14_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo14_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo14_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo15_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo15_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo15_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo16_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo16_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo16_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo1_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo1_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo1_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo2_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo2_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo2_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo3_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo3_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo3_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo4_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo4_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo4_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo5_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo5_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo5_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo6_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo6_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo6_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo7_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo7_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo7_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo8_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo8_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo8_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_set_default_action_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_update_vallo9_tbl_set_default_action_nop(sess_hdl, dev_tgt);
  return recv_update_vallo9_tbl_set_default_action_nop();
}

void netbufferv4Client::send_update_vallo9_tbl_set_default_action_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_set_default_action_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_set_default_action_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_set_default_action_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_set_default_action_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_set_default_action_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_set_default_action_nop failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_cache_frequency_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_cache_frequency_tbl_set_property();
}

void netbufferv4Client::send_access_cache_frequency_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_cache_frequency_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_cache_frequency_tbl_get_property(_return);
}

void netbufferv4Client::send_access_cache_frequency_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_case1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_case1_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_case1_tbl_set_property();
}

void netbufferv4Client::send_access_case1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_case1_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_case1_tbl_get_property(_return);
}

void netbufferv4Client::send_access_case1_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_cm1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_cm1_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_cm1_tbl_set_property();
}

void netbufferv4Client::send_access_cm1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_cm1_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_cm1_tbl_get_property(_return);
}

void netbufferv4Client::send_access_cm1_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_cm2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_cm2_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_cm2_tbl_set_property();
}

void netbufferv4Client::send_access_cm2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_cm2_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_cm2_tbl_get_property(_return);
}

void netbufferv4Client::send_access_cm2_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_cm3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_cm3_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_cm3_tbl_set_property();
}

void netbufferv4Client::send_access_cm3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_cm3_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_cm3_tbl_get_property(_return);
}

void netbufferv4Client::send_access_cm3_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_cm4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_cm4_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_cm4_tbl_set_property();
}

void netbufferv4Client::send_access_cm4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_cm4_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_cm4_tbl_get_property(_return);
}

void netbufferv4Client::send_access_cm4_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_deleted_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_deleted_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_deleted_tbl_set_property();
}

void netbufferv4Client::send_access_deleted_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_deleted_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_deleted_tbl_get_property(_return);
}

void netbufferv4Client::send_access_deleted_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_latest_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_latest_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_latest_tbl_set_property();
}

void netbufferv4Client::send_access_latest_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_latest_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_latest_tbl_get_property(_return);
}

void netbufferv4Client::send_access_latest_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_savedseq_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_savedseq_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_savedseq_tbl_set_property();
}

void netbufferv4Client::send_access_savedseq_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_savedseq_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_savedseq_tbl_get_property(_return);
}

void netbufferv4Client::send_access_savedseq_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_seq_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_seq_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_seq_tbl_set_property();
}

void netbufferv4Client::send_access_seq_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_seq_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_seq_tbl_get_property(_return);
}

void netbufferv4Client::send_access_seq_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_get_property failed: unknown result");
}

void netbufferv4Client::access_validvalue_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_access_validvalue_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_access_validvalue_tbl_set_property();
}

void netbufferv4Client::send_access_validvalue_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_access_validvalue_tbl_get_property(sess_hdl, dev_id, property);
  recv_access_validvalue_tbl_get_property(_return);
}

void netbufferv4Client::send_access_validvalue_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_get_property failed: unknown result");
}

void netbufferv4Client::add_and_remove_value_header_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_add_and_remove_value_header_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_add_and_remove_value_header_tbl_set_property();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_add_and_remove_value_header_tbl_get_property(sess_hdl, dev_id, property);
  recv_add_and_remove_value_header_tbl_get_property(_return);
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_get_property failed: unknown result");
}

void netbufferv4Client::cache_lookup_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_cache_lookup_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_cache_lookup_tbl_set_property();
}

void netbufferv4Client::send_cache_lookup_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_cache_lookup_tbl_get_property(sess_hdl, dev_id, property);
  recv_cache_lookup_tbl_get_property(_return);
}

void netbufferv4Client::send_cache_lookup_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_get_property failed: unknown result");
}

void netbufferv4Client::drop_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_drop_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_drop_tbl_set_property();
}

void netbufferv4Client::send_drop_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_drop_tbl_get_property(sess_hdl, dev_id, property);
  recv_drop_tbl_get_property(_return);
}

void netbufferv4Client::send_drop_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_get_property failed: unknown result");
}

void netbufferv4Client::eg_port_forward_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_eg_port_forward_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_eg_port_forward_tbl_set_property();
}

void netbufferv4Client::send_eg_port_forward_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_eg_port_forward_tbl_get_property(sess_hdl, dev_id, property);
  recv_eg_port_forward_tbl_get_property(_return);
}

void netbufferv4Client::send_eg_port_forward_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_for_cm1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_for_cm1_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_for_cm1_tbl_set_property();
}

void netbufferv4Client::send_hash_for_cm1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_for_cm1_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_for_cm1_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_for_cm1_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_for_cm2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_for_cm2_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_for_cm2_tbl_set_property();
}

void netbufferv4Client::send_hash_for_cm2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_for_cm2_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_for_cm2_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_for_cm2_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_for_cm3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_for_cm3_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_for_cm3_tbl_set_property();
}

void netbufferv4Client::send_hash_for_cm3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_for_cm3_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_for_cm3_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_for_cm3_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_for_cm4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_for_cm4_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_for_cm4_tbl_set_property();
}

void netbufferv4Client::send_hash_for_cm4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_for_cm4_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_for_cm4_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_for_cm4_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_for_partition_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_for_partition_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_for_partition_tbl_set_property();
}

void netbufferv4Client::send_hash_for_partition_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_partition_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_for_partition_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_for_partition_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_for_partition_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_partition_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_partition_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_partition_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_partition_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_partition_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_partition_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_for_seq_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_for_seq_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_for_seq_tbl_set_property();
}

void netbufferv4Client::send_hash_for_seq_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_for_seq_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_for_seq_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_for_seq_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_get_property failed: unknown result");
}

void netbufferv4Client::hash_partition_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_hash_partition_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_hash_partition_tbl_set_property();
}

void netbufferv4Client::send_hash_partition_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_partition_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_hash_partition_tbl_get_property(sess_hdl, dev_id, property);
  recv_hash_partition_tbl_get_property(_return);
}

void netbufferv4Client::send_hash_partition_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_partition_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_partition_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_partition_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_partition_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_partition_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_partition_tbl_get_property failed: unknown result");
}

void netbufferv4Client::ig_port_forward_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_ig_port_forward_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_ig_port_forward_tbl_set_property();
}

void netbufferv4Client::send_ig_port_forward_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_ig_port_forward_tbl_get_property(sess_hdl, dev_id, property);
  recv_ig_port_forward_tbl_get_property(_return);
}

void netbufferv4Client::send_ig_port_forward_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_get_property failed: unknown result");
}

void netbufferv4Client::ipv4_forward_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_ipv4_forward_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_ipv4_forward_tbl_set_property();
}

void netbufferv4Client::send_ipv4_forward_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_ipv4_forward_tbl_get_property(sess_hdl, dev_id, property);
  recv_ipv4_forward_tbl_get_property(_return);
}

void netbufferv4Client::send_ipv4_forward_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_get_property failed: unknown result");
}

void netbufferv4Client::is_hot_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_is_hot_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_is_hot_tbl_set_property();
}

void netbufferv4Client::send_is_hot_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_is_hot_tbl_get_property(sess_hdl, dev_id, property);
  recv_is_hot_tbl_get_property(_return);
}

void netbufferv4Client::send_is_hot_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_get_property failed: unknown result");
}

void netbufferv4Client::lastclone_lastscansplit_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_lastclone_lastscansplit_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_lastclone_lastscansplit_tbl_set_property();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_lastclone_lastscansplit_tbl_get_property(sess_hdl, dev_id, property);
  recv_lastclone_lastscansplit_tbl_get_property(_return);
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_get_property failed: unknown result");
}

void netbufferv4Client::need_recirculate_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_need_recirculate_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_need_recirculate_tbl_set_property();
}

void netbufferv4Client::send_need_recirculate_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_need_recirculate_tbl_get_property(sess_hdl, dev_id, property);
  recv_need_recirculate_tbl_get_property(_return);
}

void netbufferv4Client::send_need_recirculate_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_get_property failed: unknown result");
}

void netbufferv4Client::prepare_for_cachehit_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_prepare_for_cachehit_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_prepare_for_cachehit_tbl_set_property();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_prepare_for_cachehit_tbl_get_property(sess_hdl, dev_id, property);
  recv_prepare_for_cachehit_tbl_get_property(_return);
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_get_property failed: unknown result");
}

void netbufferv4Client::recirculate_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_recirculate_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_recirculate_tbl_set_property();
}

void netbufferv4Client::send_recirculate_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_recirculate_tbl_get_property(sess_hdl, dev_id, property);
  recv_recirculate_tbl_get_property(_return);
}

void netbufferv4Client::send_recirculate_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_get_property failed: unknown result");
}

void netbufferv4Client::sample_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_sample_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_sample_tbl_set_property();
}

void netbufferv4Client::send_sample_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_sample_tbl_get_property(sess_hdl, dev_id, property);
  recv_sample_tbl_get_property(_return);
}

void netbufferv4Client::send_sample_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_get_property failed: unknown result");
}

void netbufferv4Client::save_client_udpport_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_save_client_udpport_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_save_client_udpport_tbl_set_property();
}

void netbufferv4Client::send_save_client_udpport_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_save_client_udpport_tbl_get_property(sess_hdl, dev_id, property);
  recv_save_client_udpport_tbl_get_property(_return);
}

void netbufferv4Client::send_save_client_udpport_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_get_property failed: unknown result");
}

void netbufferv4Client::set_hot_threshold_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_set_hot_threshold_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_set_hot_threshold_tbl_set_property();
}

void netbufferv4Client::send_set_hot_threshold_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_hot_threshold_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_hot_threshold_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::set_hot_threshold_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_set_hot_threshold_tbl_get_property(sess_hdl, dev_id, property);
  recv_set_hot_threshold_tbl_get_property(_return);
}

void netbufferv4Client::send_set_hot_threshold_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_hot_threshold_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_hot_threshold_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_hot_threshold_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_hot_threshold_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_hot_threshold_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_hot_threshold_tbl_get_property failed: unknown result");
}

void netbufferv4Client::snapshot_flag_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_snapshot_flag_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_snapshot_flag_tbl_set_property();
}

void netbufferv4Client::send_snapshot_flag_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_snapshot_flag_tbl_get_property(sess_hdl, dev_id, property);
  recv_snapshot_flag_tbl_get_property(_return);
}

void netbufferv4Client::send_snapshot_flag_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_ipmac_srcport_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_ipmac_srcport_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_ipmac_srcport_tbl_set_property();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_ipmac_srcport_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_ipmac_srcport_tbl_get_property(_return);
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_pktlen_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_pktlen_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_pktlen_tbl_set_property();
}

void netbufferv4Client::send_update_pktlen_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_pktlen_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_pktlen_tbl_get_property(_return);
}

void netbufferv4Client::send_update_pktlen_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi10_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi10_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi10_tbl_set_property();
}

void netbufferv4Client::send_update_valhi10_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi10_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi10_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi10_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi11_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi11_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi11_tbl_set_property();
}

void netbufferv4Client::send_update_valhi11_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi11_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi11_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi11_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi12_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi12_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi12_tbl_set_property();
}

void netbufferv4Client::send_update_valhi12_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi12_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi12_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi12_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi13_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi13_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi13_tbl_set_property();
}

void netbufferv4Client::send_update_valhi13_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi13_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi13_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi13_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi14_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi14_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi14_tbl_set_property();
}

void netbufferv4Client::send_update_valhi14_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi14_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi14_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi14_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi15_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi15_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi15_tbl_set_property();
}

void netbufferv4Client::send_update_valhi15_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi15_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi15_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi15_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi16_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi16_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi16_tbl_set_property();
}

void netbufferv4Client::send_update_valhi16_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi16_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi16_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi16_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi1_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi1_tbl_set_property();
}

void netbufferv4Client::send_update_valhi1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi1_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi1_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi1_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi2_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi2_tbl_set_property();
}

void netbufferv4Client::send_update_valhi2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi2_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi2_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi2_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi3_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi3_tbl_set_property();
}

void netbufferv4Client::send_update_valhi3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi3_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi3_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi3_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi4_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi4_tbl_set_property();
}

void netbufferv4Client::send_update_valhi4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi4_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi4_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi4_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi5_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi5_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi5_tbl_set_property();
}

void netbufferv4Client::send_update_valhi5_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi5_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi5_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi5_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi6_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi6_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi6_tbl_set_property();
}

void netbufferv4Client::send_update_valhi6_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi6_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi6_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi6_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi7_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi7_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi7_tbl_set_property();
}

void netbufferv4Client::send_update_valhi7_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi7_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi7_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi7_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi8_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi8_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi8_tbl_set_property();
}

void netbufferv4Client::send_update_valhi8_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi8_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi8_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi8_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_valhi9_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_valhi9_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_valhi9_tbl_set_property();
}

void netbufferv4Client::send_update_valhi9_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_valhi9_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_valhi9_tbl_get_property(_return);
}

void netbufferv4Client::send_update_valhi9_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallen_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallen_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallen_tbl_set_property();
}

void netbufferv4Client::send_update_vallen_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallen_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallen_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallen_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo10_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo10_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo10_tbl_set_property();
}

void netbufferv4Client::send_update_vallo10_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo10_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo10_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo10_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo11_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo11_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo11_tbl_set_property();
}

void netbufferv4Client::send_update_vallo11_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo11_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo11_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo11_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo12_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo12_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo12_tbl_set_property();
}

void netbufferv4Client::send_update_vallo12_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo12_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo12_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo12_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo13_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo13_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo13_tbl_set_property();
}

void netbufferv4Client::send_update_vallo13_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo13_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo13_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo13_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo14_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo14_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo14_tbl_set_property();
}

void netbufferv4Client::send_update_vallo14_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo14_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo14_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo14_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo15_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo15_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo15_tbl_set_property();
}

void netbufferv4Client::send_update_vallo15_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo15_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo15_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo15_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo16_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo16_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo16_tbl_set_property();
}

void netbufferv4Client::send_update_vallo16_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo16_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo16_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo16_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo1_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo1_tbl_set_property();
}

void netbufferv4Client::send_update_vallo1_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo1_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo1_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo1_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo2_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo2_tbl_set_property();
}

void netbufferv4Client::send_update_vallo2_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo2_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo2_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo2_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo3_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo3_tbl_set_property();
}

void netbufferv4Client::send_update_vallo3_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo3_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo3_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo3_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo4_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo4_tbl_set_property();
}

void netbufferv4Client::send_update_vallo4_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo4_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo4_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo4_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo5_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo5_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo5_tbl_set_property();
}

void netbufferv4Client::send_update_vallo5_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo5_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo5_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo5_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo6_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo6_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo6_tbl_set_property();
}

void netbufferv4Client::send_update_vallo6_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo6_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo6_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo6_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo7_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo7_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo7_tbl_set_property();
}

void netbufferv4Client::send_update_vallo7_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo7_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo7_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo7_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo8_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo8_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo8_tbl_set_property();
}

void netbufferv4Client::send_update_vallo8_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo8_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo8_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo8_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_get_property failed: unknown result");
}

void netbufferv4Client::update_vallo9_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  send_update_vallo9_tbl_set_property(sess_hdl, dev_id, property, value, prop_args);
  recv_update_vallo9_tbl_set_property();
}

void netbufferv4Client::send_update_vallo9_tbl_set_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property, const tbl_property_value_t::type value, const int32_t prop_args)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_set_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_set_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.value = &value;
  args.prop_args = &prop_args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_set_property()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_set_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_set_property_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_get_property(tbl_property_value_args_t& _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  send_update_vallo9_tbl_get_property(sess_hdl, dev_id, property);
  recv_update_vallo9_tbl_get_property(_return);
}

void netbufferv4Client::send_update_vallo9_tbl_get_property(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const tbl_property_t::type property)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_get_property", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_get_property_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.property = &property;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_get_property(tbl_property_value_args_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_get_property") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_get_property_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_get_property failed: unknown result");
}

void netbufferv4Client::set_learning_timeout(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const int32_t usecs)
{
  send_set_learning_timeout(sess_hdl, dev_id, usecs);
  recv_set_learning_timeout();
}

void netbufferv4Client::send_set_learning_timeout(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const int32_t usecs)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_learning_timeout", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_set_learning_timeout_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.usecs = &usecs;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_set_learning_timeout()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_learning_timeout") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_set_learning_timeout_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::tbl_dbg_counter_type_set(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const std::string& tbl_name, const tbl_dbg_counter_type_t::type type)
{
  send_tbl_dbg_counter_type_set(dev_tgt, tbl_name, type);
  recv_tbl_dbg_counter_type_set();
}

void netbufferv4Client::send_tbl_dbg_counter_type_set(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const std::string& tbl_name, const tbl_dbg_counter_type_t::type type)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("tbl_dbg_counter_type_set", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_tbl_dbg_counter_type_set_pargs args;
  args.dev_tgt = &dev_tgt;
  args.tbl_name = &tbl_name;
  args.type = &type;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_tbl_dbg_counter_type_set()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("tbl_dbg_counter_type_set") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_tbl_dbg_counter_type_set_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::tbl_dbg_counter_get(TblCntrInfo_t& _return, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const std::string& tbl_name)
{
  send_tbl_dbg_counter_get(dev_tgt, tbl_name);
  recv_tbl_dbg_counter_get(_return);
}

void netbufferv4Client::send_tbl_dbg_counter_get(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const std::string& tbl_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("tbl_dbg_counter_get", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_tbl_dbg_counter_get_pargs args;
  args.dev_tgt = &dev_tgt;
  args.tbl_name = &tbl_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_tbl_dbg_counter_get(TblCntrInfo_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("tbl_dbg_counter_get") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_tbl_dbg_counter_get_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "tbl_dbg_counter_get failed: unknown result");
}

void netbufferv4Client::tbl_dbg_counter_clear(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const std::string& tbl_name)
{
  send_tbl_dbg_counter_clear(dev_tgt, tbl_name);
  recv_tbl_dbg_counter_clear();
}

void netbufferv4Client::send_tbl_dbg_counter_clear(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const std::string& tbl_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("tbl_dbg_counter_clear", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_tbl_dbg_counter_clear_pargs args;
  args.dev_tgt = &dev_tgt;
  args.tbl_name = &tbl_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_tbl_dbg_counter_clear()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("tbl_dbg_counter_clear") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_tbl_dbg_counter_clear_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::tbl_dbg_counter_type_stage_set(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage, const tbl_dbg_counter_type_t::type type)
{
  send_tbl_dbg_counter_type_stage_set(dev_tgt, stage, type);
  recv_tbl_dbg_counter_type_stage_set();
}

void netbufferv4Client::send_tbl_dbg_counter_type_stage_set(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage, const tbl_dbg_counter_type_t::type type)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("tbl_dbg_counter_type_stage_set", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_tbl_dbg_counter_type_stage_set_pargs args;
  args.dev_tgt = &dev_tgt;
  args.stage = &stage;
  args.type = &type;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_tbl_dbg_counter_type_stage_set()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("tbl_dbg_counter_type_stage_set") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_tbl_dbg_counter_type_stage_set_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::tbl_dbg_counter_stage_get(TblDbgStageInfo_t& _return, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage)
{
  send_tbl_dbg_counter_stage_get(dev_tgt, stage);
  recv_tbl_dbg_counter_stage_get(_return);
}

void netbufferv4Client::send_tbl_dbg_counter_stage_get(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("tbl_dbg_counter_stage_get", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_tbl_dbg_counter_stage_get_pargs args;
  args.dev_tgt = &dev_tgt;
  args.stage = &stage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_tbl_dbg_counter_stage_get(TblDbgStageInfo_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("tbl_dbg_counter_stage_get") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_tbl_dbg_counter_stage_get_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "tbl_dbg_counter_stage_get failed: unknown result");
}

void netbufferv4Client::tbl_dbg_counter_stage_clear(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage)
{
  send_tbl_dbg_counter_stage_clear(dev_tgt, stage);
  recv_tbl_dbg_counter_stage_clear();
}

void netbufferv4Client::send_tbl_dbg_counter_stage_clear(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("tbl_dbg_counter_stage_clear", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_tbl_dbg_counter_stage_clear_pargs args;
  args.dev_tgt = &dev_tgt;
  args.stage = &stage;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_tbl_dbg_counter_stage_clear()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("tbl_dbg_counter_stage_clear") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_tbl_dbg_counter_stage_clear_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

SnapshotHandle_t netbufferv4Client::snapshot_create(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t start_stage, const int8_t end_stage, const int8_t direction)
{
  send_snapshot_create(dev_tgt, start_stage, end_stage, direction);
  return recv_snapshot_create();
}

void netbufferv4Client::send_snapshot_create(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t start_stage, const int8_t end_stage, const int8_t direction)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_create", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_create_pargs args;
  args.dev_tgt = &dev_tgt;
  args.start_stage = &start_stage;
  args.end_stage = &end_stage;
  args.direction = &direction;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

SnapshotHandle_t netbufferv4Client::recv_snapshot_create()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_create") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  SnapshotHandle_t _return;
  netbufferv4_snapshot_create_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_create failed: unknown result");
}

void netbufferv4Client::snapshot_delete(const SnapshotHandle_t handle)
{
  send_snapshot_delete(handle);
  recv_snapshot_delete();
}

void netbufferv4Client::send_snapshot_delete(const SnapshotHandle_t handle)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_delete_pargs args;
  args.handle = &handle;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_state_set(const SnapshotHandle_t handle, const int32_t state, const int32_t usecs)
{
  send_snapshot_state_set(handle, state, usecs);
  recv_snapshot_state_set();
}

void netbufferv4Client::send_snapshot_state_set(const SnapshotHandle_t handle, const int32_t state, const int32_t usecs)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_state_set", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_state_set_pargs args;
  args.handle = &handle;
  args.state = &state;
  args.usecs = &usecs;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_state_set()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_state_set") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_state_set_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

int32_t netbufferv4Client::snapshot_state_get(const SnapshotHandle_t handle, const int16_t pipe)
{
  send_snapshot_state_get(handle, pipe);
  return recv_snapshot_state_get();
}

void netbufferv4Client::send_snapshot_state_get(const SnapshotHandle_t handle, const int16_t pipe)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_state_get", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_state_get_pargs args;
  args.handle = &handle;
  args.pipe = &pipe;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t netbufferv4Client::recv_snapshot_state_get()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_state_get") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  netbufferv4_snapshot_state_get_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_state_get failed: unknown result");
}

void netbufferv4Client::snapshot_timer_enable(const SnapshotHandle_t handle, const int8_t disable)
{
  send_snapshot_timer_enable(handle, disable);
  recv_snapshot_timer_enable();
}

void netbufferv4Client::send_snapshot_timer_enable(const SnapshotHandle_t handle, const int8_t disable)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_timer_enable", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_timer_enable_pargs args;
  args.handle = &handle;
  args.disable = &disable;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_timer_enable()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_timer_enable") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_timer_enable_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_capture_trigger_set(const SnapshotHandle_t handle, const netbufferv4_snapshot_trig_spec_t& trig_spec, const netbufferv4_snapshot_trig_spec_t& trig_spec2)
{
  send_snapshot_capture_trigger_set(handle, trig_spec, trig_spec2);
  recv_snapshot_capture_trigger_set();
}

void netbufferv4Client::send_snapshot_capture_trigger_set(const SnapshotHandle_t handle, const netbufferv4_snapshot_trig_spec_t& trig_spec, const netbufferv4_snapshot_trig_spec_t& trig_spec2)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_capture_trigger_set", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_capture_trigger_set_pargs args;
  args.handle = &handle;
  args.trig_spec = &trig_spec;
  args.trig_spec2 = &trig_spec2;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_capture_trigger_set()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_capture_trigger_set") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_capture_trigger_set_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

int64_t netbufferv4Client::snapshot_capture_data_get(const SnapshotHandle_t handle, const int16_t pipe, const int16_t stage_id, const std::string& field_name)
{
  send_snapshot_capture_data_get(handle, pipe, stage_id, field_name);
  return recv_snapshot_capture_data_get();
}

void netbufferv4Client::send_snapshot_capture_data_get(const SnapshotHandle_t handle, const int16_t pipe, const int16_t stage_id, const std::string& field_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_capture_data_get", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_capture_data_get_pargs args;
  args.handle = &handle;
  args.pipe = &pipe;
  args.stage_id = &stage_id;
  args.field_name = &field_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t netbufferv4Client::recv_snapshot_capture_data_get()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_capture_data_get") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  netbufferv4_snapshot_capture_data_get_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_capture_data_get failed: unknown result");
}

void netbufferv4Client::snapshot_capture_tbl_data_get(netbufferv4_snapshot_tbl_data_t& _return, const SnapshotHandle_t handle, const int16_t pipe, const std::string& table_name)
{
  send_snapshot_capture_tbl_data_get(handle, pipe, table_name);
  recv_snapshot_capture_tbl_data_get(_return);
}

void netbufferv4Client::send_snapshot_capture_tbl_data_get(const SnapshotHandle_t handle, const int16_t pipe, const std::string& table_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_capture_tbl_data_get", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_capture_tbl_data_get_pargs args;
  args.handle = &handle;
  args.pipe = &pipe;
  args.table_name = &table_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_capture_tbl_data_get(netbufferv4_snapshot_tbl_data_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_capture_tbl_data_get") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_capture_tbl_data_get_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_capture_tbl_data_get failed: unknown result");
}

void netbufferv4Client::snapshot_capture_trigger_fields_clr(const SnapshotHandle_t handle)
{
  send_snapshot_capture_trigger_fields_clr(handle);
  recv_snapshot_capture_trigger_fields_clr();
}

void netbufferv4Client::send_snapshot_capture_trigger_fields_clr(const SnapshotHandle_t handle)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_capture_trigger_fields_clr", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_capture_trigger_fields_clr_pargs args;
  args.handle = &handle;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_capture_trigger_fields_clr()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_capture_trigger_fields_clr") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_capture_trigger_fields_clr_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

bool netbufferv4Client::snapshot_field_in_scope(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage, const int8_t direction, const std::string& field_name)
{
  send_snapshot_field_in_scope(dev_tgt, stage, direction, field_name);
  return recv_snapshot_field_in_scope();
}

void netbufferv4Client::send_snapshot_field_in_scope(const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t stage, const int8_t direction, const std::string& field_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_field_in_scope", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_field_in_scope_pargs args;
  args.dev_tgt = &dev_tgt;
  args.stage = &stage;
  args.direction = &direction;
  args.field_name = &field_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool netbufferv4Client::recv_snapshot_field_in_scope()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_field_in_scope") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  bool _return;
  netbufferv4_snapshot_field_in_scope_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_field_in_scope failed: unknown result");
}

void netbufferv4Client::register_hw_sync_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_cm4_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_cm4_reg();
}

void netbufferv4Client::send_register_hw_sync_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_cm4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_cm4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_cm4_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_cm4_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_cm4_reg(_return);
}

void netbufferv4Client::send_register_read_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_cm4_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_cm4_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_cm4_reg failed: unknown result");
}

void netbufferv4Client::register_write_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  send_register_write_cm4_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_cm4_reg();
}

void netbufferv4Client::send_register_write_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_cm4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_cm4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_cm4_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_cm4_reg();
}

void netbufferv4Client::send_register_reset_all_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_cm4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_cm4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_cm4_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_cm4_reg();
}

void netbufferv4Client::send_register_range_reset_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_cm4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_cm4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  send_register_write_all_cm4_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_cm4_reg();
}

void netbufferv4Client::send_register_write_all_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_cm4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_cm4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_cm4_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_cm4_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_cm4_reg(_return);
}

void netbufferv4Client::send_register_range_read_cm4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_cm4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_cm4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_cm4_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_cm4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_cm4_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_cm4_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi1_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi1_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi1_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi1_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi1_reg(_return);
}

void netbufferv4Client::send_register_read_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi1_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi1_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi1_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi1_reg();
}

void netbufferv4Client::send_register_write_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi1_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi1_reg();
}

void netbufferv4Client::send_register_reset_all_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi1_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi1_reg();
}

void netbufferv4Client::send_register_range_reset_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi1_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi1_reg();
}

void netbufferv4Client::send_register_write_all_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi1_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi1_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi1_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi1_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi1_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi6_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi6_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi6_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi6_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi6_reg(_return);
}

void netbufferv4Client::send_register_read_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi6_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi6_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi6_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi6_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi6_reg();
}

void netbufferv4Client::send_register_write_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi6_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi6_reg();
}

void netbufferv4Client::send_register_reset_all_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi6_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi6_reg();
}

void netbufferv4Client::send_register_range_reset_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi6_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi6_reg();
}

void netbufferv4Client::send_register_write_all_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi6_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi6_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi6_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi6_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi6_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi6_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi14_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi14_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi14_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi14_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi14_reg(_return);
}

void netbufferv4Client::send_register_read_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi14_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi14_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi14_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi14_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi14_reg();
}

void netbufferv4Client::send_register_write_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi14_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi14_reg();
}

void netbufferv4Client::send_register_reset_all_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi14_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi14_reg();
}

void netbufferv4Client::send_register_range_reset_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi14_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi14_reg();
}

void netbufferv4Client::send_register_write_all_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi14_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi14_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi14_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi14_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi14_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi14_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi3_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi3_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi3_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi3_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi3_reg(_return);
}

void netbufferv4Client::send_register_read_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi3_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi3_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi3_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi3_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi3_reg();
}

void netbufferv4Client::send_register_write_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi3_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi3_reg();
}

void netbufferv4Client::send_register_reset_all_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi3_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi3_reg();
}

void netbufferv4Client::send_register_range_reset_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi3_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi3_reg();
}

void netbufferv4Client::send_register_write_all_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi3_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi3_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi3_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi3_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi3_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi3_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo8_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo8_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo8_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo8_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo8_reg(_return);
}

void netbufferv4Client::send_register_read_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo8_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo8_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo8_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo8_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo8_reg();
}

void netbufferv4Client::send_register_write_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo8_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo8_reg();
}

void netbufferv4Client::send_register_reset_all_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo8_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo8_reg();
}

void netbufferv4Client::send_register_range_reset_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo8_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo8_reg();
}

void netbufferv4Client::send_register_write_all_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo8_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo8_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo8_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo8_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo8_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo8_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo2_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo2_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo2_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo2_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo2_reg(_return);
}

void netbufferv4Client::send_register_read_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo2_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo2_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo2_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo2_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo2_reg();
}

void netbufferv4Client::send_register_write_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo2_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo2_reg();
}

void netbufferv4Client::send_register_reset_all_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo2_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo2_reg();
}

void netbufferv4Client::send_register_range_reset_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo2_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo2_reg();
}

void netbufferv4Client::send_register_write_all_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo2_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo2_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo2_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo2_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo2_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo2_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi13_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi13_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi13_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi13_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi13_reg(_return);
}

void netbufferv4Client::send_register_read_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi13_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi13_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi13_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi13_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi13_reg();
}

void netbufferv4Client::send_register_write_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi13_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi13_reg();
}

void netbufferv4Client::send_register_reset_all_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi13_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi13_reg();
}

void netbufferv4Client::send_register_range_reset_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi13_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi13_reg();
}

void netbufferv4Client::send_register_write_all_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi13_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi13_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi13_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi13_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi13_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi13_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo9_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo9_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo9_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo9_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo9_reg(_return);
}

void netbufferv4Client::send_register_read_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo9_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo9_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo9_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo9_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo9_reg();
}

void netbufferv4Client::send_register_write_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo9_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo9_reg();
}

void netbufferv4Client::send_register_reset_all_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo9_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo9_reg();
}

void netbufferv4Client::send_register_range_reset_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo9_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo9_reg();
}

void netbufferv4Client::send_register_write_all_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo9_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo9_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo9_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo9_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo9_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo9_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo14_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo14_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo14_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo14_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo14_reg(_return);
}

void netbufferv4Client::send_register_read_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo14_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo14_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo14_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo14_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo14_reg();
}

void netbufferv4Client::send_register_write_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo14_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo14_reg();
}

void netbufferv4Client::send_register_reset_all_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo14_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo14_reg();
}

void netbufferv4Client::send_register_range_reset_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo14_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo14_reg();
}

void netbufferv4Client::send_register_write_all_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo14_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo14_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo14_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo14_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo14_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo14_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo14_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo14_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo14_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo14_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo14_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo14_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi16_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi16_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi16_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi16_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi16_reg(_return);
}

void netbufferv4Client::send_register_read_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi16_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi16_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi16_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi16_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi16_reg();
}

void netbufferv4Client::send_register_write_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi16_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi16_reg();
}

void netbufferv4Client::send_register_reset_all_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi16_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi16_reg();
}

void netbufferv4Client::send_register_range_reset_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi16_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi16_reg();
}

void netbufferv4Client::send_register_write_all_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi16_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi16_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi16_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi16_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi16_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi16_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi2_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi2_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi2_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi2_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi2_reg(_return);
}

void netbufferv4Client::send_register_read_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi2_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi2_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi2_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi2_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi2_reg();
}

void netbufferv4Client::send_register_write_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi2_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi2_reg();
}

void netbufferv4Client::send_register_reset_all_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi2_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi2_reg();
}

void netbufferv4Client::send_register_range_reset_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi2_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi2_reg();
}

void netbufferv4Client::send_register_write_all_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi2_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi2_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi2_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi2_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi2_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi2_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi10_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi10_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi10_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi10_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi10_reg(_return);
}

void netbufferv4Client::send_register_read_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi10_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi10_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi10_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi10_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi10_reg();
}

void netbufferv4Client::send_register_write_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi10_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi10_reg();
}

void netbufferv4Client::send_register_reset_all_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi10_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi10_reg();
}

void netbufferv4Client::send_register_range_reset_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi10_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi10_reg();
}

void netbufferv4Client::send_register_write_all_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi10_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi10_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi10_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi10_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi10_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi10_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi5_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi5_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi5_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi5_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi5_reg(_return);
}

void netbufferv4Client::send_register_read_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi5_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi5_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi5_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi5_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi5_reg();
}

void netbufferv4Client::send_register_write_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi5_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi5_reg();
}

void netbufferv4Client::send_register_reset_all_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi5_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi5_reg();
}

void netbufferv4Client::send_register_range_reset_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi5_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi5_reg();
}

void netbufferv4Client::send_register_write_all_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi5_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi5_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi5_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi5_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi5_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi5_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_cm3_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_cm3_reg();
}

void netbufferv4Client::send_register_hw_sync_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_cm3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_cm3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_cm3_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_cm3_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_cm3_reg(_return);
}

void netbufferv4Client::send_register_read_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_cm3_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_cm3_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_cm3_reg failed: unknown result");
}

void netbufferv4Client::register_write_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  send_register_write_cm3_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_cm3_reg();
}

void netbufferv4Client::send_register_write_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_cm3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_cm3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_cm3_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_cm3_reg();
}

void netbufferv4Client::send_register_reset_all_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_cm3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_cm3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_cm3_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_cm3_reg();
}

void netbufferv4Client::send_register_range_reset_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_cm3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_cm3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  send_register_write_all_cm3_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_cm3_reg();
}

void netbufferv4Client::send_register_write_all_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_cm3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_cm3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_cm3_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_cm3_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_cm3_reg(_return);
}

void netbufferv4Client::send_register_range_read_cm3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_cm3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_cm3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_cm3_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_cm3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_cm3_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_cm3_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi9_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi9_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi9_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi9_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi9_reg(_return);
}

void netbufferv4Client::send_register_read_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi9_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi9_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi9_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi9_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi9_reg();
}

void netbufferv4Client::send_register_write_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi9_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi9_reg();
}

void netbufferv4Client::send_register_reset_all_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi9_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi9_reg();
}

void netbufferv4Client::send_register_range_reset_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi9_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi9_reg();
}

void netbufferv4Client::send_register_write_all_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi9_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi9_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi9_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi9_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi9_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi9_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi9_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi9_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi9_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi9_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi9_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi9_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi7_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi7_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi7_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi7_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi7_reg(_return);
}

void netbufferv4Client::send_register_read_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi7_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi7_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi7_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi7_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi7_reg();
}

void netbufferv4Client::send_register_write_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi7_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi7_reg();
}

void netbufferv4Client::send_register_reset_all_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi7_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi7_reg();
}

void netbufferv4Client::send_register_range_reset_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi7_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi7_reg();
}

void netbufferv4Client::send_register_write_all_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi7_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi7_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi7_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi7_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi7_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi7_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_cache_frequency_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_cache_frequency_reg();
}

void netbufferv4Client::send_register_hw_sync_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_cache_frequency_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_cache_frequency_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_cache_frequency_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_cache_frequency_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_cache_frequency_reg(_return);
}

void netbufferv4Client::send_register_read_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_cache_frequency_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_cache_frequency_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_cache_frequency_reg failed: unknown result");
}

void netbufferv4Client::register_write_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_cache_frequency_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_cache_frequency_reg();
}

void netbufferv4Client::send_register_write_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_cache_frequency_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_cache_frequency_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_cache_frequency_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_cache_frequency_reg();
}

void netbufferv4Client::send_register_reset_all_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_cache_frequency_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_cache_frequency_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_cache_frequency_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_cache_frequency_reg();
}

void netbufferv4Client::send_register_range_reset_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_cache_frequency_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_cache_frequency_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_cache_frequency_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_cache_frequency_reg();
}

void netbufferv4Client::send_register_write_all_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_cache_frequency_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_cache_frequency_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_cache_frequency_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_cache_frequency_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_cache_frequency_reg(_return);
}

void netbufferv4Client::send_register_range_read_cache_frequency_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_cache_frequency_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_cache_frequency_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_cache_frequency_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_cache_frequency_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_cache_frequency_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_cache_frequency_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_cm2_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_cm2_reg();
}

void netbufferv4Client::send_register_hw_sync_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_cm2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_cm2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_cm2_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_cm2_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_cm2_reg(_return);
}

void netbufferv4Client::send_register_read_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_cm2_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_cm2_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_cm2_reg failed: unknown result");
}

void netbufferv4Client::register_write_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  send_register_write_cm2_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_cm2_reg();
}

void netbufferv4Client::send_register_write_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_cm2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_cm2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_cm2_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_cm2_reg();
}

void netbufferv4Client::send_register_reset_all_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_cm2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_cm2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_cm2_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_cm2_reg();
}

void netbufferv4Client::send_register_range_reset_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_cm2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_cm2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  send_register_write_all_cm2_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_cm2_reg();
}

void netbufferv4Client::send_register_write_all_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_cm2_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_cm2_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_cm2_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_cm2_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_cm2_reg(_return);
}

void netbufferv4Client::send_register_range_read_cm2_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_cm2_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_cm2_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_cm2_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_cm2_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_cm2_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_cm2_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_deleted_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_deleted_reg();
}

void netbufferv4Client::send_register_hw_sync_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_deleted_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_deleted_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_deleted_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_deleted_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_deleted_reg(_return);
}

void netbufferv4Client::send_register_read_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_deleted_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_deleted_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_deleted_reg failed: unknown result");
}

void netbufferv4Client::register_write_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  send_register_write_deleted_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_deleted_reg();
}

void netbufferv4Client::send_register_write_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_deleted_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_deleted_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_deleted_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_deleted_reg();
}

void netbufferv4Client::send_register_reset_all_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_deleted_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_deleted_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_deleted_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_deleted_reg();
}

void netbufferv4Client::send_register_range_reset_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_deleted_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_deleted_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  send_register_write_all_deleted_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_deleted_reg();
}

void netbufferv4Client::send_register_write_all_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_deleted_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_deleted_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_deleted_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_deleted_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_deleted_reg(_return);
}

void netbufferv4Client::send_register_range_read_deleted_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_deleted_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_deleted_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_deleted_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_deleted_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_deleted_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_deleted_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi11_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi11_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi11_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi11_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi11_reg(_return);
}

void netbufferv4Client::send_register_read_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi11_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi11_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi11_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi11_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi11_reg();
}

void netbufferv4Client::send_register_write_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi11_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi11_reg();
}

void netbufferv4Client::send_register_reset_all_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi11_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi11_reg();
}

void netbufferv4Client::send_register_range_reset_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi11_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi11_reg();
}

void netbufferv4Client::send_register_write_all_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi11_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi11_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi11_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi11_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi11_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi11_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo13_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo13_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo13_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo13_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo13_reg(_return);
}

void netbufferv4Client::send_register_read_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo13_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo13_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo13_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo13_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo13_reg();
}

void netbufferv4Client::send_register_write_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo13_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo13_reg();
}

void netbufferv4Client::send_register_reset_all_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo13_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo13_reg();
}

void netbufferv4Client::send_register_range_reset_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo13_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo13_reg();
}

void netbufferv4Client::send_register_write_all_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo13_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo13_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo13_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo13_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo13_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo13_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo13_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo13_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo13_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo13_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo13_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo13_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo7_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo7_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo7_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo7_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo7_reg(_return);
}

void netbufferv4Client::send_register_read_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo7_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo7_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo7_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo7_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo7_reg();
}

void netbufferv4Client::send_register_write_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo7_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo7_reg();
}

void netbufferv4Client::send_register_reset_all_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo7_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo7_reg();
}

void netbufferv4Client::send_register_range_reset_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo7_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo7_reg();
}

void netbufferv4Client::send_register_write_all_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo7_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo7_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo7_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo7_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo7_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo7_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo7_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo7_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo7_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo7_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo7_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo7_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo6_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo6_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo6_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo6_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo6_reg(_return);
}

void netbufferv4Client::send_register_read_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo6_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo6_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo6_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo6_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo6_reg();
}

void netbufferv4Client::send_register_write_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo6_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo6_reg();
}

void netbufferv4Client::send_register_reset_all_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo6_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo6_reg();
}

void netbufferv4Client::send_register_range_reset_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo6_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo6_reg();
}

void netbufferv4Client::send_register_write_all_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo6_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo6_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo6_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo6_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo6_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo6_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo6_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo6_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo6_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo6_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo6_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo6_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_seq_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_seq_reg();
}

void netbufferv4Client::send_register_hw_sync_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_seq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_seq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_seq_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_seq_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_seq_reg(_return);
}

void netbufferv4Client::send_register_read_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_seq_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_seq_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_seq_reg failed: unknown result");
}

void netbufferv4Client::register_write_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_seq_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_seq_reg();
}

void netbufferv4Client::send_register_write_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_seq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_seq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_seq_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_seq_reg();
}

void netbufferv4Client::send_register_reset_all_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_seq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_seq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_seq_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_seq_reg();
}

void netbufferv4Client::send_register_range_reset_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_seq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_seq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_seq_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_seq_reg();
}

void netbufferv4Client::send_register_write_all_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_seq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_seq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_seq_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_seq_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_seq_reg(_return);
}

void netbufferv4Client::send_register_range_read_seq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_seq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_seq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_seq_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_seq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_seq_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_seq_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo12_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo12_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo12_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo12_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo12_reg(_return);
}

void netbufferv4Client::send_register_read_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo12_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo12_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo12_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo12_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo12_reg();
}

void netbufferv4Client::send_register_write_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo12_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo12_reg();
}

void netbufferv4Client::send_register_reset_all_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo12_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo12_reg();
}

void netbufferv4Client::send_register_range_reset_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo12_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo12_reg();
}

void netbufferv4Client::send_register_write_all_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo12_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo12_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo12_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo12_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo12_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo12_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo11_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo11_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo11_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo11_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo11_reg(_return);
}

void netbufferv4Client::send_register_read_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo11_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo11_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo11_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo11_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo11_reg();
}

void netbufferv4Client::send_register_write_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo11_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo11_reg();
}

void netbufferv4Client::send_register_reset_all_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo11_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo11_reg();
}

void netbufferv4Client::send_register_range_reset_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo11_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo11_reg();
}

void netbufferv4Client::send_register_write_all_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo11_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo11_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo11_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo11_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo11_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo11_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo11_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo11_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo11_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo11_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo11_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo11_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo5_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo5_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo5_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo5_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo5_reg(_return);
}

void netbufferv4Client::send_register_read_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo5_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo5_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo5_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo5_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo5_reg();
}

void netbufferv4Client::send_register_write_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo5_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo5_reg();
}

void netbufferv4Client::send_register_reset_all_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo5_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo5_reg();
}

void netbufferv4Client::send_register_range_reset_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo5_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo5_reg();
}

void netbufferv4Client::send_register_write_all_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo5_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo5_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo5_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo5_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo5_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo5_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo5_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo5_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo5_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo5_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo5_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo5_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_cm1_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_cm1_reg();
}

void netbufferv4Client::send_register_hw_sync_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_cm1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_cm1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_cm1_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_cm1_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_cm1_reg(_return);
}

void netbufferv4Client::send_register_read_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_cm1_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_cm1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_cm1_reg failed: unknown result");
}

void netbufferv4Client::register_write_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  send_register_write_cm1_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_cm1_reg();
}

void netbufferv4Client::send_register_write_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_cm1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_cm1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_cm1_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_cm1_reg();
}

void netbufferv4Client::send_register_reset_all_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_cm1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_cm1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_cm1_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_cm1_reg();
}

void netbufferv4Client::send_register_range_reset_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_cm1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_cm1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  send_register_write_all_cm1_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_cm1_reg();
}

void netbufferv4Client::send_register_write_all_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_cm1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_cm1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_cm1_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_cm1_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_cm1_reg(_return);
}

void netbufferv4Client::send_register_range_read_cm1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_cm1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_cm1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_cm1_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_cm1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_cm1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_cm1_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_validvalue_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_validvalue_reg();
}

void netbufferv4Client::send_register_hw_sync_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_validvalue_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_validvalue_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_validvalue_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_validvalue_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_validvalue_reg(_return);
}

void netbufferv4Client::send_register_read_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_validvalue_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_validvalue_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_validvalue_reg failed: unknown result");
}

void netbufferv4Client::register_write_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  send_register_write_validvalue_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_validvalue_reg();
}

void netbufferv4Client::send_register_write_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_validvalue_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_validvalue_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_validvalue_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_validvalue_reg();
}

void netbufferv4Client::send_register_reset_all_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_validvalue_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_validvalue_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_validvalue_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_validvalue_reg();
}

void netbufferv4Client::send_register_range_reset_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_validvalue_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_validvalue_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  send_register_write_all_validvalue_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_validvalue_reg();
}

void netbufferv4Client::send_register_write_all_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_validvalue_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_validvalue_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_validvalue_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_validvalue_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_validvalue_reg(_return);
}

void netbufferv4Client::send_register_range_read_validvalue_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_validvalue_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_validvalue_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_validvalue_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_validvalue_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_validvalue_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_validvalue_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi4_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi4_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi4_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi4_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi4_reg(_return);
}

void netbufferv4Client::send_register_read_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi4_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi4_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi4_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi4_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi4_reg();
}

void netbufferv4Client::send_register_write_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi4_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi4_reg();
}

void netbufferv4Client::send_register_reset_all_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi4_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi4_reg();
}

void netbufferv4Client::send_register_range_reset_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi4_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi4_reg();
}

void netbufferv4Client::send_register_write_all_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi4_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi4_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi4_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi4_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi4_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi4_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo15_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo15_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo15_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo15_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo15_reg(_return);
}

void netbufferv4Client::send_register_read_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo15_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo15_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo15_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo15_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo15_reg();
}

void netbufferv4Client::send_register_write_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo15_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo15_reg();
}

void netbufferv4Client::send_register_reset_all_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo15_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo15_reg();
}

void netbufferv4Client::send_register_range_reset_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo15_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo15_reg();
}

void netbufferv4Client::send_register_write_all_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo15_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo15_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo15_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo15_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo15_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo15_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi12_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi12_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi12_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi12_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi12_reg(_return);
}

void netbufferv4Client::send_register_read_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi12_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi12_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi12_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi12_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi12_reg();
}

void netbufferv4Client::send_register_write_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi12_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi12_reg();
}

void netbufferv4Client::send_register_reset_all_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi12_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi12_reg();
}

void netbufferv4Client::send_register_range_reset_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi12_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi12_reg();
}

void netbufferv4Client::send_register_write_all_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi12_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi12_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi12_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi12_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi12_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi12_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi12_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi12_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi12_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi12_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi12_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi12_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_latest_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_latest_reg();
}

void netbufferv4Client::send_register_hw_sync_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_latest_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_latest_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_latest_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_latest_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_latest_reg(_return);
}

void netbufferv4Client::send_register_read_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_latest_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_latest_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_latest_reg failed: unknown result");
}

void netbufferv4Client::register_write_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  send_register_write_latest_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_latest_reg();
}

void netbufferv4Client::send_register_write_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_latest_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_latest_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_latest_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_latest_reg();
}

void netbufferv4Client::send_register_reset_all_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_latest_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_latest_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_latest_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_latest_reg();
}

void netbufferv4Client::send_register_range_reset_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_latest_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_latest_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  send_register_write_all_latest_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_latest_reg();
}

void netbufferv4Client::send_register_write_all_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_latest_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_latest_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_latest_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_latest_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_latest_reg(_return);
}

void netbufferv4Client::send_register_range_read_latest_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_latest_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_latest_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_latest_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_latest_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_latest_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_latest_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo10_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo10_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo10_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo10_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo10_reg(_return);
}

void netbufferv4Client::send_register_read_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo10_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo10_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo10_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo10_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo10_reg();
}

void netbufferv4Client::send_register_write_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo10_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo10_reg();
}

void netbufferv4Client::send_register_reset_all_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo10_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo10_reg();
}

void netbufferv4Client::send_register_range_reset_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo10_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo10_reg();
}

void netbufferv4Client::send_register_write_all_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo10_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo10_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo10_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo10_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo10_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo10_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo10_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo10_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo10_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo10_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo10_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo10_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo4_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo4_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo4_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo4_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo4_reg(_return);
}

void netbufferv4Client::send_register_read_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo4_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo4_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo4_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo4_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo4_reg();
}

void netbufferv4Client::send_register_write_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo4_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo4_reg();
}

void netbufferv4Client::send_register_reset_all_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo4_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo4_reg();
}

void netbufferv4Client::send_register_range_reset_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo4_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo4_reg();
}

void netbufferv4Client::send_register_write_all_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo4_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo4_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo4_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo4_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo4_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo4_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo4_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo4_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo4_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo4_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo4_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo4_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo16_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo16_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo16_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo16_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo16_reg(_return);
}

void netbufferv4Client::send_register_read_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo16_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo16_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo16_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo16_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo16_reg();
}

void netbufferv4Client::send_register_write_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo16_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo16_reg();
}

void netbufferv4Client::send_register_reset_all_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo16_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo16_reg();
}

void netbufferv4Client::send_register_range_reset_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo16_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo16_reg();
}

void netbufferv4Client::send_register_write_all_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo16_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo16_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo16_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo16_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo16_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo16_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo16_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo16_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo16_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo16_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo16_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo16_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo3_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo3_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo3_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo3_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo3_reg(_return);
}

void netbufferv4Client::send_register_read_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo3_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo3_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo3_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo3_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo3_reg();
}

void netbufferv4Client::send_register_write_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo3_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo3_reg();
}

void netbufferv4Client::send_register_reset_all_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo3_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo3_reg();
}

void netbufferv4Client::send_register_range_reset_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo3_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo3_reg();
}

void netbufferv4Client::send_register_write_all_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo3_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo3_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo3_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo3_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo3_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo3_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo3_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo3_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo3_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo3_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo3_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo3_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi8_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi8_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi8_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi8_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi8_reg(_return);
}

void netbufferv4Client::send_register_read_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi8_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi8_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi8_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi8_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi8_reg();
}

void netbufferv4Client::send_register_write_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi8_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi8_reg();
}

void netbufferv4Client::send_register_reset_all_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi8_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi8_reg();
}

void netbufferv4Client::send_register_range_reset_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi8_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi8_reg();
}

void netbufferv4Client::send_register_write_all_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi8_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi8_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi8_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi8_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi8_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi8_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi8_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi8_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi8_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi8_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi8_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi8_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallen_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallen_reg();
}

void netbufferv4Client::send_register_hw_sync_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallen_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallen_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallen_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallen_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallen_reg(_return);
}

void netbufferv4Client::send_register_read_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallen_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallen_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallen_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  send_register_write_vallen_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallen_reg();
}

void netbufferv4Client::send_register_write_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallen_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallen_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallen_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallen_reg();
}

void netbufferv4Client::send_register_reset_all_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallen_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallen_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallen_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallen_reg();
}

void netbufferv4Client::send_register_range_reset_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallen_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallen_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  send_register_write_all_vallen_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallen_reg();
}

void netbufferv4Client::send_register_write_all_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int16_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallen_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallen_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallen_reg(std::vector<int16_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallen_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallen_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallen_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallen_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallen_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallen_reg(std::vector<int16_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallen_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallen_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallen_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_vallo1_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_vallo1_reg();
}

void netbufferv4Client::send_register_hw_sync_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_vallo1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_vallo1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_vallo1_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_vallo1_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_vallo1_reg(_return);
}

void netbufferv4Client::send_register_read_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_vallo1_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_vallo1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_vallo1_reg failed: unknown result");
}

void netbufferv4Client::register_write_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_vallo1_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_vallo1_reg();
}

void netbufferv4Client::send_register_write_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_vallo1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_vallo1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_vallo1_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_vallo1_reg();
}

void netbufferv4Client::send_register_reset_all_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_vallo1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_vallo1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_vallo1_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_vallo1_reg();
}

void netbufferv4Client::send_register_range_reset_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_vallo1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_vallo1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_vallo1_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_vallo1_reg();
}

void netbufferv4Client::send_register_write_all_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_vallo1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_vallo1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_vallo1_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_vallo1_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_vallo1_reg(_return);
}

void netbufferv4Client::send_register_range_read_vallo1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_vallo1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_vallo1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_vallo1_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_vallo1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_vallo1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_vallo1_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_savedseq_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_savedseq_reg();
}

void netbufferv4Client::send_register_hw_sync_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_savedseq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_savedseq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_savedseq_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_savedseq_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_savedseq_reg(_return);
}

void netbufferv4Client::send_register_read_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_savedseq_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_savedseq_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_savedseq_reg failed: unknown result");
}

void netbufferv4Client::register_write_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_savedseq_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_savedseq_reg();
}

void netbufferv4Client::send_register_write_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_savedseq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_savedseq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_savedseq_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_savedseq_reg();
}

void netbufferv4Client::send_register_reset_all_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_savedseq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_savedseq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_savedseq_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_savedseq_reg();
}

void netbufferv4Client::send_register_range_reset_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_savedseq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_savedseq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_savedseq_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_savedseq_reg();
}

void netbufferv4Client::send_register_write_all_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_savedseq_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_savedseq_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_savedseq_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_savedseq_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_savedseq_reg(_return);
}

void netbufferv4Client::send_register_range_read_savedseq_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_savedseq_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_savedseq_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_savedseq_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_savedseq_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_savedseq_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_savedseq_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_valhi15_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_valhi15_reg();
}

void netbufferv4Client::send_register_hw_sync_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_valhi15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_valhi15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_valhi15_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_valhi15_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_valhi15_reg(_return);
}

void netbufferv4Client::send_register_read_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_valhi15_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_valhi15_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_valhi15_reg failed: unknown result");
}

void netbufferv4Client::register_write_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  send_register_write_valhi15_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_valhi15_reg();
}

void netbufferv4Client::send_register_write_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_valhi15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_valhi15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_valhi15_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_valhi15_reg();
}

void netbufferv4Client::send_register_reset_all_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_valhi15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_valhi15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_valhi15_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_valhi15_reg();
}

void netbufferv4Client::send_register_range_reset_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_valhi15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_valhi15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  send_register_write_all_valhi15_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_valhi15_reg();
}

void netbufferv4Client::send_register_write_all_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_valhi15_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_valhi15_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_valhi15_reg(std::vector<int32_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_valhi15_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_valhi15_reg(_return);
}

void netbufferv4Client::send_register_range_read_valhi15_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_valhi15_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_valhi15_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_valhi15_reg(std::vector<int32_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_valhi15_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_valhi15_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_valhi15_reg failed: unknown result");
}

void netbufferv4Client::register_hw_sync_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_hw_sync_case1_reg(sess_hdl, dev_tgt);
  recv_register_hw_sync_case1_reg();
}

void netbufferv4Client::send_register_hw_sync_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_hw_sync_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_hw_sync_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_hw_sync_case1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_hw_sync_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_hw_sync_case1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_read_case1_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  send_register_read_case1_reg(sess_hdl, dev_tgt, index, flags);
  recv_register_read_case1_reg(_return);
}

void netbufferv4Client::send_register_read_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_read_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_read_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_read_case1_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_read_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_read_case1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_read_case1_reg failed: unknown result");
}

void netbufferv4Client::register_write_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  send_register_write_case1_reg(sess_hdl, dev_tgt, index, register_value);
  recv_register_write_case1_reg();
}

void netbufferv4Client::send_register_write_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_case1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_case1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_reset_all_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  send_register_reset_all_case1_reg(sess_hdl, dev_tgt);
  recv_register_reset_all_case1_reg();
}

void netbufferv4Client::send_register_reset_all_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_reset_all_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_reset_all_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_reset_all_case1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_reset_all_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_reset_all_case1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_reset_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  send_register_range_reset_case1_reg(sess_hdl, dev_tgt, index, count);
  recv_register_range_reset_case1_reg();
}

void netbufferv4Client::send_register_range_reset_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_reset_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_reset_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_reset_case1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_reset_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_reset_case1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_write_all_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  send_register_write_all_case1_reg(sess_hdl, dev_tgt, register_value);
  recv_register_write_all_case1_reg();
}

void netbufferv4Client::send_register_write_all_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int8_t register_value)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_write_all_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_write_all_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.register_value = &register_value;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_write_all_case1_reg()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_write_all_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_write_all_case1_reg_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::register_range_read_case1_reg(std::vector<int8_t> & _return, const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  send_register_range_read_case1_reg(sess_hdl, dev_tgt, index, count, flags);
  recv_register_range_read_case1_reg(_return);
}

void netbufferv4Client::send_register_range_read_case1_reg(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const int32_t index, const int32_t count, const netbufferv4_register_flags_t& flags)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("register_range_read_case1_reg", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_register_range_read_case1_reg_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.index = &index;
  args.count = &count;
  args.flags = &flags;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_register_range_read_case1_reg(std::vector<int8_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("register_range_read_case1_reg") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_register_range_read_case1_reg_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "register_range_read_case1_reg failed: unknown result");
}

bool netbufferv4Processor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void netbufferv4Processor::process_access_cache_frequency_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_cache_frequency_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_case1_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_case1_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_case1_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_case1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_cm1_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_cm1_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_cm1_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_cm2_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_cm2_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_cm2_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_cm3_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_cm3_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_cm3_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_cm4_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_cm4_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_cm4_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_deleted_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_deleted_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_deleted_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_deleted_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_latest_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_latest_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_latest_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_latest_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_savedseq_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_savedseq_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_savedseq_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_seq_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_seq_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_seq_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_access_validvalue_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_access_validvalue_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->access_validvalue_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_add_and_remove_value_header_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_cache_lookup_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_cache_lookup_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->cache_lookup_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_drop_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_drop_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->drop_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("drop_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_eg_port_forward_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_eg_port_forward_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_for_cm1_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_for_cm2_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_for_cm3_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_for_cm4_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_for_partition_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_for_partition_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_for_partition_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_for_partition_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_for_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_partition_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_for_seq_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_for_seq_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_hash_partition_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_hash_partition_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_hash_partition_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->hash_partition_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("hash_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_partition_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_ig_port_forward_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_ig_port_forward_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_ipv4_forward_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_ipv4_forward_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_is_hot_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_is_hot_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->is_hot_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("is_hot_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_need_recirculate_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_need_recirculate_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->need_recirculate_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_prepare_for_cachehit_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_recirculate_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_recirculate_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->recirculate_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_sample_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_sample_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->sample_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("sample_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_save_client_udpport_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_save_client_udpport_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_snapshot_flag_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_snapshot_flag_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_ipmac_srcport_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_pktlen_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_pktlen_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_pktlen_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi10_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi10_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi10_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi11_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi11_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi11_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi12_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi12_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi12_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi13_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi13_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi13_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi14_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi14_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi14_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi15_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi15_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi15_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi16_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi16_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi16_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi1_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi1_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi1_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi2_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi2_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi2_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi3_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi3_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi3_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi4_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi4_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi4_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi5_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi5_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi5_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi6_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi6_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi6_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi7_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi7_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi7_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi8_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi8_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi8_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_valhi9_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_valhi9_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_valhi9_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallen_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallen_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallen_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo10_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo10_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo10_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo11_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo11_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo11_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo12_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo12_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo12_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo13_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo13_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo13_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo14_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo14_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo14_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo15_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo15_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo15_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo16_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo16_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo16_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo1_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo1_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo1_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo2_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo2_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo2_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo3_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo3_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo3_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo4_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo4_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo4_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo5_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo5_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo5_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo6_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo6_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo6_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo7_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo7_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo7_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo8_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo8_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo8_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_match_spec_to_entry_hdl(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl");
  }

  netbufferv4_update_vallo9_tbl_match_spec_to_entry_hdl_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl", bytes);
  }

  netbufferv4_update_vallo9_tbl_match_spec_to_entry_hdl_result result;
  try {
    result.success = iface_->update_vallo9_tbl_match_spec_to_entry_hdl(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_match_spec_to_entry_hdl", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_add_with_get_cache_frequency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency");
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_get_cache_frequency_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_get_cache_frequency_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_table_add_with_get_cache_frequency(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_get_cache_frequency", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_get_cache_frequency", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_get_cache_frequency", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_add_with_update_cache_frequency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency");
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_update_cache_frequency_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_update_cache_frequency_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_table_add_with_update_cache_frequency(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_update_cache_frequency", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_update_cache_frequency", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_update_cache_frequency", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_add_with_reset_cache_frequency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency");
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_reset_cache_frequency_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_reset_cache_frequency_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_table_add_with_reset_cache_frequency(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_reset_cache_frequency", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_reset_cache_frequency", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_reset_cache_frequency", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_nop");
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->access_cache_frequency_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_add_with_try_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_add_with_try_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_add_with_try_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_add_with_try_case1");
  }

  netbufferv4_access_case1_tbl_table_add_with_try_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_add_with_try_case1", bytes);
  }

  netbufferv4_access_case1_tbl_table_add_with_try_case1_result result;
  try {
    result.success = iface_->access_case1_tbl_table_add_with_try_case1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_add_with_try_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_add_with_try_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_add_with_try_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_add_with_try_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_add_with_try_case1", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_add_with_read_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_add_with_read_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_add_with_read_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_add_with_read_case1");
  }

  netbufferv4_access_case1_tbl_table_add_with_read_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_add_with_read_case1", bytes);
  }

  netbufferv4_access_case1_tbl_table_add_with_read_case1_result result;
  try {
    result.success = iface_->access_case1_tbl_table_add_with_read_case1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_add_with_read_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_add_with_read_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_add_with_read_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_add_with_read_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_add_with_read_case1", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_add_with_reset_is_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_add_with_reset_is_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_add_with_reset_is_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_add_with_reset_is_case1");
  }

  netbufferv4_access_case1_tbl_table_add_with_reset_is_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_add_with_reset_is_case1", bytes);
  }

  netbufferv4_access_case1_tbl_table_add_with_reset_is_case1_result result;
  try {
    result.success = iface_->access_case1_tbl_table_add_with_reset_is_case1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_add_with_reset_is_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_add_with_reset_is_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_add_with_reset_is_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_add_with_reset_is_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_add_with_reset_is_case1", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_add_with_update_cm1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_add_with_update_cm1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_add_with_update_cm1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_add_with_update_cm1");
  }

  netbufferv4_access_cm1_tbl_table_add_with_update_cm1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_add_with_update_cm1", bytes);
  }

  netbufferv4_access_cm1_tbl_table_add_with_update_cm1_result result;
  try {
    result.success = iface_->access_cm1_tbl_table_add_with_update_cm1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_add_with_update_cm1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_add_with_update_cm1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_add_with_update_cm1");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_add_with_update_cm1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_add_with_update_cm1", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_add_with_initialize_cm1_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate");
  }

  netbufferv4_access_cm1_tbl_table_add_with_initialize_cm1_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate", bytes);
  }

  netbufferv4_access_cm1_tbl_table_add_with_initialize_cm1_predicate_result result;
  try {
    result.success = iface_->access_cm1_tbl_table_add_with_initialize_cm1_predicate(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_add_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_add_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_add_with_initialize_cm1_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_add_with_update_cm2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_add_with_update_cm2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_add_with_update_cm2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_add_with_update_cm2");
  }

  netbufferv4_access_cm2_tbl_table_add_with_update_cm2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_add_with_update_cm2", bytes);
  }

  netbufferv4_access_cm2_tbl_table_add_with_update_cm2_result result;
  try {
    result.success = iface_->access_cm2_tbl_table_add_with_update_cm2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_add_with_update_cm2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_add_with_update_cm2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_add_with_update_cm2");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_add_with_update_cm2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_add_with_update_cm2", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_add_with_initialize_cm2_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate");
  }

  netbufferv4_access_cm2_tbl_table_add_with_initialize_cm2_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate", bytes);
  }

  netbufferv4_access_cm2_tbl_table_add_with_initialize_cm2_predicate_result result;
  try {
    result.success = iface_->access_cm2_tbl_table_add_with_initialize_cm2_predicate(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_add_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_add_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_add_with_initialize_cm2_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_add_with_update_cm3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_add_with_update_cm3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_add_with_update_cm3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_add_with_update_cm3");
  }

  netbufferv4_access_cm3_tbl_table_add_with_update_cm3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_add_with_update_cm3", bytes);
  }

  netbufferv4_access_cm3_tbl_table_add_with_update_cm3_result result;
  try {
    result.success = iface_->access_cm3_tbl_table_add_with_update_cm3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_add_with_update_cm3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_add_with_update_cm3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_add_with_update_cm3");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_add_with_update_cm3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_add_with_update_cm3", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_add_with_initialize_cm3_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate");
  }

  netbufferv4_access_cm3_tbl_table_add_with_initialize_cm3_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate", bytes);
  }

  netbufferv4_access_cm3_tbl_table_add_with_initialize_cm3_predicate_result result;
  try {
    result.success = iface_->access_cm3_tbl_table_add_with_initialize_cm3_predicate(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_add_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_add_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_add_with_initialize_cm3_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_add_with_update_cm4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_add_with_update_cm4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_add_with_update_cm4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_add_with_update_cm4");
  }

  netbufferv4_access_cm4_tbl_table_add_with_update_cm4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_add_with_update_cm4", bytes);
  }

  netbufferv4_access_cm4_tbl_table_add_with_update_cm4_result result;
  try {
    result.success = iface_->access_cm4_tbl_table_add_with_update_cm4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_add_with_update_cm4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_add_with_update_cm4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_add_with_update_cm4");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_add_with_update_cm4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_add_with_update_cm4", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_add_with_initialize_cm4_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate");
  }

  netbufferv4_access_cm4_tbl_table_add_with_initialize_cm4_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate", bytes);
  }

  netbufferv4_access_cm4_tbl_table_add_with_initialize_cm4_predicate_result result;
  try {
    result.success = iface_->access_cm4_tbl_table_add_with_initialize_cm4_predicate(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_add_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_add_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_add_with_initialize_cm4_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_add_with_get_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_add_with_get_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_add_with_get_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_get_deleted");
  }

  netbufferv4_access_deleted_tbl_table_add_with_get_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_get_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_add_with_get_deleted_result result;
  try {
    result.success = iface_->access_deleted_tbl_table_add_with_get_deleted(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_add_with_get_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_add_with_get_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_get_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_add_with_get_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_get_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_add_with_set_and_get_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted");
  }

  netbufferv4_access_deleted_tbl_table_add_with_set_and_get_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_add_with_set_and_get_deleted_result result;
  try {
    result.success = iface_->access_deleted_tbl_table_add_with_set_and_get_deleted(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_add_with_set_and_get_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_add_with_set_and_get_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_set_and_get_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_add_with_reset_and_get_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted");
  }

  netbufferv4_access_deleted_tbl_table_add_with_reset_and_get_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_add_with_reset_and_get_deleted_result result;
  try {
    result.success = iface_->access_deleted_tbl_table_add_with_reset_and_get_deleted(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_add_with_reset_and_get_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_add_with_reset_and_get_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_and_get_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_add_with_reset_is_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted");
  }

  netbufferv4_access_deleted_tbl_table_add_with_reset_is_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_add_with_reset_is_deleted_result result;
  try {
    result.success = iface_->access_deleted_tbl_table_add_with_reset_is_deleted(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_add_with_reset_is_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_add_with_reset_is_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_add_with_reset_is_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_add_with_get_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_add_with_get_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_add_with_get_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_get_latest");
  }

  netbufferv4_access_latest_tbl_table_add_with_get_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_get_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_add_with_get_latest_result result;
  try {
    result.success = iface_->access_latest_tbl_table_add_with_get_latest(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_add_with_get_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_add_with_get_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_get_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_add_with_get_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_get_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_add_with_set_and_get_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest");
  }

  netbufferv4_access_latest_tbl_table_add_with_set_and_get_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_add_with_set_and_get_latest_result result;
  try {
    result.success = iface_->access_latest_tbl_table_add_with_set_and_get_latest(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_add_with_set_and_get_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_add_with_set_and_get_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_set_and_get_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_add_with_reset_and_get_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest");
  }

  netbufferv4_access_latest_tbl_table_add_with_reset_and_get_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_add_with_reset_and_get_latest_result result;
  try {
    result.success = iface_->access_latest_tbl_table_add_with_reset_and_get_latest(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_add_with_reset_and_get_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_add_with_reset_and_get_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_and_get_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_add_with_reset_is_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_add_with_reset_is_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_is_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_is_latest");
  }

  netbufferv4_access_latest_tbl_table_add_with_reset_is_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_is_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_add_with_reset_is_latest_result result;
  try {
    result.success = iface_->access_latest_tbl_table_add_with_reset_is_latest(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_is_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_add_with_reset_is_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_is_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_add_with_reset_is_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_add_with_reset_is_latest", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_add_with_get_savedseq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq");
  }

  netbufferv4_access_savedseq_tbl_table_add_with_get_savedseq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_add_with_get_savedseq_result result;
  try {
    result.success = iface_->access_savedseq_tbl_table_add_with_get_savedseq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_add_with_get_savedseq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_add_with_get_savedseq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_get_savedseq", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_add_with_set_and_get_savedseq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq");
  }

  netbufferv4_access_savedseq_tbl_table_add_with_set_and_get_savedseq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_add_with_set_and_get_savedseq_result result;
  try {
    result.success = iface_->access_savedseq_tbl_table_add_with_set_and_get_savedseq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_add_with_set_and_get_savedseq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_add_with_set_and_get_savedseq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_set_and_get_savedseq", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_nop");
  }

  netbufferv4_access_savedseq_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->access_savedseq_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_add_with_assign_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_add_with_assign_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_add_with_assign_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_add_with_assign_seq");
  }

  netbufferv4_access_seq_tbl_table_add_with_assign_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_add_with_assign_seq", bytes);
  }

  netbufferv4_access_seq_tbl_table_add_with_assign_seq_result result;
  try {
    result.success = iface_->access_seq_tbl_table_add_with_assign_seq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_add_with_assign_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_add_with_assign_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_add_with_assign_seq");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_add_with_assign_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_add_with_assign_seq", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_add_with_nop");
  }

  netbufferv4_access_seq_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_access_seq_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->access_seq_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_add_with_get_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue");
  }

  netbufferv4_access_validvalue_tbl_table_add_with_get_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_add_with_get_validvalue_result result;
  try {
    result.success = iface_->access_validvalue_tbl_table_add_with_get_validvalue(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_add_with_get_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_add_with_get_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_get_validvalue", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_add_with_set_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue");
  }

  netbufferv4_access_validvalue_tbl_table_add_with_set_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_add_with_set_validvalue_result result;
  try {
    result.success = iface_->access_validvalue_tbl_table_add_with_set_validvalue(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_add_with_set_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_add_with_set_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_set_validvalue", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_add_with_reset_meta_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue");
  }

  netbufferv4_access_validvalue_tbl_table_add_with_reset_meta_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_add_with_reset_meta_validvalue_result result;
  try {
    result.success = iface_->access_validvalue_tbl_table_add_with_reset_meta_validvalue(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_add_with_reset_meta_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_add_with_reset_meta_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_add_with_reset_meta_validvalue", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_only_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_only_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_only_vallen_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_only_vallen(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_only_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_only_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_only_vallen", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val1_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val1(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val1", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val2_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val2(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val2", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val3_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val3(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val3", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val4_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val4(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val4", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val5_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val5(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val5", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val6_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val6(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val6", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val7_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val7(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val7", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val8_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val8(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val8", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val9_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val9(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val9", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val10_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val10(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val10", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val11_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val11(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val11", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val12_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val12(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val12", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val13_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val13(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val13", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val14_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val14(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val14", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val15_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val15(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val15", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_add_to_val16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val16_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_add_to_val16(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_add_to_val16", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_add_with_remove_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_remove_all_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_remove_all_result result;
  try {
    result.success = iface_->add_and_remove_value_header_tbl_table_add_with_remove_all(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_remove_all", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_remove_all", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_add_with_remove_all", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_add_with_cached_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_add_with_cached_action", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_add_with_cached_action");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_cached_action");
  }

  netbufferv4_cache_lookup_tbl_table_add_with_cached_action_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_cached_action", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_add_with_cached_action_result result;
  try {
    result.success = iface_->cache_lookup_tbl_table_add_with_cached_action(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_cached_action");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_add_with_cached_action", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_cached_action");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_add_with_cached_action", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_cached_action", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_add_with_uncached_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_add_with_uncached_action", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_add_with_uncached_action");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_uncached_action");
  }

  netbufferv4_cache_lookup_tbl_table_add_with_uncached_action_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_uncached_action", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_add_with_uncached_action_result result;
  try {
    result.success = iface_->cache_lookup_tbl_table_add_with_uncached_action(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_uncached_action");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_add_with_uncached_action", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_uncached_action");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_add_with_uncached_action", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_add_with_uncached_action", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch");
  }

  netbufferv4_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", bytes);
  }

  netbufferv4_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch_result result;
  try {
    result.success = iface_->drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch");
  }

  oprot->writeMessageBegin("drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch");
  }

  netbufferv4_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", bytes);
  }

  netbufferv4_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch_result result;
  try {
    result.success = iface_->drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch");
  }

  oprot->writeMessageBegin("drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_add_with_nop");
  }

  netbufferv4_drop_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_drop_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->drop_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("drop_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_nop");
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->eg_port_forward_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_add_with_hash_for_cm1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1");
  }

  netbufferv4_hash_for_cm1_tbl_table_add_with_hash_for_cm1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_add_with_hash_for_cm1_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_table_add_with_hash_for_cm1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_add_with_hash_for_cm1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_add_with_hash_for_cm1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_hash_for_cm1", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm1_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm1_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_nop");
  }

  netbufferv4_hash_for_cm1_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_for_cm1_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_for_cm1_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm1_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_add_with_hash_for_cm2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2");
  }

  netbufferv4_hash_for_cm2_tbl_table_add_with_hash_for_cm2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_add_with_hash_for_cm2_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_table_add_with_hash_for_cm2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_add_with_hash_for_cm2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_add_with_hash_for_cm2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_hash_for_cm2", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm2_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm2_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_nop");
  }

  netbufferv4_hash_for_cm2_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_for_cm2_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_for_cm2_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm2_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_add_with_hash_for_cm3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3");
  }

  netbufferv4_hash_for_cm3_tbl_table_add_with_hash_for_cm3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_add_with_hash_for_cm3_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_table_add_with_hash_for_cm3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_add_with_hash_for_cm3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_add_with_hash_for_cm3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_hash_for_cm3", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm3_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm3_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_nop");
  }

  netbufferv4_hash_for_cm3_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_for_cm3_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_for_cm3_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm3_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_add_with_hash_for_cm4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4");
  }

  netbufferv4_hash_for_cm4_tbl_table_add_with_hash_for_cm4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_add_with_hash_for_cm4_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_table_add_with_hash_for_cm4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_add_with_hash_for_cm4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_add_with_hash_for_cm4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_hash_for_cm4", bytes);
  }
}

void netbufferv4Processor::process_hash_for_cm4_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_cm4_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_nop");
  }

  netbufferv4_hash_for_cm4_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_for_cm4_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_for_cm4_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_cm4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_for_cm4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_cm4_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_partition_tbl_table_add_with_hash_for_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition");
  }

  netbufferv4_hash_for_partition_tbl_table_add_with_hash_for_partition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition", bytes);
  }

  netbufferv4_hash_for_partition_tbl_table_add_with_hash_for_partition_result result;
  try {
    result.success = iface_->hash_for_partition_tbl_table_add_with_hash_for_partition(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_partition_tbl_table_add_with_hash_for_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition");
  }

  oprot->writeMessageBegin("hash_for_partition_tbl_table_add_with_hash_for_partition", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_hash_for_partition", bytes);
  }
}

void netbufferv4Processor::process_hash_for_partition_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_partition_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_nop");
  }

  netbufferv4_hash_for_partition_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_for_partition_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_for_partition_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_for_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_partition_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_add_with_hash_for_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq");
  }

  netbufferv4_hash_for_seq_tbl_table_add_with_hash_for_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_add_with_hash_for_seq_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_table_add_with_hash_for_seq(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_add_with_hash_for_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_add_with_hash_for_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_hash_for_seq", bytes);
  }
}

void netbufferv4Processor::process_hash_for_seq_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_for_seq_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_nop");
  }

  netbufferv4_hash_for_seq_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_for_seq_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_for_seq_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_for_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_for_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_for_seq_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_hash_partition_tbl_table_add_with_hash_partition(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_partition_tbl_table_add_with_hash_partition", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_partition_tbl_table_add_with_hash_partition");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_partition_tbl_table_add_with_hash_partition");
  }

  netbufferv4_hash_partition_tbl_table_add_with_hash_partition_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_partition_tbl_table_add_with_hash_partition", bytes);
  }

  netbufferv4_hash_partition_tbl_table_add_with_hash_partition_result result;
  try {
    result.success = iface_->hash_partition_tbl_table_add_with_hash_partition(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_partition_tbl_table_add_with_hash_partition");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_partition_tbl_table_add_with_hash_partition", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_partition_tbl_table_add_with_hash_partition");
  }

  oprot->writeMessageBegin("hash_partition_tbl_table_add_with_hash_partition", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_partition_tbl_table_add_with_hash_partition", bytes);
  }
}

void netbufferv4Processor::process_hash_partition_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.hash_partition_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.hash_partition_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.hash_partition_tbl_table_add_with_nop");
  }

  netbufferv4_hash_partition_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.hash_partition_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_hash_partition_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->hash_partition_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.hash_partition_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hash_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.hash_partition_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("hash_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.hash_partition_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch");
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_ig_port_forward_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ig_port_forward_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_nop");
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_ig_port_forward_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->ig_port_forward_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("ig_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ig_port_forward_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_add_with_forward_normal_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response");
  }

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_normal_response_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_normal_response_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_table_add_with_forward_normal_response(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_normal_response", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_normal_response", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_normal_response", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_add_with_forward_special_get_response(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response");
  }

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_special_get_response_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_special_get_response_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_table_add_with_forward_special_get_response(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_special_get_response", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_special_get_response", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_forward_special_get_response", bytes);
  }
}

void netbufferv4Processor::process_ipv4_forward_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.ipv4_forward_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_nop");
  }

  netbufferv4_ipv4_forward_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_ipv4_forward_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->ipv4_forward_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ipv4_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("ipv4_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.ipv4_forward_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_add_with_set_is_hot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_add_with_set_is_hot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_add_with_set_is_hot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_add_with_set_is_hot");
  }

  netbufferv4_is_hot_tbl_table_add_with_set_is_hot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_add_with_set_is_hot", bytes);
  }

  netbufferv4_is_hot_tbl_table_add_with_set_is_hot_result result;
  try {
    result.success = iface_->is_hot_tbl_table_add_with_set_is_hot(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_add_with_set_is_hot");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_add_with_set_is_hot", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_add_with_set_is_hot");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_add_with_set_is_hot", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_add_with_set_is_hot", bytes);
  }
}

void netbufferv4Processor::process_is_hot_tbl_table_add_with_reset_is_hot(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.is_hot_tbl_table_add_with_reset_is_hot", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.is_hot_tbl_table_add_with_reset_is_hot");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.is_hot_tbl_table_add_with_reset_is_hot");
  }

  netbufferv4_is_hot_tbl_table_add_with_reset_is_hot_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.is_hot_tbl_table_add_with_reset_is_hot", bytes);
  }

  netbufferv4_is_hot_tbl_table_add_with_reset_is_hot_result result;
  try {
    result.success = iface_->is_hot_tbl_table_add_with_reset_is_hot(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.is_hot_tbl_table_add_with_reset_is_hot");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("is_hot_tbl_table_add_with_reset_is_hot", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.is_hot_tbl_table_add_with_reset_is_hot");
  }

  oprot->writeMessageBegin("is_hot_tbl_table_add_with_reset_is_hot", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.is_hot_tbl_table_add_with_reset_is_hot", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", bytes);
  }
}

void netbufferv4Processor::process_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit");
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", bytes);
  }

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit_result result;
  try {
    result.success = iface_->lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit");
  }

  oprot->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_add_with_set_need_recirculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate");
  }

  netbufferv4_need_recirculate_tbl_table_add_with_set_need_recirculate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_add_with_set_need_recirculate_result result;
  try {
    result.success = iface_->need_recirculate_tbl_table_add_with_set_need_recirculate(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_add_with_set_need_recirculate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_add_with_set_need_recirculate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_set_need_recirculate", bytes);
  }
}

void netbufferv4Processor::process_need_recirculate_tbl_table_add_with_reset_need_recirculate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate");
  }

  netbufferv4_need_recirculate_tbl_table_add_with_reset_need_recirculate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate", bytes);
  }

  netbufferv4_need_recirculate_tbl_table_add_with_reset_need_recirculate_result result;
  try {
    result.success = iface_->need_recirculate_tbl_table_add_with_reset_need_recirculate(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("need_recirculate_tbl_table_add_with_reset_need_recirculate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate");
  }

  oprot->writeMessageBegin("need_recirculate_tbl_table_add_with_reset_need_recirculate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.need_recirculate_tbl_table_add_with_reset_need_recirculate", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_add_with_set_client_sid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_set_client_sid_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_set_client_sid_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_table_add_with_set_client_sid(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_set_client_sid", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_set_client_sid", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_set_client_sid", bytes);
  }
}

void netbufferv4Processor::process_prepare_for_cachehit_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop");
  }

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->prepare_for_cachehit_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.prepare_for_cachehit_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_add_with_recirculate_pkt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt");
  }

  netbufferv4_recirculate_tbl_table_add_with_recirculate_pkt_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt", bytes);
  }

  netbufferv4_recirculate_tbl_table_add_with_recirculate_pkt_result result;
  try {
    result.success = iface_->recirculate_tbl_table_add_with_recirculate_pkt(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_add_with_recirculate_pkt", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_add_with_recirculate_pkt", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_add_with_recirculate_pkt", bytes);
  }
}

void netbufferv4Processor::process_recirculate_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.recirculate_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.recirculate_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.recirculate_tbl_table_add_with_nop");
  }

  netbufferv4_recirculate_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.recirculate_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_recirculate_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->recirculate_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.recirculate_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("recirculate_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.recirculate_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("recirculate_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.recirculate_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_add_with_sample(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_add_with_sample", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_add_with_sample");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_add_with_sample");
  }

  netbufferv4_sample_tbl_table_add_with_sample_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_add_with_sample", bytes);
  }

  netbufferv4_sample_tbl_table_add_with_sample_result result;
  try {
    result.success = iface_->sample_tbl_table_add_with_sample(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_add_with_sample");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_add_with_sample", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_add_with_sample");
  }

  oprot->writeMessageBegin("sample_tbl_table_add_with_sample", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_add_with_sample", bytes);
  }
}

void netbufferv4Processor::process_sample_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.sample_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.sample_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.sample_tbl_table_add_with_nop");
  }

  netbufferv4_sample_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.sample_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_sample_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->sample_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.sample_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sample_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.sample_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("sample_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.sample_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_add_with_save_client_udpport(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport");
  }

  netbufferv4_save_client_udpport_tbl_table_add_with_save_client_udpport_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_add_with_save_client_udpport_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_table_add_with_save_client_udpport(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_add_with_save_client_udpport", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_add_with_save_client_udpport", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_save_client_udpport", bytes);
  }
}

void netbufferv4Processor::process_save_client_udpport_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.save_client_udpport_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_nop");
  }

  netbufferv4_save_client_udpport_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_save_client_udpport_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->save_client_udpport_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("save_client_udpport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("save_client_udpport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.save_client_udpport_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_add_with_set_snapshot_flag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag");
  }

  netbufferv4_snapshot_flag_tbl_table_add_with_set_snapshot_flag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_add_with_set_snapshot_flag_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_table_add_with_set_snapshot_flag(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_add_with_set_snapshot_flag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_add_with_set_snapshot_flag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_set_snapshot_flag", bytes);
  }
}

void netbufferv4Processor::process_snapshot_flag_tbl_table_add_with_reset_snapshot_flag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag");
  }

  netbufferv4_snapshot_flag_tbl_table_add_with_reset_snapshot_flag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag", bytes);
  }

  netbufferv4_snapshot_flag_tbl_table_add_with_reset_snapshot_flag_result result;
  try {
    result.success = iface_->snapshot_flag_tbl_table_add_with_reset_snapshot_flag(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("snapshot_flag_tbl_table_add_with_reset_snapshot_flag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag");
  }

  oprot->writeMessageBegin("snapshot_flag_tbl_table_add_with_reset_snapshot_flag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.snapshot_flag_tbl_table_add_with_reset_snapshot_flag", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", bytes);
  }
}

void netbufferv4Processor::process_update_ipmac_srcport_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop");
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_ipmac_srcport_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_ipmac_srcport_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_add_with_update_pktlen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen");
  }

  netbufferv4_update_pktlen_tbl_table_add_with_update_pktlen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_add_with_update_pktlen_result result;
  try {
    result.success = iface_->update_pktlen_tbl_table_add_with_update_pktlen(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority, args.action_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_add_with_update_pktlen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_add_with_update_pktlen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_update_pktlen", bytes);
  }
}

void netbufferv4Processor::process_update_pktlen_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_pktlen_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_pktlen_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_nop");
  }

  netbufferv4_update_pktlen_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_pktlen_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_pktlen_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_pktlen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_pktlen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_pktlen_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_add_with_get_valhi10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10");
  }

  netbufferv4_update_valhi10_tbl_table_add_with_get_valhi10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_add_with_get_valhi10_result result;
  try {
    result.success = iface_->update_valhi10_tbl_table_add_with_get_valhi10(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_get_valhi10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_get_valhi10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_get_valhi10", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_add_with_set_and_get_valhi10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10");
  }

  netbufferv4_update_valhi10_tbl_table_add_with_set_and_get_valhi10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_add_with_set_and_get_valhi10_result result;
  try {
    result.success = iface_->update_valhi10_tbl_table_add_with_set_and_get_valhi10(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_set_and_get_valhi10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_set_and_get_valhi10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_set_and_get_valhi10", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_add_with_reset_and_get_valhi10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10");
  }

  netbufferv4_update_valhi10_tbl_table_add_with_reset_and_get_valhi10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_add_with_reset_and_get_valhi10_result result;
  try {
    result.success = iface_->update_valhi10_tbl_table_add_with_reset_and_get_valhi10(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_reset_and_get_valhi10", bytes);
  }
}

void netbufferv4Processor::process_update_valhi10_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi10_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi10_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi10_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi10_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi10_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi10_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_add_with_get_valhi11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11");
  }

  netbufferv4_update_valhi11_tbl_table_add_with_get_valhi11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_add_with_get_valhi11_result result;
  try {
    result.success = iface_->update_valhi11_tbl_table_add_with_get_valhi11(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_get_valhi11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_get_valhi11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_get_valhi11", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_add_with_set_and_get_valhi11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11");
  }

  netbufferv4_update_valhi11_tbl_table_add_with_set_and_get_valhi11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_add_with_set_and_get_valhi11_result result;
  try {
    result.success = iface_->update_valhi11_tbl_table_add_with_set_and_get_valhi11(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_set_and_get_valhi11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_set_and_get_valhi11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_set_and_get_valhi11", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_add_with_reset_and_get_valhi11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11");
  }

  netbufferv4_update_valhi11_tbl_table_add_with_reset_and_get_valhi11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_add_with_reset_and_get_valhi11_result result;
  try {
    result.success = iface_->update_valhi11_tbl_table_add_with_reset_and_get_valhi11(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_reset_and_get_valhi11", bytes);
  }
}

void netbufferv4Processor::process_update_valhi11_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi11_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi11_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi11_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi11_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi11_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi11_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_add_with_get_valhi12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12");
  }

  netbufferv4_update_valhi12_tbl_table_add_with_get_valhi12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_add_with_get_valhi12_result result;
  try {
    result.success = iface_->update_valhi12_tbl_table_add_with_get_valhi12(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_get_valhi12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_get_valhi12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_get_valhi12", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_add_with_set_and_get_valhi12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12");
  }

  netbufferv4_update_valhi12_tbl_table_add_with_set_and_get_valhi12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_add_with_set_and_get_valhi12_result result;
  try {
    result.success = iface_->update_valhi12_tbl_table_add_with_set_and_get_valhi12(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_set_and_get_valhi12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_set_and_get_valhi12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_set_and_get_valhi12", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_add_with_reset_and_get_valhi12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12");
  }

  netbufferv4_update_valhi12_tbl_table_add_with_reset_and_get_valhi12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_add_with_reset_and_get_valhi12_result result;
  try {
    result.success = iface_->update_valhi12_tbl_table_add_with_reset_and_get_valhi12(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_reset_and_get_valhi12", bytes);
  }
}

void netbufferv4Processor::process_update_valhi12_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi12_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi12_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi12_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi12_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi12_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi12_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_add_with_get_valhi13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13");
  }

  netbufferv4_update_valhi13_tbl_table_add_with_get_valhi13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_add_with_get_valhi13_result result;
  try {
    result.success = iface_->update_valhi13_tbl_table_add_with_get_valhi13(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_get_valhi13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_get_valhi13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_get_valhi13", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_add_with_set_and_get_valhi13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13");
  }

  netbufferv4_update_valhi13_tbl_table_add_with_set_and_get_valhi13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_add_with_set_and_get_valhi13_result result;
  try {
    result.success = iface_->update_valhi13_tbl_table_add_with_set_and_get_valhi13(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_set_and_get_valhi13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_set_and_get_valhi13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_set_and_get_valhi13", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_add_with_reset_and_get_valhi13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13");
  }

  netbufferv4_update_valhi13_tbl_table_add_with_reset_and_get_valhi13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_add_with_reset_and_get_valhi13_result result;
  try {
    result.success = iface_->update_valhi13_tbl_table_add_with_reset_and_get_valhi13(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_reset_and_get_valhi13", bytes);
  }
}

void netbufferv4Processor::process_update_valhi13_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi13_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi13_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi13_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi13_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi13_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi13_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_add_with_get_valhi14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14");
  }

  netbufferv4_update_valhi14_tbl_table_add_with_get_valhi14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_add_with_get_valhi14_result result;
  try {
    result.success = iface_->update_valhi14_tbl_table_add_with_get_valhi14(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_get_valhi14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_get_valhi14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_get_valhi14", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_add_with_set_and_get_valhi14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14");
  }

  netbufferv4_update_valhi14_tbl_table_add_with_set_and_get_valhi14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_add_with_set_and_get_valhi14_result result;
  try {
    result.success = iface_->update_valhi14_tbl_table_add_with_set_and_get_valhi14(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_set_and_get_valhi14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_set_and_get_valhi14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_set_and_get_valhi14", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_add_with_reset_and_get_valhi14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14");
  }

  netbufferv4_update_valhi14_tbl_table_add_with_reset_and_get_valhi14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_add_with_reset_and_get_valhi14_result result;
  try {
    result.success = iface_->update_valhi14_tbl_table_add_with_reset_and_get_valhi14(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_reset_and_get_valhi14", bytes);
  }
}

void netbufferv4Processor::process_update_valhi14_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi14_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi14_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi14_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi14_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi14_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi14_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_add_with_get_valhi15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15");
  }

  netbufferv4_update_valhi15_tbl_table_add_with_get_valhi15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_add_with_get_valhi15_result result;
  try {
    result.success = iface_->update_valhi15_tbl_table_add_with_get_valhi15(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_get_valhi15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_get_valhi15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_get_valhi15", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_add_with_set_and_get_valhi15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15");
  }

  netbufferv4_update_valhi15_tbl_table_add_with_set_and_get_valhi15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_add_with_set_and_get_valhi15_result result;
  try {
    result.success = iface_->update_valhi15_tbl_table_add_with_set_and_get_valhi15(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_set_and_get_valhi15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_set_and_get_valhi15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_set_and_get_valhi15", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_add_with_reset_and_get_valhi15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15");
  }

  netbufferv4_update_valhi15_tbl_table_add_with_reset_and_get_valhi15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_add_with_reset_and_get_valhi15_result result;
  try {
    result.success = iface_->update_valhi15_tbl_table_add_with_reset_and_get_valhi15(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_reset_and_get_valhi15", bytes);
  }
}

void netbufferv4Processor::process_update_valhi15_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi15_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi15_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi15_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi15_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi15_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi15_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_add_with_get_valhi16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16");
  }

  netbufferv4_update_valhi16_tbl_table_add_with_get_valhi16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_add_with_get_valhi16_result result;
  try {
    result.success = iface_->update_valhi16_tbl_table_add_with_get_valhi16(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_get_valhi16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_get_valhi16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_get_valhi16", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_add_with_set_and_get_valhi16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16");
  }

  netbufferv4_update_valhi16_tbl_table_add_with_set_and_get_valhi16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_add_with_set_and_get_valhi16_result result;
  try {
    result.success = iface_->update_valhi16_tbl_table_add_with_set_and_get_valhi16(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_set_and_get_valhi16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_set_and_get_valhi16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_set_and_get_valhi16", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_add_with_reset_and_get_valhi16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16");
  }

  netbufferv4_update_valhi16_tbl_table_add_with_reset_and_get_valhi16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_add_with_reset_and_get_valhi16_result result;
  try {
    result.success = iface_->update_valhi16_tbl_table_add_with_reset_and_get_valhi16(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_reset_and_get_valhi16", bytes);
  }
}

void netbufferv4Processor::process_update_valhi16_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi16_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi16_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi16_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi16_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi16_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi16_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_add_with_get_valhi1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1");
  }

  netbufferv4_update_valhi1_tbl_table_add_with_get_valhi1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_add_with_get_valhi1_result result;
  try {
    result.success = iface_->update_valhi1_tbl_table_add_with_get_valhi1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_get_valhi1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_get_valhi1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_get_valhi1", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_add_with_set_and_get_valhi1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1");
  }

  netbufferv4_update_valhi1_tbl_table_add_with_set_and_get_valhi1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_add_with_set_and_get_valhi1_result result;
  try {
    result.success = iface_->update_valhi1_tbl_table_add_with_set_and_get_valhi1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_set_and_get_valhi1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_set_and_get_valhi1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_set_and_get_valhi1", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_add_with_reset_and_get_valhi1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1");
  }

  netbufferv4_update_valhi1_tbl_table_add_with_reset_and_get_valhi1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_add_with_reset_and_get_valhi1_result result;
  try {
    result.success = iface_->update_valhi1_tbl_table_add_with_reset_and_get_valhi1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_reset_and_get_valhi1", bytes);
  }
}

void netbufferv4Processor::process_update_valhi1_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi1_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi1_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi1_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi1_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi1_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi1_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_add_with_get_valhi2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2");
  }

  netbufferv4_update_valhi2_tbl_table_add_with_get_valhi2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_add_with_get_valhi2_result result;
  try {
    result.success = iface_->update_valhi2_tbl_table_add_with_get_valhi2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_get_valhi2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_get_valhi2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_get_valhi2", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_add_with_set_and_get_valhi2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2");
  }

  netbufferv4_update_valhi2_tbl_table_add_with_set_and_get_valhi2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_add_with_set_and_get_valhi2_result result;
  try {
    result.success = iface_->update_valhi2_tbl_table_add_with_set_and_get_valhi2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_set_and_get_valhi2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_set_and_get_valhi2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_set_and_get_valhi2", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_add_with_reset_and_get_valhi2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2");
  }

  netbufferv4_update_valhi2_tbl_table_add_with_reset_and_get_valhi2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_add_with_reset_and_get_valhi2_result result;
  try {
    result.success = iface_->update_valhi2_tbl_table_add_with_reset_and_get_valhi2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_reset_and_get_valhi2", bytes);
  }
}

void netbufferv4Processor::process_update_valhi2_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi2_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi2_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi2_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi2_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi2_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi2_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_add_with_get_valhi3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3");
  }

  netbufferv4_update_valhi3_tbl_table_add_with_get_valhi3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_add_with_get_valhi3_result result;
  try {
    result.success = iface_->update_valhi3_tbl_table_add_with_get_valhi3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_get_valhi3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_get_valhi3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_get_valhi3", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_add_with_set_and_get_valhi3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3");
  }

  netbufferv4_update_valhi3_tbl_table_add_with_set_and_get_valhi3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_add_with_set_and_get_valhi3_result result;
  try {
    result.success = iface_->update_valhi3_tbl_table_add_with_set_and_get_valhi3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_set_and_get_valhi3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_set_and_get_valhi3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_set_and_get_valhi3", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_add_with_reset_and_get_valhi3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3");
  }

  netbufferv4_update_valhi3_tbl_table_add_with_reset_and_get_valhi3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_add_with_reset_and_get_valhi3_result result;
  try {
    result.success = iface_->update_valhi3_tbl_table_add_with_reset_and_get_valhi3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_reset_and_get_valhi3", bytes);
  }
}

void netbufferv4Processor::process_update_valhi3_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi3_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi3_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi3_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi3_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi3_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi3_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_add_with_get_valhi4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4");
  }

  netbufferv4_update_valhi4_tbl_table_add_with_get_valhi4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_add_with_get_valhi4_result result;
  try {
    result.success = iface_->update_valhi4_tbl_table_add_with_get_valhi4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_get_valhi4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_get_valhi4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_get_valhi4", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_add_with_set_and_get_valhi4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4");
  }

  netbufferv4_update_valhi4_tbl_table_add_with_set_and_get_valhi4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_add_with_set_and_get_valhi4_result result;
  try {
    result.success = iface_->update_valhi4_tbl_table_add_with_set_and_get_valhi4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_set_and_get_valhi4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_set_and_get_valhi4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_set_and_get_valhi4", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_add_with_reset_and_get_valhi4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4");
  }

  netbufferv4_update_valhi4_tbl_table_add_with_reset_and_get_valhi4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_add_with_reset_and_get_valhi4_result result;
  try {
    result.success = iface_->update_valhi4_tbl_table_add_with_reset_and_get_valhi4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_reset_and_get_valhi4", bytes);
  }
}

void netbufferv4Processor::process_update_valhi4_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi4_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi4_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi4_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi4_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi4_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi4_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_add_with_get_valhi5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5");
  }

  netbufferv4_update_valhi5_tbl_table_add_with_get_valhi5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_add_with_get_valhi5_result result;
  try {
    result.success = iface_->update_valhi5_tbl_table_add_with_get_valhi5(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_get_valhi5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_get_valhi5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_get_valhi5", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_add_with_set_and_get_valhi5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5");
  }

  netbufferv4_update_valhi5_tbl_table_add_with_set_and_get_valhi5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_add_with_set_and_get_valhi5_result result;
  try {
    result.success = iface_->update_valhi5_tbl_table_add_with_set_and_get_valhi5(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_set_and_get_valhi5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_set_and_get_valhi5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_set_and_get_valhi5", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_add_with_reset_and_get_valhi5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5");
  }

  netbufferv4_update_valhi5_tbl_table_add_with_reset_and_get_valhi5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_add_with_reset_and_get_valhi5_result result;
  try {
    result.success = iface_->update_valhi5_tbl_table_add_with_reset_and_get_valhi5(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_reset_and_get_valhi5", bytes);
  }
}

void netbufferv4Processor::process_update_valhi5_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi5_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi5_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi5_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi5_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi5_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi5_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_add_with_get_valhi6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6");
  }

  netbufferv4_update_valhi6_tbl_table_add_with_get_valhi6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_add_with_get_valhi6_result result;
  try {
    result.success = iface_->update_valhi6_tbl_table_add_with_get_valhi6(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_get_valhi6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_get_valhi6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_get_valhi6", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_add_with_set_and_get_valhi6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6");
  }

  netbufferv4_update_valhi6_tbl_table_add_with_set_and_get_valhi6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_add_with_set_and_get_valhi6_result result;
  try {
    result.success = iface_->update_valhi6_tbl_table_add_with_set_and_get_valhi6(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_set_and_get_valhi6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_set_and_get_valhi6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_set_and_get_valhi6", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_add_with_reset_and_get_valhi6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6");
  }

  netbufferv4_update_valhi6_tbl_table_add_with_reset_and_get_valhi6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_add_with_reset_and_get_valhi6_result result;
  try {
    result.success = iface_->update_valhi6_tbl_table_add_with_reset_and_get_valhi6(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_reset_and_get_valhi6", bytes);
  }
}

void netbufferv4Processor::process_update_valhi6_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi6_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi6_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi6_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi6_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi6_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi6_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_add_with_get_valhi7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7");
  }

  netbufferv4_update_valhi7_tbl_table_add_with_get_valhi7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_add_with_get_valhi7_result result;
  try {
    result.success = iface_->update_valhi7_tbl_table_add_with_get_valhi7(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_get_valhi7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_get_valhi7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_get_valhi7", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_add_with_set_and_get_valhi7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7");
  }

  netbufferv4_update_valhi7_tbl_table_add_with_set_and_get_valhi7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_add_with_set_and_get_valhi7_result result;
  try {
    result.success = iface_->update_valhi7_tbl_table_add_with_set_and_get_valhi7(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_set_and_get_valhi7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_set_and_get_valhi7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_set_and_get_valhi7", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_add_with_reset_and_get_valhi7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7");
  }

  netbufferv4_update_valhi7_tbl_table_add_with_reset_and_get_valhi7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_add_with_reset_and_get_valhi7_result result;
  try {
    result.success = iface_->update_valhi7_tbl_table_add_with_reset_and_get_valhi7(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_reset_and_get_valhi7", bytes);
  }
}

void netbufferv4Processor::process_update_valhi7_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi7_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi7_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi7_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi7_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi7_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi7_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_add_with_get_valhi8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8");
  }

  netbufferv4_update_valhi8_tbl_table_add_with_get_valhi8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_add_with_get_valhi8_result result;
  try {
    result.success = iface_->update_valhi8_tbl_table_add_with_get_valhi8(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_get_valhi8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_get_valhi8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_get_valhi8", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_add_with_set_and_get_valhi8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8");
  }

  netbufferv4_update_valhi8_tbl_table_add_with_set_and_get_valhi8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_add_with_set_and_get_valhi8_result result;
  try {
    result.success = iface_->update_valhi8_tbl_table_add_with_set_and_get_valhi8(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_set_and_get_valhi8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_set_and_get_valhi8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_set_and_get_valhi8", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_add_with_reset_and_get_valhi8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8");
  }

  netbufferv4_update_valhi8_tbl_table_add_with_reset_and_get_valhi8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_add_with_reset_and_get_valhi8_result result;
  try {
    result.success = iface_->update_valhi8_tbl_table_add_with_reset_and_get_valhi8(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_reset_and_get_valhi8", bytes);
  }
}

void netbufferv4Processor::process_update_valhi8_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi8_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi8_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi8_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi8_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi8_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi8_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_add_with_get_valhi9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9");
  }

  netbufferv4_update_valhi9_tbl_table_add_with_get_valhi9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_add_with_get_valhi9_result result;
  try {
    result.success = iface_->update_valhi9_tbl_table_add_with_get_valhi9(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_get_valhi9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_get_valhi9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_get_valhi9", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_add_with_set_and_get_valhi9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9");
  }

  netbufferv4_update_valhi9_tbl_table_add_with_set_and_get_valhi9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_add_with_set_and_get_valhi9_result result;
  try {
    result.success = iface_->update_valhi9_tbl_table_add_with_set_and_get_valhi9(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_set_and_get_valhi9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_set_and_get_valhi9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_set_and_get_valhi9", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_add_with_reset_and_get_valhi9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9");
  }

  netbufferv4_update_valhi9_tbl_table_add_with_reset_and_get_valhi9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_add_with_reset_and_get_valhi9_result result;
  try {
    result.success = iface_->update_valhi9_tbl_table_add_with_reset_and_get_valhi9(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_reset_and_get_valhi9", bytes);
  }
}

void netbufferv4Processor::process_update_valhi9_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_valhi9_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_valhi9_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_nop");
  }

  netbufferv4_update_valhi9_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_valhi9_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_valhi9_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_valhi9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_valhi9_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_add_with_get_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_add_with_get_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_add_with_get_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_get_vallen");
  }

  netbufferv4_update_vallen_tbl_table_add_with_get_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_get_vallen", bytes);
  }

  netbufferv4_update_vallen_tbl_table_add_with_get_vallen_result result;
  try {
    result.success = iface_->update_vallen_tbl_table_add_with_get_vallen(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_add_with_get_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_add_with_get_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_get_vallen");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_add_with_get_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_get_vallen", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_add_with_set_and_get_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen");
  }

  netbufferv4_update_vallen_tbl_table_add_with_set_and_get_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen", bytes);
  }

  netbufferv4_update_vallen_tbl_table_add_with_set_and_get_vallen_result result;
  try {
    result.success = iface_->update_vallen_tbl_table_add_with_set_and_get_vallen(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_add_with_set_and_get_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_add_with_set_and_get_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_set_and_get_vallen", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_add_with_reset_and_get_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen");
  }

  netbufferv4_update_vallen_tbl_table_add_with_reset_and_get_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen", bytes);
  }

  netbufferv4_update_vallen_tbl_table_add_with_reset_and_get_vallen_result result;
  try {
    result.success = iface_->update_vallen_tbl_table_add_with_reset_and_get_vallen(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_add_with_reset_and_get_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_add_with_reset_and_get_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_and_get_vallen", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_add_with_reset_access_val_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode");
  }

  netbufferv4_update_vallen_tbl_table_add_with_reset_access_val_mode_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode", bytes);
  }

  netbufferv4_update_vallen_tbl_table_add_with_reset_access_val_mode_result result;
  try {
    result.success = iface_->update_vallen_tbl_table_add_with_reset_access_val_mode(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_add_with_reset_access_val_mode", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_add_with_reset_access_val_mode", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_reset_access_val_mode", bytes);
  }
}

void netbufferv4Processor::process_update_vallen_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallen_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallen_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallen_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallen_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallen_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallen_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallen_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallen_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_add_with_get_vallo10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10");
  }

  netbufferv4_update_vallo10_tbl_table_add_with_get_vallo10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_add_with_get_vallo10_result result;
  try {
    result.success = iface_->update_vallo10_tbl_table_add_with_get_vallo10(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_get_vallo10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_get_vallo10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_get_vallo10", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_add_with_set_and_get_vallo10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10");
  }

  netbufferv4_update_vallo10_tbl_table_add_with_set_and_get_vallo10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_add_with_set_and_get_vallo10_result result;
  try {
    result.success = iface_->update_vallo10_tbl_table_add_with_set_and_get_vallo10(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_set_and_get_vallo10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_set_and_get_vallo10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_set_and_get_vallo10", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_add_with_reset_and_get_vallo10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10");
  }

  netbufferv4_update_vallo10_tbl_table_add_with_reset_and_get_vallo10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_add_with_reset_and_get_vallo10_result result;
  try {
    result.success = iface_->update_vallo10_tbl_table_add_with_reset_and_get_vallo10(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_reset_and_get_vallo10", bytes);
  }
}

void netbufferv4Processor::process_update_vallo10_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo10_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo10_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo10_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo10_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo10_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo10_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_add_with_get_vallo11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11");
  }

  netbufferv4_update_vallo11_tbl_table_add_with_get_vallo11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_add_with_get_vallo11_result result;
  try {
    result.success = iface_->update_vallo11_tbl_table_add_with_get_vallo11(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_get_vallo11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_get_vallo11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_get_vallo11", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_add_with_set_and_get_vallo11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11");
  }

  netbufferv4_update_vallo11_tbl_table_add_with_set_and_get_vallo11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_add_with_set_and_get_vallo11_result result;
  try {
    result.success = iface_->update_vallo11_tbl_table_add_with_set_and_get_vallo11(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_set_and_get_vallo11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_set_and_get_vallo11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_set_and_get_vallo11", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_add_with_reset_and_get_vallo11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11");
  }

  netbufferv4_update_vallo11_tbl_table_add_with_reset_and_get_vallo11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_add_with_reset_and_get_vallo11_result result;
  try {
    result.success = iface_->update_vallo11_tbl_table_add_with_reset_and_get_vallo11(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_reset_and_get_vallo11", bytes);
  }
}

void netbufferv4Processor::process_update_vallo11_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo11_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo11_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo11_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo11_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo11_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo11_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_add_with_get_vallo12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12");
  }

  netbufferv4_update_vallo12_tbl_table_add_with_get_vallo12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_add_with_get_vallo12_result result;
  try {
    result.success = iface_->update_vallo12_tbl_table_add_with_get_vallo12(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_get_vallo12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_get_vallo12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_get_vallo12", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_add_with_set_and_get_vallo12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12");
  }

  netbufferv4_update_vallo12_tbl_table_add_with_set_and_get_vallo12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_add_with_set_and_get_vallo12_result result;
  try {
    result.success = iface_->update_vallo12_tbl_table_add_with_set_and_get_vallo12(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_set_and_get_vallo12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_set_and_get_vallo12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_set_and_get_vallo12", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_add_with_reset_and_get_vallo12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12");
  }

  netbufferv4_update_vallo12_tbl_table_add_with_reset_and_get_vallo12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_add_with_reset_and_get_vallo12_result result;
  try {
    result.success = iface_->update_vallo12_tbl_table_add_with_reset_and_get_vallo12(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_reset_and_get_vallo12", bytes);
  }
}

void netbufferv4Processor::process_update_vallo12_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo12_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo12_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo12_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo12_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo12_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo12_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_add_with_get_vallo13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13");
  }

  netbufferv4_update_vallo13_tbl_table_add_with_get_vallo13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_add_with_get_vallo13_result result;
  try {
    result.success = iface_->update_vallo13_tbl_table_add_with_get_vallo13(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_get_vallo13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_get_vallo13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_get_vallo13", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_add_with_set_and_get_vallo13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13");
  }

  netbufferv4_update_vallo13_tbl_table_add_with_set_and_get_vallo13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_add_with_set_and_get_vallo13_result result;
  try {
    result.success = iface_->update_vallo13_tbl_table_add_with_set_and_get_vallo13(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_set_and_get_vallo13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_set_and_get_vallo13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_set_and_get_vallo13", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_add_with_reset_and_get_vallo13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13");
  }

  netbufferv4_update_vallo13_tbl_table_add_with_reset_and_get_vallo13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_add_with_reset_and_get_vallo13_result result;
  try {
    result.success = iface_->update_vallo13_tbl_table_add_with_reset_and_get_vallo13(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_reset_and_get_vallo13", bytes);
  }
}

void netbufferv4Processor::process_update_vallo13_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo13_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo13_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo13_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo13_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo13_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo13_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_add_with_get_vallo14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14");
  }

  netbufferv4_update_vallo14_tbl_table_add_with_get_vallo14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_add_with_get_vallo14_result result;
  try {
    result.success = iface_->update_vallo14_tbl_table_add_with_get_vallo14(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_get_vallo14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_get_vallo14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_get_vallo14", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_add_with_set_and_get_vallo14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14");
  }

  netbufferv4_update_vallo14_tbl_table_add_with_set_and_get_vallo14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_add_with_set_and_get_vallo14_result result;
  try {
    result.success = iface_->update_vallo14_tbl_table_add_with_set_and_get_vallo14(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_set_and_get_vallo14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_set_and_get_vallo14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_set_and_get_vallo14", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_add_with_reset_and_get_vallo14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14");
  }

  netbufferv4_update_vallo14_tbl_table_add_with_reset_and_get_vallo14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_add_with_reset_and_get_vallo14_result result;
  try {
    result.success = iface_->update_vallo14_tbl_table_add_with_reset_and_get_vallo14(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_reset_and_get_vallo14", bytes);
  }
}

void netbufferv4Processor::process_update_vallo14_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo14_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo14_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo14_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo14_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo14_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo14_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_add_with_get_vallo15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15");
  }

  netbufferv4_update_vallo15_tbl_table_add_with_get_vallo15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_add_with_get_vallo15_result result;
  try {
    result.success = iface_->update_vallo15_tbl_table_add_with_get_vallo15(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_get_vallo15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_get_vallo15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_get_vallo15", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_add_with_set_and_get_vallo15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15");
  }

  netbufferv4_update_vallo15_tbl_table_add_with_set_and_get_vallo15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_add_with_set_and_get_vallo15_result result;
  try {
    result.success = iface_->update_vallo15_tbl_table_add_with_set_and_get_vallo15(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_set_and_get_vallo15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_set_and_get_vallo15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_set_and_get_vallo15", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_add_with_reset_and_get_vallo15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15");
  }

  netbufferv4_update_vallo15_tbl_table_add_with_reset_and_get_vallo15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_add_with_reset_and_get_vallo15_result result;
  try {
    result.success = iface_->update_vallo15_tbl_table_add_with_reset_and_get_vallo15(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_reset_and_get_vallo15", bytes);
  }
}

void netbufferv4Processor::process_update_vallo15_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo15_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo15_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo15_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo15_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo15_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo15_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_add_with_get_vallo16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16");
  }

  netbufferv4_update_vallo16_tbl_table_add_with_get_vallo16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_add_with_get_vallo16_result result;
  try {
    result.success = iface_->update_vallo16_tbl_table_add_with_get_vallo16(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_get_vallo16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_get_vallo16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_get_vallo16", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_add_with_set_and_get_vallo16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16");
  }

  netbufferv4_update_vallo16_tbl_table_add_with_set_and_get_vallo16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_add_with_set_and_get_vallo16_result result;
  try {
    result.success = iface_->update_vallo16_tbl_table_add_with_set_and_get_vallo16(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_set_and_get_vallo16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_set_and_get_vallo16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_set_and_get_vallo16", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_add_with_reset_and_get_vallo16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16");
  }

  netbufferv4_update_vallo16_tbl_table_add_with_reset_and_get_vallo16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_add_with_reset_and_get_vallo16_result result;
  try {
    result.success = iface_->update_vallo16_tbl_table_add_with_reset_and_get_vallo16(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_reset_and_get_vallo16", bytes);
  }
}

void netbufferv4Processor::process_update_vallo16_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo16_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo16_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo16_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo16_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo16_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo16_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_add_with_get_vallo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1");
  }

  netbufferv4_update_vallo1_tbl_table_add_with_get_vallo1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_add_with_get_vallo1_result result;
  try {
    result.success = iface_->update_vallo1_tbl_table_add_with_get_vallo1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_get_vallo1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_get_vallo1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_get_vallo1", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_add_with_set_and_get_vallo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1");
  }

  netbufferv4_update_vallo1_tbl_table_add_with_set_and_get_vallo1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_add_with_set_and_get_vallo1_result result;
  try {
    result.success = iface_->update_vallo1_tbl_table_add_with_set_and_get_vallo1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_set_and_get_vallo1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_set_and_get_vallo1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_set_and_get_vallo1", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_add_with_reset_and_get_vallo1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1");
  }

  netbufferv4_update_vallo1_tbl_table_add_with_reset_and_get_vallo1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_add_with_reset_and_get_vallo1_result result;
  try {
    result.success = iface_->update_vallo1_tbl_table_add_with_reset_and_get_vallo1(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_reset_and_get_vallo1", bytes);
  }
}

void netbufferv4Processor::process_update_vallo1_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo1_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo1_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo1_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo1_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo1_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo1_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_add_with_get_vallo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2");
  }

  netbufferv4_update_vallo2_tbl_table_add_with_get_vallo2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_add_with_get_vallo2_result result;
  try {
    result.success = iface_->update_vallo2_tbl_table_add_with_get_vallo2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_get_vallo2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_get_vallo2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_get_vallo2", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_add_with_set_and_get_vallo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2");
  }

  netbufferv4_update_vallo2_tbl_table_add_with_set_and_get_vallo2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_add_with_set_and_get_vallo2_result result;
  try {
    result.success = iface_->update_vallo2_tbl_table_add_with_set_and_get_vallo2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_set_and_get_vallo2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_set_and_get_vallo2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_set_and_get_vallo2", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_add_with_reset_and_get_vallo2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2");
  }

  netbufferv4_update_vallo2_tbl_table_add_with_reset_and_get_vallo2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_add_with_reset_and_get_vallo2_result result;
  try {
    result.success = iface_->update_vallo2_tbl_table_add_with_reset_and_get_vallo2(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_reset_and_get_vallo2", bytes);
  }
}

void netbufferv4Processor::process_update_vallo2_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo2_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo2_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo2_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo2_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo2_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo2_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_add_with_get_vallo3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3");
  }

  netbufferv4_update_vallo3_tbl_table_add_with_get_vallo3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_add_with_get_vallo3_result result;
  try {
    result.success = iface_->update_vallo3_tbl_table_add_with_get_vallo3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_get_vallo3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_get_vallo3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_get_vallo3", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_add_with_set_and_get_vallo3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3");
  }

  netbufferv4_update_vallo3_tbl_table_add_with_set_and_get_vallo3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_add_with_set_and_get_vallo3_result result;
  try {
    result.success = iface_->update_vallo3_tbl_table_add_with_set_and_get_vallo3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_set_and_get_vallo3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_set_and_get_vallo3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_set_and_get_vallo3", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_add_with_reset_and_get_vallo3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3");
  }

  netbufferv4_update_vallo3_tbl_table_add_with_reset_and_get_vallo3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_add_with_reset_and_get_vallo3_result result;
  try {
    result.success = iface_->update_vallo3_tbl_table_add_with_reset_and_get_vallo3(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_reset_and_get_vallo3", bytes);
  }
}

void netbufferv4Processor::process_update_vallo3_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo3_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo3_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo3_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo3_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo3_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo3_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_add_with_get_vallo4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4");
  }

  netbufferv4_update_vallo4_tbl_table_add_with_get_vallo4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_add_with_get_vallo4_result result;
  try {
    result.success = iface_->update_vallo4_tbl_table_add_with_get_vallo4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_get_vallo4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_get_vallo4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_get_vallo4", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_add_with_set_and_get_vallo4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4");
  }

  netbufferv4_update_vallo4_tbl_table_add_with_set_and_get_vallo4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_add_with_set_and_get_vallo4_result result;
  try {
    result.success = iface_->update_vallo4_tbl_table_add_with_set_and_get_vallo4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_set_and_get_vallo4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_set_and_get_vallo4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_set_and_get_vallo4", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_add_with_reset_and_get_vallo4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4");
  }

  netbufferv4_update_vallo4_tbl_table_add_with_reset_and_get_vallo4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_add_with_reset_and_get_vallo4_result result;
  try {
    result.success = iface_->update_vallo4_tbl_table_add_with_reset_and_get_vallo4(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_reset_and_get_vallo4", bytes);
  }
}

void netbufferv4Processor::process_update_vallo4_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo4_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo4_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo4_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo4_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo4_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo4_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_add_with_get_vallo5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5");
  }

  netbufferv4_update_vallo5_tbl_table_add_with_get_vallo5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_add_with_get_vallo5_result result;
  try {
    result.success = iface_->update_vallo5_tbl_table_add_with_get_vallo5(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_get_vallo5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_get_vallo5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_get_vallo5", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_add_with_set_and_get_vallo5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5");
  }

  netbufferv4_update_vallo5_tbl_table_add_with_set_and_get_vallo5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_add_with_set_and_get_vallo5_result result;
  try {
    result.success = iface_->update_vallo5_tbl_table_add_with_set_and_get_vallo5(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_set_and_get_vallo5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_set_and_get_vallo5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_set_and_get_vallo5", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_add_with_reset_and_get_vallo5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5");
  }

  netbufferv4_update_vallo5_tbl_table_add_with_reset_and_get_vallo5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_add_with_reset_and_get_vallo5_result result;
  try {
    result.success = iface_->update_vallo5_tbl_table_add_with_reset_and_get_vallo5(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_reset_and_get_vallo5", bytes);
  }
}

void netbufferv4Processor::process_update_vallo5_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo5_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo5_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo5_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo5_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo5_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo5_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_add_with_get_vallo6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6");
  }

  netbufferv4_update_vallo6_tbl_table_add_with_get_vallo6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_add_with_get_vallo6_result result;
  try {
    result.success = iface_->update_vallo6_tbl_table_add_with_get_vallo6(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_get_vallo6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_get_vallo6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_get_vallo6", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_add_with_set_and_get_vallo6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6");
  }

  netbufferv4_update_vallo6_tbl_table_add_with_set_and_get_vallo6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_add_with_set_and_get_vallo6_result result;
  try {
    result.success = iface_->update_vallo6_tbl_table_add_with_set_and_get_vallo6(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_set_and_get_vallo6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_set_and_get_vallo6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_set_and_get_vallo6", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_add_with_reset_and_get_vallo6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6");
  }

  netbufferv4_update_vallo6_tbl_table_add_with_reset_and_get_vallo6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_add_with_reset_and_get_vallo6_result result;
  try {
    result.success = iface_->update_vallo6_tbl_table_add_with_reset_and_get_vallo6(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_reset_and_get_vallo6", bytes);
  }
}

void netbufferv4Processor::process_update_vallo6_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo6_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo6_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo6_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo6_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo6_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo6_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_add_with_get_vallo7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7");
  }

  netbufferv4_update_vallo7_tbl_table_add_with_get_vallo7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_add_with_get_vallo7_result result;
  try {
    result.success = iface_->update_vallo7_tbl_table_add_with_get_vallo7(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_get_vallo7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_get_vallo7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_get_vallo7", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_add_with_set_and_get_vallo7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7");
  }

  netbufferv4_update_vallo7_tbl_table_add_with_set_and_get_vallo7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_add_with_set_and_get_vallo7_result result;
  try {
    result.success = iface_->update_vallo7_tbl_table_add_with_set_and_get_vallo7(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_set_and_get_vallo7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_set_and_get_vallo7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_set_and_get_vallo7", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_add_with_reset_and_get_vallo7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7");
  }

  netbufferv4_update_vallo7_tbl_table_add_with_reset_and_get_vallo7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_add_with_reset_and_get_vallo7_result result;
  try {
    result.success = iface_->update_vallo7_tbl_table_add_with_reset_and_get_vallo7(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_reset_and_get_vallo7", bytes);
  }
}

void netbufferv4Processor::process_update_vallo7_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo7_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo7_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo7_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo7_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo7_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo7_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_add_with_get_vallo8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8");
  }

  netbufferv4_update_vallo8_tbl_table_add_with_get_vallo8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_add_with_get_vallo8_result result;
  try {
    result.success = iface_->update_vallo8_tbl_table_add_with_get_vallo8(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_get_vallo8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_get_vallo8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_get_vallo8", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_add_with_set_and_get_vallo8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8");
  }

  netbufferv4_update_vallo8_tbl_table_add_with_set_and_get_vallo8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_add_with_set_and_get_vallo8_result result;
  try {
    result.success = iface_->update_vallo8_tbl_table_add_with_set_and_get_vallo8(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_set_and_get_vallo8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_set_and_get_vallo8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_set_and_get_vallo8", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_add_with_reset_and_get_vallo8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8");
  }

  netbufferv4_update_vallo8_tbl_table_add_with_reset_and_get_vallo8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_add_with_reset_and_get_vallo8_result result;
  try {
    result.success = iface_->update_vallo8_tbl_table_add_with_reset_and_get_vallo8(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_reset_and_get_vallo8", bytes);
  }
}

void netbufferv4Processor::process_update_vallo8_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo8_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo8_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo8_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo8_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo8_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo8_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_add_with_get_vallo9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9");
  }

  netbufferv4_update_vallo9_tbl_table_add_with_get_vallo9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_add_with_get_vallo9_result result;
  try {
    result.success = iface_->update_vallo9_tbl_table_add_with_get_vallo9(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_get_vallo9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_get_vallo9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_get_vallo9", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_add_with_set_and_get_vallo9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9");
  }

  netbufferv4_update_vallo9_tbl_table_add_with_set_and_get_vallo9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_add_with_set_and_get_vallo9_result result;
  try {
    result.success = iface_->update_vallo9_tbl_table_add_with_set_and_get_vallo9(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_set_and_get_vallo9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_set_and_get_vallo9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_set_and_get_vallo9", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_add_with_reset_and_get_vallo9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9");
  }

  netbufferv4_update_vallo9_tbl_table_add_with_reset_and_get_vallo9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_add_with_reset_and_get_vallo9_result result;
  try {
    result.success = iface_->update_vallo9_tbl_table_add_with_reset_and_get_vallo9(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_reset_and_get_vallo9", bytes);
  }
}

void netbufferv4Processor::process_update_vallo9_tbl_table_add_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.update_vallo9_tbl_table_add_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.update_vallo9_tbl_table_add_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_nop");
  }

  netbufferv4_update_vallo9_tbl_table_add_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_nop", bytes);
  }

  netbufferv4_update_vallo9_tbl_table_add_with_nop_result result;
  try {
    result.success = iface_->update_vallo9_tbl_table_add_with_nop(args.sess_hdl, args.dev_tgt, args.match_spec);
    result.__isset.success = true;
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_nop");
  }

  oprot->writeMessageBegin("update_vallo9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.update_vallo9_tbl_table_add_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_get_cache_frequency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_get_cache_frequency(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_update_cache_frequency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_update_cache_frequency(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_modify_with_try_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_modify_with_try_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1");
  }

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1", bytes);
  }

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_result result;
  try {
    iface_->access_case1_tbl_table_modify_with_try_case1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_modify_with_try_case1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec");
  }

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec", bytes);
  }

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_by_match_spec_result result;
  try {
    iface_->access_case1_tbl_table_modify_with_try_case1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_try_case1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_modify_with_read_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_modify_with_read_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1");
  }

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1", bytes);
  }

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_result result;
  try {
    iface_->access_case1_tbl_table_modify_with_read_case1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_modify_with_read_case1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec");
  }

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec", bytes);
  }

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_by_match_spec_result result;
  try {
    iface_->access_case1_tbl_table_modify_with_read_case1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_read_case1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_modify_with_reset_is_case1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1");
  }

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1", bytes);
  }

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_result result;
  try {
    iface_->access_case1_tbl_table_modify_with_reset_is_case1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1", bytes);
  }
}

void netbufferv4Processor::process_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec");
  }

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", bytes);
  }

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec_result result;
  try {
    iface_->access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec");
  }

  oprot->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_modify_with_update_cm1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_modify_with_update_cm1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1");
  }

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1", bytes);
  }

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_result result;
  try {
    iface_->access_cm1_tbl_table_modify_with_update_cm1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec");
  }

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", bytes);
  }

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec_result result;
  try {
    iface_->access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_modify_with_initialize_cm1_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate");
  }

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate", bytes);
  }

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_result result;
  try {
    iface_->access_cm1_tbl_table_modify_with_initialize_cm1_predicate(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec");
  }

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", bytes);
  }

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec_result result;
  try {
    iface_->access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_modify_with_update_cm2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_modify_with_update_cm2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2");
  }

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2", bytes);
  }

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_result result;
  try {
    iface_->access_cm2_tbl_table_modify_with_update_cm2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec");
  }

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", bytes);
  }

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec_result result;
  try {
    iface_->access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_modify_with_initialize_cm2_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate");
  }

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate", bytes);
  }

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_result result;
  try {
    iface_->access_cm2_tbl_table_modify_with_initialize_cm2_predicate(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec");
  }

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", bytes);
  }

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec_result result;
  try {
    iface_->access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_modify_with_update_cm3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_modify_with_update_cm3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3");
  }

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3", bytes);
  }

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_result result;
  try {
    iface_->access_cm3_tbl_table_modify_with_update_cm3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec");
  }

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", bytes);
  }

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec_result result;
  try {
    iface_->access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_modify_with_initialize_cm3_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate");
  }

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate", bytes);
  }

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_result result;
  try {
    iface_->access_cm3_tbl_table_modify_with_initialize_cm3_predicate(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec");
  }

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", bytes);
  }

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec_result result;
  try {
    iface_->access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_modify_with_update_cm4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_modify_with_update_cm4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4");
  }

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4", bytes);
  }

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_result result;
  try {
    iface_->access_cm4_tbl_table_modify_with_update_cm4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec");
  }

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", bytes);
  }

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec_result result;
  try {
    iface_->access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_modify_with_initialize_cm4_predicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate");
  }

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate", bytes);
  }

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_result result;
  try {
    iface_->access_cm4_tbl_table_modify_with_initialize_cm4_predicate(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate", bytes);
  }
}

void netbufferv4Processor::process_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec");
  }

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", bytes);
  }

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec_result result;
  try {
    iface_->access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec");
  }

  oprot->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_get_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_get_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_get_deleted(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_set_and_get_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_set_and_get_deleted(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_reset_and_get_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_reset_and_get_deleted(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_reset_is_deleted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_reset_is_deleted(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted", bytes);
  }
}

void netbufferv4Processor::process_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec");
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", bytes);
  }

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec_result result;
  try {
    iface_->access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec");
  }

  oprot->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_get_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_get_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest");
  }

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_get_latest(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_get_latest_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec");
  }

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_by_match_spec_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_get_latest_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_get_latest_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_set_and_get_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest");
  }

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_set_and_get_latest(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec");
  }

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_reset_and_get_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest");
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_reset_and_get_latest(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec");
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_reset_is_latest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest");
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_reset_is_latest(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest", bytes);
  }
}

void netbufferv4Processor::process_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec");
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", bytes);
  }

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec_result result;
  try {
    iface_->access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec");
  }

  oprot->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_modify_with_get_savedseq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq");
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_result result;
  try {
    iface_->access_savedseq_tbl_table_modify_with_get_savedseq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec");
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec_result result;
  try {
    iface_->access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_modify_with_set_and_get_savedseq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq");
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_result result;
  try {
    iface_->access_savedseq_tbl_table_modify_with_set_and_get_savedseq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec");
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec_result result;
  try {
    iface_->access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop");
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_result result;
  try {
    iface_->access_savedseq_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_savedseq_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->access_savedseq_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_savedseq_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_modify_with_assign_seq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_modify_with_assign_seq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq");
  }

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq", bytes);
  }

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_result result;
  try {
    iface_->access_seq_tbl_table_modify_with_assign_seq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_modify_with_assign_seq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec");
  }

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec", bytes);
  }

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_by_match_spec_result result;
  try {
    iface_->access_seq_tbl_table_modify_with_assign_seq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_assign_seq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop");
  }

  netbufferv4_access_seq_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_access_seq_tbl_table_modify_with_nop_result result;
  try {
    iface_->access_seq_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_access_seq_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_access_seq_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_access_seq_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->access_seq_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("access_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_seq_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_modify_with_get_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue");
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_result result;
  try {
    iface_->access_validvalue_tbl_table_modify_with_get_validvalue(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec");
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec_result result;
  try {
    iface_->access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_modify_with_set_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue");
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_result result;
  try {
    iface_->access_validvalue_tbl_table_modify_with_set_validvalue(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec");
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec_result result;
  try {
    iface_->access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_modify_with_reset_meta_validvalue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue");
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_result result;
  try {
    iface_->access_validvalue_tbl_table_modify_with_reset_meta_validvalue(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue", bytes);
  }
}

void netbufferv4Processor::process_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec");
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", bytes);
  }

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec_result result;
  try {
    iface_->access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec");
  }

  oprot->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val1(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val2(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val3(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val3(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val4(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val4(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val5(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val6(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val6(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val7(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val7(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val8(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val8(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val9(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val9(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val10(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val10(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val11(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val11(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val12(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val12(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val13(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val13(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val14(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val14(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val15(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val15(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val16(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_remove_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_remove_all(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all", bytes);
  }
}

void netbufferv4Processor::process_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec");
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", bytes);
  }

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec_result result;
  try {
    iface_->add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.priority);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec");
  }

  oprot->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_modify_with_cached_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_modify_with_cached_action", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action");
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_result result;
  try {
    iface_->cache_lookup_tbl_table_modify_with_cached_action(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec");
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec_result result;
  try {
    iface_->cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_modify_with_uncached_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action");
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_result result;
  try {
    iface_->cache_lookup_tbl_table_modify_with_uncached_action(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action", bytes);
  }
}

void netbufferv4Processor::process_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec");
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", bytes);
  }

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec_result result;
  try {
    iface_->cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec");
  }

  oprot->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch");
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", bytes);
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_result result;
  try {
    iface_->drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch");
  }

  oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec");
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec_result result;
  try {
    iface_->drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch");
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", bytes);
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_result result;
  try {
    iface_->drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch");
  }

  oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec");
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", bytes);
  }

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec_result result;
  try {
    iface_->drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec");
  }

  oprot->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_modify_with_nop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_modify_with_nop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_modify_with_nop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_modify_with_nop");
  }

  netbufferv4_drop_tbl_table_modify_with_nop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_modify_with_nop", bytes);
  }

  netbufferv4_drop_tbl_table_modify_with_nop_result result;
  try {
    iface_->drop_tbl_table_modify_with_nop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_modify_with_nop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_nop");
  }

  oprot->writeMessageBegin("drop_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_nop", bytes);
  }
}

void netbufferv4Processor::process_drop_tbl_table_modify_with_nop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec");
  }

  netbufferv4_drop_tbl_table_modify_with_nop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec", bytes);
  }

  netbufferv4_drop_tbl_table_modify_with_nop_by_match_spec_result result;
  try {
    iface_->drop_tbl_table_modify_with_nop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("drop_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec");
  }

  oprot->writeMessageBegin("drop_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.drop_tbl_table_modify_with_nop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(args.sess_hdl, args.dev_id, args.entry);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(args.sess_hdl, args.dev_tgt, args.match_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", bytes);
  }
}

void netbufferv4Processor::process_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_result result;
  try {
    iface_->eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(args.sess_hdl, args.dev_id, args.entry, args.action_spec);
  } catch (InvalidTableOperation &ouch) {
    result.ouch = ouch;
    result.__isset.ouch = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss");
  }

  oprot->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "netbufferv4.eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", bytes);
  }
}
} // namespace
