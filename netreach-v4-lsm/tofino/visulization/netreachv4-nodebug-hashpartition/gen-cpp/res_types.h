/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef res_TYPES_H
#define res_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace res_pd_rpc {

typedef int32_t SessionHandle_t;

class DevTarget_t;

class DevParserTarget_t;


class DevTarget_t {
 public:

  static const char* ascii_fingerprint; // = "422C35A5D98C69C9CDE50568C7E3028F";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0x2C,0x35,0xA5,0xD9,0x8C,0x69,0xC9,0xCD,0xE5,0x05,0x68,0xC7,0xE3,0x02,0x8F};

  DevTarget_t(const DevTarget_t&);
  DevTarget_t& operator=(const DevTarget_t&);
  DevTarget_t() : dev_id(0), dev_pipe_id(0) {
  }

  virtual ~DevTarget_t() throw();
  int32_t dev_id;
  int16_t dev_pipe_id;

  void __set_dev_id(const int32_t val);

  void __set_dev_pipe_id(const int16_t val);

  bool operator == (const DevTarget_t & rhs) const
  {
    if (!(dev_id == rhs.dev_id))
      return false;
    if (!(dev_pipe_id == rhs.dev_pipe_id))
      return false;
    return true;
  }
  bool operator != (const DevTarget_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DevTarget_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DevTarget_t& obj);
};

void swap(DevTarget_t &a, DevTarget_t &b);


class DevParserTarget_t {
 public:

  static const char* ascii_fingerprint; // = "266A4AF49DEE7BD806959C5F640F90DF";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x6A,0x4A,0xF4,0x9D,0xEE,0x7B,0xD8,0x06,0x95,0x9C,0x5F,0x64,0x0F,0x90,0xDF};

  DevParserTarget_t(const DevParserTarget_t&);
  DevParserTarget_t& operator=(const DevParserTarget_t&);
  DevParserTarget_t() : dev_id(0), gress_id(0), dev_pipe_id(0), parser_id(0) {
  }

  virtual ~DevParserTarget_t() throw();
  int32_t dev_id;
  int8_t gress_id;
  int16_t dev_pipe_id;
  int8_t parser_id;

  void __set_dev_id(const int32_t val);

  void __set_gress_id(const int8_t val);

  void __set_dev_pipe_id(const int16_t val);

  void __set_parser_id(const int8_t val);

  bool operator == (const DevParserTarget_t & rhs) const
  {
    if (!(dev_id == rhs.dev_id))
      return false;
    if (!(gress_id == rhs.gress_id))
      return false;
    if (!(dev_pipe_id == rhs.dev_pipe_id))
      return false;
    if (!(parser_id == rhs.parser_id))
      return false;
    return true;
  }
  bool operator != (const DevParserTarget_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DevParserTarget_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DevParserTarget_t& obj);
};

void swap(DevParserTarget_t &a, DevParserTarget_t &b);

} // namespace

#endif
