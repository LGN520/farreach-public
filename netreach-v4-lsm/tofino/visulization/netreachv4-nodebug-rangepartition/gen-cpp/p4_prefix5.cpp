#include "p4_prefix.h"
namespace p4_pd_rpc {


uint32_t netbufferv4_register_read_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo5_reg_pargs::~netbufferv4_register_read_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo5_reg_result::~netbufferv4_register_read_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2001;
            ::apache::thrift::protocol::TType _etype2004;
            xfer += iprot->readListBegin(_etype2004, _size2001);
            this->success.resize(_size2001);
            uint32_t _i2005;
            for (_i2005 = 0; _i2005 < _size2001; ++_i2005)
            {
              xfer += iprot->readI32(this->success[_i2005]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo5_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2006;
      for (_iter2006 = this->success.begin(); _iter2006 != this->success.end(); ++_iter2006)
      {
        xfer += oprot->writeI32((*_iter2006));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo5_reg_presult::~netbufferv4_register_read_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2007;
            ::apache::thrift::protocol::TType _etype2010;
            xfer += iprot->readListBegin(_etype2010, _size2007);
            (*(this->success)).resize(_size2007);
            uint32_t _i2011;
            for (_i2011 = 0; _i2011 < _size2007; ++_i2011)
            {
              xfer += iprot->readI32((*(this->success))[_i2011]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo5_reg_args::~netbufferv4_register_write_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo5_reg_pargs::~netbufferv4_register_write_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo5_reg_result::~netbufferv4_register_write_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo5_reg_presult::~netbufferv4_register_write_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_args::~netbufferv4_register_reset_all_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_pargs::~netbufferv4_register_reset_all_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_result::~netbufferv4_register_reset_all_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo5_reg_presult::~netbufferv4_register_reset_all_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_args::~netbufferv4_register_range_reset_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_pargs::~netbufferv4_register_range_reset_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_result::~netbufferv4_register_range_reset_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo5_reg_presult::~netbufferv4_register_range_reset_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_args::~netbufferv4_register_write_all_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_pargs::~netbufferv4_register_write_all_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_result::~netbufferv4_register_write_all_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo5_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo5_reg_presult::~netbufferv4_register_write_all_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_args::~netbufferv4_register_range_read_vallo5_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo5_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo5_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_pargs::~netbufferv4_register_range_read_vallo5_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo5_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_result::~netbufferv4_register_range_read_vallo5_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2012;
            ::apache::thrift::protocol::TType _etype2015;
            xfer += iprot->readListBegin(_etype2015, _size2012);
            this->success.resize(_size2012);
            uint32_t _i2016;
            for (_i2016 = 0; _i2016 < _size2012; ++_i2016)
            {
              xfer += iprot->readI32(this->success[_i2016]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo5_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo5_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2017;
      for (_iter2017 = this->success.begin(); _iter2017 != this->success.end(); ++_iter2017)
      {
        xfer += oprot->writeI32((*_iter2017));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo5_reg_presult::~netbufferv4_register_range_read_vallo5_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo5_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2018;
            ::apache::thrift::protocol::TType _etype2021;
            xfer += iprot->readListBegin(_etype2021, _size2018);
            (*(this->success)).resize(_size2018);
            uint32_t _i2022;
            for (_i2022 = 0; _i2022 < _size2018; ++_i2022)
            {
              xfer += iprot->readI32((*(this->success))[_i2022]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_args::~netbufferv4_register_hw_sync_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_pargs::~netbufferv4_register_hw_sync_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_result::~netbufferv4_register_hw_sync_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_cm1_reg_presult::~netbufferv4_register_hw_sync_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_cm1_reg_args::~netbufferv4_register_read_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_cm1_reg_pargs::~netbufferv4_register_read_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_cm1_reg_result::~netbufferv4_register_read_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2023;
            ::apache::thrift::protocol::TType _etype2026;
            xfer += iprot->readListBegin(_etype2026, _size2023);
            this->success.resize(_size2023);
            uint32_t _i2027;
            for (_i2027 = 0; _i2027 < _size2023; ++_i2027)
            {
              xfer += iprot->readI16(this->success[_i2027]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_cm1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2028;
      for (_iter2028 = this->success.begin(); _iter2028 != this->success.end(); ++_iter2028)
      {
        xfer += oprot->writeI16((*_iter2028));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_cm1_reg_presult::~netbufferv4_register_read_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2029;
            ::apache::thrift::protocol::TType _etype2032;
            xfer += iprot->readListBegin(_etype2032, _size2029);
            (*(this->success)).resize(_size2029);
            uint32_t _i2033;
            for (_i2033 = 0; _i2033 < _size2029; ++_i2033)
            {
              xfer += iprot->readI16((*(this->success))[_i2033]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_cm1_reg_args::~netbufferv4_register_write_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_cm1_reg_pargs::~netbufferv4_register_write_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_cm1_reg_result::~netbufferv4_register_write_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_cm1_reg_presult::~netbufferv4_register_write_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_args::~netbufferv4_register_reset_all_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_pargs::~netbufferv4_register_reset_all_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_result::~netbufferv4_register_reset_all_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_cm1_reg_presult::~netbufferv4_register_reset_all_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_args::~netbufferv4_register_range_reset_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_pargs::~netbufferv4_register_range_reset_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_result::~netbufferv4_register_range_reset_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_cm1_reg_presult::~netbufferv4_register_range_reset_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_cm1_reg_args::~netbufferv4_register_write_all_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_cm1_reg_pargs::~netbufferv4_register_write_all_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_cm1_reg_result::~netbufferv4_register_write_all_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_cm1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_cm1_reg_presult::~netbufferv4_register_write_all_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_cm1_reg_args::~netbufferv4_register_range_read_cm1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_cm1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_cm1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_cm1_reg_pargs::~netbufferv4_register_range_read_cm1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_cm1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_cm1_reg_result::~netbufferv4_register_range_read_cm1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2034;
            ::apache::thrift::protocol::TType _etype2037;
            xfer += iprot->readListBegin(_etype2037, _size2034);
            this->success.resize(_size2034);
            uint32_t _i2038;
            for (_i2038 = 0; _i2038 < _size2034; ++_i2038)
            {
              xfer += iprot->readI16(this->success[_i2038]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_cm1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_cm1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2039;
      for (_iter2039 = this->success.begin(); _iter2039 != this->success.end(); ++_iter2039)
      {
        xfer += oprot->writeI16((*_iter2039));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_cm1_reg_presult::~netbufferv4_register_range_read_cm1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_cm1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2040;
            ::apache::thrift::protocol::TType _etype2043;
            xfer += iprot->readListBegin(_etype2043, _size2040);
            (*(this->success)).resize(_size2040);
            uint32_t _i2044;
            for (_i2044 = 0; _i2044 < _size2040; ++_i2044)
            {
              xfer += iprot->readI16((*(this->success))[_i2044]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_args::~netbufferv4_register_hw_sync_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_pargs::~netbufferv4_register_hw_sync_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_result::~netbufferv4_register_hw_sync_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_validvalue_reg_presult::~netbufferv4_register_hw_sync_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_validvalue_reg_args::~netbufferv4_register_read_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_validvalue_reg_pargs::~netbufferv4_register_read_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_validvalue_reg_result::~netbufferv4_register_read_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2045;
            ::apache::thrift::protocol::TType _etype2048;
            xfer += iprot->readListBegin(_etype2048, _size2045);
            this->success.resize(_size2045);
            uint32_t _i2049;
            for (_i2049 = 0; _i2049 < _size2045; ++_i2049)
            {
              xfer += iprot->readByte(this->success[_i2049]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_validvalue_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2050;
      for (_iter2050 = this->success.begin(); _iter2050 != this->success.end(); ++_iter2050)
      {
        xfer += oprot->writeByte((*_iter2050));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_validvalue_reg_presult::~netbufferv4_register_read_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2051;
            ::apache::thrift::protocol::TType _etype2054;
            xfer += iprot->readListBegin(_etype2054, _size2051);
            (*(this->success)).resize(_size2051);
            uint32_t _i2055;
            for (_i2055 = 0; _i2055 < _size2051; ++_i2055)
            {
              xfer += iprot->readByte((*(this->success))[_i2055]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_validvalue_reg_args::~netbufferv4_register_write_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_validvalue_reg_pargs::~netbufferv4_register_write_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_validvalue_reg_result::~netbufferv4_register_write_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_validvalue_reg_presult::~netbufferv4_register_write_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_args::~netbufferv4_register_reset_all_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_pargs::~netbufferv4_register_reset_all_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_result::~netbufferv4_register_reset_all_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_validvalue_reg_presult::~netbufferv4_register_reset_all_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_args::~netbufferv4_register_range_reset_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_pargs::~netbufferv4_register_range_reset_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_result::~netbufferv4_register_range_reset_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_validvalue_reg_presult::~netbufferv4_register_range_reset_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_args::~netbufferv4_register_write_all_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_pargs::~netbufferv4_register_write_all_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_result::~netbufferv4_register_write_all_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_validvalue_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_validvalue_reg_presult::~netbufferv4_register_write_all_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_args::~netbufferv4_register_range_read_validvalue_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_validvalue_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_validvalue_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_pargs::~netbufferv4_register_range_read_validvalue_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_validvalue_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_result::~netbufferv4_register_range_read_validvalue_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2056;
            ::apache::thrift::protocol::TType _etype2059;
            xfer += iprot->readListBegin(_etype2059, _size2056);
            this->success.resize(_size2056);
            uint32_t _i2060;
            for (_i2060 = 0; _i2060 < _size2056; ++_i2060)
            {
              xfer += iprot->readByte(this->success[_i2060]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_validvalue_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_validvalue_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2061;
      for (_iter2061 = this->success.begin(); _iter2061 != this->success.end(); ++_iter2061)
      {
        xfer += oprot->writeByte((*_iter2061));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_validvalue_reg_presult::~netbufferv4_register_range_read_validvalue_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_validvalue_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2062;
            ::apache::thrift::protocol::TType _etype2065;
            xfer += iprot->readListBegin(_etype2065, _size2062);
            (*(this->success)).resize(_size2062);
            uint32_t _i2066;
            for (_i2066 = 0; _i2066 < _size2062; ++_i2066)
            {
              xfer += iprot->readByte((*(this->success))[_i2066]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_args::~netbufferv4_register_hw_sync_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_pargs::~netbufferv4_register_hw_sync_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_result::~netbufferv4_register_hw_sync_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi4_reg_presult::~netbufferv4_register_hw_sync_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi4_reg_args::~netbufferv4_register_read_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi4_reg_pargs::~netbufferv4_register_read_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi4_reg_result::~netbufferv4_register_read_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2067;
            ::apache::thrift::protocol::TType _etype2070;
            xfer += iprot->readListBegin(_etype2070, _size2067);
            this->success.resize(_size2067);
            uint32_t _i2071;
            for (_i2071 = 0; _i2071 < _size2067; ++_i2071)
            {
              xfer += iprot->readI32(this->success[_i2071]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2072;
      for (_iter2072 = this->success.begin(); _iter2072 != this->success.end(); ++_iter2072)
      {
        xfer += oprot->writeI32((*_iter2072));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi4_reg_presult::~netbufferv4_register_read_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2073;
            ::apache::thrift::protocol::TType _etype2076;
            xfer += iprot->readListBegin(_etype2076, _size2073);
            (*(this->success)).resize(_size2073);
            uint32_t _i2077;
            for (_i2077 = 0; _i2077 < _size2073; ++_i2077)
            {
              xfer += iprot->readI32((*(this->success))[_i2077]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi4_reg_args::~netbufferv4_register_write_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi4_reg_pargs::~netbufferv4_register_write_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi4_reg_result::~netbufferv4_register_write_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi4_reg_presult::~netbufferv4_register_write_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_args::~netbufferv4_register_reset_all_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_pargs::~netbufferv4_register_reset_all_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_result::~netbufferv4_register_reset_all_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi4_reg_presult::~netbufferv4_register_reset_all_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_args::~netbufferv4_register_range_reset_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_pargs::~netbufferv4_register_range_reset_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_result::~netbufferv4_register_range_reset_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi4_reg_presult::~netbufferv4_register_range_reset_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_args::~netbufferv4_register_write_all_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_pargs::~netbufferv4_register_write_all_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_result::~netbufferv4_register_write_all_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi4_reg_presult::~netbufferv4_register_write_all_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_args::~netbufferv4_register_range_read_valhi4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_pargs::~netbufferv4_register_range_read_valhi4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_result::~netbufferv4_register_range_read_valhi4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2078;
            ::apache::thrift::protocol::TType _etype2081;
            xfer += iprot->readListBegin(_etype2081, _size2078);
            this->success.resize(_size2078);
            uint32_t _i2082;
            for (_i2082 = 0; _i2082 < _size2078; ++_i2082)
            {
              xfer += iprot->readI32(this->success[_i2082]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2083;
      for (_iter2083 = this->success.begin(); _iter2083 != this->success.end(); ++_iter2083)
      {
        xfer += oprot->writeI32((*_iter2083));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi4_reg_presult::~netbufferv4_register_range_read_valhi4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2084;
            ::apache::thrift::protocol::TType _etype2087;
            xfer += iprot->readListBegin(_etype2087, _size2084);
            (*(this->success)).resize(_size2084);
            uint32_t _i2088;
            for (_i2088 = 0; _i2088 < _size2084; ++_i2088)
            {
              xfer += iprot->readI32((*(this->success))[_i2088]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_args::~netbufferv4_register_hw_sync_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_pargs::~netbufferv4_register_hw_sync_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_result::~netbufferv4_register_hw_sync_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo15_reg_presult::~netbufferv4_register_hw_sync_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo15_reg_args::~netbufferv4_register_read_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo15_reg_pargs::~netbufferv4_register_read_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo15_reg_result::~netbufferv4_register_read_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2089;
            ::apache::thrift::protocol::TType _etype2092;
            xfer += iprot->readListBegin(_etype2092, _size2089);
            this->success.resize(_size2089);
            uint32_t _i2093;
            for (_i2093 = 0; _i2093 < _size2089; ++_i2093)
            {
              xfer += iprot->readI32(this->success[_i2093]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2094;
      for (_iter2094 = this->success.begin(); _iter2094 != this->success.end(); ++_iter2094)
      {
        xfer += oprot->writeI32((*_iter2094));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo15_reg_presult::~netbufferv4_register_read_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2095;
            ::apache::thrift::protocol::TType _etype2098;
            xfer += iprot->readListBegin(_etype2098, _size2095);
            (*(this->success)).resize(_size2095);
            uint32_t _i2099;
            for (_i2099 = 0; _i2099 < _size2095; ++_i2099)
            {
              xfer += iprot->readI32((*(this->success))[_i2099]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo15_reg_args::~netbufferv4_register_write_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo15_reg_pargs::~netbufferv4_register_write_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo15_reg_result::~netbufferv4_register_write_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo15_reg_presult::~netbufferv4_register_write_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_args::~netbufferv4_register_reset_all_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_pargs::~netbufferv4_register_reset_all_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_result::~netbufferv4_register_reset_all_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo15_reg_presult::~netbufferv4_register_reset_all_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_args::~netbufferv4_register_range_reset_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_pargs::~netbufferv4_register_range_reset_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_result::~netbufferv4_register_range_reset_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo15_reg_presult::~netbufferv4_register_range_reset_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_args::~netbufferv4_register_write_all_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_pargs::~netbufferv4_register_write_all_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_result::~netbufferv4_register_write_all_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo15_reg_presult::~netbufferv4_register_write_all_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_args::~netbufferv4_register_range_read_vallo15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_pargs::~netbufferv4_register_range_read_vallo15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_result::~netbufferv4_register_range_read_vallo15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2100;
            ::apache::thrift::protocol::TType _etype2103;
            xfer += iprot->readListBegin(_etype2103, _size2100);
            this->success.resize(_size2100);
            uint32_t _i2104;
            for (_i2104 = 0; _i2104 < _size2100; ++_i2104)
            {
              xfer += iprot->readI32(this->success[_i2104]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2105;
      for (_iter2105 = this->success.begin(); _iter2105 != this->success.end(); ++_iter2105)
      {
        xfer += oprot->writeI32((*_iter2105));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo15_reg_presult::~netbufferv4_register_range_read_vallo15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2106;
            ::apache::thrift::protocol::TType _etype2109;
            xfer += iprot->readListBegin(_etype2109, _size2106);
            (*(this->success)).resize(_size2106);
            uint32_t _i2110;
            for (_i2110 = 0; _i2110 < _size2106; ++_i2110)
            {
              xfer += iprot->readI32((*(this->success))[_i2110]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_args::~netbufferv4_register_hw_sync_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_pargs::~netbufferv4_register_hw_sync_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_result::~netbufferv4_register_hw_sync_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi12_reg_presult::~netbufferv4_register_hw_sync_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi12_reg_args::~netbufferv4_register_read_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi12_reg_pargs::~netbufferv4_register_read_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi12_reg_result::~netbufferv4_register_read_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2111;
            ::apache::thrift::protocol::TType _etype2114;
            xfer += iprot->readListBegin(_etype2114, _size2111);
            this->success.resize(_size2111);
            uint32_t _i2115;
            for (_i2115 = 0; _i2115 < _size2111; ++_i2115)
            {
              xfer += iprot->readI32(this->success[_i2115]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi12_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2116;
      for (_iter2116 = this->success.begin(); _iter2116 != this->success.end(); ++_iter2116)
      {
        xfer += oprot->writeI32((*_iter2116));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi12_reg_presult::~netbufferv4_register_read_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2117;
            ::apache::thrift::protocol::TType _etype2120;
            xfer += iprot->readListBegin(_etype2120, _size2117);
            (*(this->success)).resize(_size2117);
            uint32_t _i2121;
            for (_i2121 = 0; _i2121 < _size2117; ++_i2121)
            {
              xfer += iprot->readI32((*(this->success))[_i2121]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi12_reg_args::~netbufferv4_register_write_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi12_reg_pargs::~netbufferv4_register_write_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi12_reg_result::~netbufferv4_register_write_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi12_reg_presult::~netbufferv4_register_write_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_args::~netbufferv4_register_reset_all_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_pargs::~netbufferv4_register_reset_all_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_result::~netbufferv4_register_reset_all_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi12_reg_presult::~netbufferv4_register_reset_all_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_args::~netbufferv4_register_range_reset_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_pargs::~netbufferv4_register_range_reset_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_result::~netbufferv4_register_range_reset_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi12_reg_presult::~netbufferv4_register_range_reset_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_args::~netbufferv4_register_write_all_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_pargs::~netbufferv4_register_write_all_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_result::~netbufferv4_register_write_all_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi12_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi12_reg_presult::~netbufferv4_register_write_all_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_args::~netbufferv4_register_range_read_valhi12_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi12_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi12_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_pargs::~netbufferv4_register_range_read_valhi12_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi12_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_result::~netbufferv4_register_range_read_valhi12_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2122;
            ::apache::thrift::protocol::TType _etype2125;
            xfer += iprot->readListBegin(_etype2125, _size2122);
            this->success.resize(_size2122);
            uint32_t _i2126;
            for (_i2126 = 0; _i2126 < _size2122; ++_i2126)
            {
              xfer += iprot->readI32(this->success[_i2126]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi12_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi12_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2127;
      for (_iter2127 = this->success.begin(); _iter2127 != this->success.end(); ++_iter2127)
      {
        xfer += oprot->writeI32((*_iter2127));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi12_reg_presult::~netbufferv4_register_range_read_valhi12_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi12_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2128;
            ::apache::thrift::protocol::TType _etype2131;
            xfer += iprot->readListBegin(_etype2131, _size2128);
            (*(this->success)).resize(_size2128);
            uint32_t _i2132;
            for (_i2132 = 0; _i2132 < _size2128; ++_i2132)
            {
              xfer += iprot->readI32((*(this->success))[_i2132]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_args::~netbufferv4_register_hw_sync_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_pargs::~netbufferv4_register_hw_sync_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_result::~netbufferv4_register_hw_sync_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_latest_reg_presult::~netbufferv4_register_hw_sync_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_latest_reg_args::~netbufferv4_register_read_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_latest_reg_pargs::~netbufferv4_register_read_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_latest_reg_result::~netbufferv4_register_read_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2133;
            ::apache::thrift::protocol::TType _etype2136;
            xfer += iprot->readListBegin(_etype2136, _size2133);
            this->success.resize(_size2133);
            uint32_t _i2137;
            for (_i2137 = 0; _i2137 < _size2133; ++_i2137)
            {
              xfer += iprot->readByte(this->success[_i2137]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_latest_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2138;
      for (_iter2138 = this->success.begin(); _iter2138 != this->success.end(); ++_iter2138)
      {
        xfer += oprot->writeByte((*_iter2138));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_latest_reg_presult::~netbufferv4_register_read_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2139;
            ::apache::thrift::protocol::TType _etype2142;
            xfer += iprot->readListBegin(_etype2142, _size2139);
            (*(this->success)).resize(_size2139);
            uint32_t _i2143;
            for (_i2143 = 0; _i2143 < _size2139; ++_i2143)
            {
              xfer += iprot->readByte((*(this->success))[_i2143]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_latest_reg_args::~netbufferv4_register_write_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_latest_reg_pargs::~netbufferv4_register_write_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_latest_reg_result::~netbufferv4_register_write_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_latest_reg_presult::~netbufferv4_register_write_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_latest_reg_args::~netbufferv4_register_reset_all_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_latest_reg_pargs::~netbufferv4_register_reset_all_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_latest_reg_result::~netbufferv4_register_reset_all_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_latest_reg_presult::~netbufferv4_register_reset_all_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_latest_reg_args::~netbufferv4_register_range_reset_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_latest_reg_pargs::~netbufferv4_register_range_reset_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_latest_reg_result::~netbufferv4_register_range_reset_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_latest_reg_presult::~netbufferv4_register_range_reset_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_latest_reg_args::~netbufferv4_register_write_all_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_latest_reg_pargs::~netbufferv4_register_write_all_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_latest_reg_result::~netbufferv4_register_write_all_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_latest_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_latest_reg_presult::~netbufferv4_register_write_all_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_latest_reg_args::~netbufferv4_register_range_read_latest_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_latest_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_latest_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_latest_reg_pargs::~netbufferv4_register_range_read_latest_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_latest_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_latest_reg_result::~netbufferv4_register_range_read_latest_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2144;
            ::apache::thrift::protocol::TType _etype2147;
            xfer += iprot->readListBegin(_etype2147, _size2144);
            this->success.resize(_size2144);
            uint32_t _i2148;
            for (_i2148 = 0; _i2148 < _size2144; ++_i2148)
            {
              xfer += iprot->readByte(this->success[_i2148]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_latest_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_latest_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2149;
      for (_iter2149 = this->success.begin(); _iter2149 != this->success.end(); ++_iter2149)
      {
        xfer += oprot->writeByte((*_iter2149));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_latest_reg_presult::~netbufferv4_register_range_read_latest_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_latest_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2150;
            ::apache::thrift::protocol::TType _etype2153;
            xfer += iprot->readListBegin(_etype2153, _size2150);
            (*(this->success)).resize(_size2150);
            uint32_t _i2154;
            for (_i2154 = 0; _i2154 < _size2150; ++_i2154)
            {
              xfer += iprot->readByte((*(this->success))[_i2154]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_args::~netbufferv4_register_hw_sync_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_pargs::~netbufferv4_register_hw_sync_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_result::~netbufferv4_register_hw_sync_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo10_reg_presult::~netbufferv4_register_hw_sync_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo10_reg_args::~netbufferv4_register_read_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo10_reg_pargs::~netbufferv4_register_read_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo10_reg_result::~netbufferv4_register_read_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2155;
            ::apache::thrift::protocol::TType _etype2158;
            xfer += iprot->readListBegin(_etype2158, _size2155);
            this->success.resize(_size2155);
            uint32_t _i2159;
            for (_i2159 = 0; _i2159 < _size2155; ++_i2159)
            {
              xfer += iprot->readI32(this->success[_i2159]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo10_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2160;
      for (_iter2160 = this->success.begin(); _iter2160 != this->success.end(); ++_iter2160)
      {
        xfer += oprot->writeI32((*_iter2160));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo10_reg_presult::~netbufferv4_register_read_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2161;
            ::apache::thrift::protocol::TType _etype2164;
            xfer += iprot->readListBegin(_etype2164, _size2161);
            (*(this->success)).resize(_size2161);
            uint32_t _i2165;
            for (_i2165 = 0; _i2165 < _size2161; ++_i2165)
            {
              xfer += iprot->readI32((*(this->success))[_i2165]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo10_reg_args::~netbufferv4_register_write_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo10_reg_pargs::~netbufferv4_register_write_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo10_reg_result::~netbufferv4_register_write_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo10_reg_presult::~netbufferv4_register_write_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_args::~netbufferv4_register_reset_all_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_pargs::~netbufferv4_register_reset_all_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_result::~netbufferv4_register_reset_all_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo10_reg_presult::~netbufferv4_register_reset_all_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_args::~netbufferv4_register_range_reset_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_pargs::~netbufferv4_register_range_reset_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_result::~netbufferv4_register_range_reset_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo10_reg_presult::~netbufferv4_register_range_reset_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_args::~netbufferv4_register_write_all_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_pargs::~netbufferv4_register_write_all_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_result::~netbufferv4_register_write_all_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo10_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo10_reg_presult::~netbufferv4_register_write_all_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_args::~netbufferv4_register_range_read_vallo10_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo10_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo10_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_pargs::~netbufferv4_register_range_read_vallo10_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo10_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_result::~netbufferv4_register_range_read_vallo10_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2166;
            ::apache::thrift::protocol::TType _etype2169;
            xfer += iprot->readListBegin(_etype2169, _size2166);
            this->success.resize(_size2166);
            uint32_t _i2170;
            for (_i2170 = 0; _i2170 < _size2166; ++_i2170)
            {
              xfer += iprot->readI32(this->success[_i2170]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo10_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo10_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2171;
      for (_iter2171 = this->success.begin(); _iter2171 != this->success.end(); ++_iter2171)
      {
        xfer += oprot->writeI32((*_iter2171));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo10_reg_presult::~netbufferv4_register_range_read_vallo10_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo10_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2172;
            ::apache::thrift::protocol::TType _etype2175;
            xfer += iprot->readListBegin(_etype2175, _size2172);
            (*(this->success)).resize(_size2172);
            uint32_t _i2176;
            for (_i2176 = 0; _i2176 < _size2172; ++_i2176)
            {
              xfer += iprot->readI32((*(this->success))[_i2176]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_args::~netbufferv4_register_hw_sync_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_pargs::~netbufferv4_register_hw_sync_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_result::~netbufferv4_register_hw_sync_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo4_reg_presult::~netbufferv4_register_hw_sync_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo4_reg_args::~netbufferv4_register_read_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo4_reg_pargs::~netbufferv4_register_read_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo4_reg_result::~netbufferv4_register_read_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2177;
            ::apache::thrift::protocol::TType _etype2180;
            xfer += iprot->readListBegin(_etype2180, _size2177);
            this->success.resize(_size2177);
            uint32_t _i2181;
            for (_i2181 = 0; _i2181 < _size2177; ++_i2181)
            {
              xfer += iprot->readI32(this->success[_i2181]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2182;
      for (_iter2182 = this->success.begin(); _iter2182 != this->success.end(); ++_iter2182)
      {
        xfer += oprot->writeI32((*_iter2182));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo4_reg_presult::~netbufferv4_register_read_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2183;
            ::apache::thrift::protocol::TType _etype2186;
            xfer += iprot->readListBegin(_etype2186, _size2183);
            (*(this->success)).resize(_size2183);
            uint32_t _i2187;
            for (_i2187 = 0; _i2187 < _size2183; ++_i2187)
            {
              xfer += iprot->readI32((*(this->success))[_i2187]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo4_reg_args::~netbufferv4_register_write_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo4_reg_pargs::~netbufferv4_register_write_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo4_reg_result::~netbufferv4_register_write_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo4_reg_presult::~netbufferv4_register_write_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_args::~netbufferv4_register_reset_all_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_pargs::~netbufferv4_register_reset_all_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_result::~netbufferv4_register_reset_all_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo4_reg_presult::~netbufferv4_register_reset_all_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_args::~netbufferv4_register_range_reset_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_pargs::~netbufferv4_register_range_reset_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_result::~netbufferv4_register_range_reset_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo4_reg_presult::~netbufferv4_register_range_reset_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_args::~netbufferv4_register_write_all_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_pargs::~netbufferv4_register_write_all_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_result::~netbufferv4_register_write_all_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo4_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo4_reg_presult::~netbufferv4_register_write_all_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_args::~netbufferv4_register_range_read_vallo4_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo4_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo4_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_pargs::~netbufferv4_register_range_read_vallo4_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo4_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_result::~netbufferv4_register_range_read_vallo4_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2188;
            ::apache::thrift::protocol::TType _etype2191;
            xfer += iprot->readListBegin(_etype2191, _size2188);
            this->success.resize(_size2188);
            uint32_t _i2192;
            for (_i2192 = 0; _i2192 < _size2188; ++_i2192)
            {
              xfer += iprot->readI32(this->success[_i2192]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo4_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo4_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2193;
      for (_iter2193 = this->success.begin(); _iter2193 != this->success.end(); ++_iter2193)
      {
        xfer += oprot->writeI32((*_iter2193));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo4_reg_presult::~netbufferv4_register_range_read_vallo4_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo4_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2194;
            ::apache::thrift::protocol::TType _etype2197;
            xfer += iprot->readListBegin(_etype2197, _size2194);
            (*(this->success)).resize(_size2194);
            uint32_t _i2198;
            for (_i2198 = 0; _i2198 < _size2194; ++_i2198)
            {
              xfer += iprot->readI32((*(this->success))[_i2198]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_args::~netbufferv4_register_hw_sync_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_pargs::~netbufferv4_register_hw_sync_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_result::~netbufferv4_register_hw_sync_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo16_reg_presult::~netbufferv4_register_hw_sync_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo16_reg_args::~netbufferv4_register_read_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo16_reg_pargs::~netbufferv4_register_read_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo16_reg_result::~netbufferv4_register_read_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2199;
            ::apache::thrift::protocol::TType _etype2202;
            xfer += iprot->readListBegin(_etype2202, _size2199);
            this->success.resize(_size2199);
            uint32_t _i2203;
            for (_i2203 = 0; _i2203 < _size2199; ++_i2203)
            {
              xfer += iprot->readI32(this->success[_i2203]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo16_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2204;
      for (_iter2204 = this->success.begin(); _iter2204 != this->success.end(); ++_iter2204)
      {
        xfer += oprot->writeI32((*_iter2204));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo16_reg_presult::~netbufferv4_register_read_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2205;
            ::apache::thrift::protocol::TType _etype2208;
            xfer += iprot->readListBegin(_etype2208, _size2205);
            (*(this->success)).resize(_size2205);
            uint32_t _i2209;
            for (_i2209 = 0; _i2209 < _size2205; ++_i2209)
            {
              xfer += iprot->readI32((*(this->success))[_i2209]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo16_reg_args::~netbufferv4_register_write_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo16_reg_pargs::~netbufferv4_register_write_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo16_reg_result::~netbufferv4_register_write_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo16_reg_presult::~netbufferv4_register_write_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_args::~netbufferv4_register_reset_all_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_pargs::~netbufferv4_register_reset_all_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_result::~netbufferv4_register_reset_all_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo16_reg_presult::~netbufferv4_register_reset_all_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_args::~netbufferv4_register_range_reset_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_pargs::~netbufferv4_register_range_reset_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_result::~netbufferv4_register_range_reset_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo16_reg_presult::~netbufferv4_register_range_reset_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_args::~netbufferv4_register_write_all_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_pargs::~netbufferv4_register_write_all_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_result::~netbufferv4_register_write_all_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo16_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo16_reg_presult::~netbufferv4_register_write_all_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_args::~netbufferv4_register_range_read_vallo16_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo16_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo16_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_pargs::~netbufferv4_register_range_read_vallo16_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo16_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_result::~netbufferv4_register_range_read_vallo16_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2210;
            ::apache::thrift::protocol::TType _etype2213;
            xfer += iprot->readListBegin(_etype2213, _size2210);
            this->success.resize(_size2210);
            uint32_t _i2214;
            for (_i2214 = 0; _i2214 < _size2210; ++_i2214)
            {
              xfer += iprot->readI32(this->success[_i2214]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo16_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo16_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2215;
      for (_iter2215 = this->success.begin(); _iter2215 != this->success.end(); ++_iter2215)
      {
        xfer += oprot->writeI32((*_iter2215));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo16_reg_presult::~netbufferv4_register_range_read_vallo16_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo16_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2216;
            ::apache::thrift::protocol::TType _etype2219;
            xfer += iprot->readListBegin(_etype2219, _size2216);
            (*(this->success)).resize(_size2216);
            uint32_t _i2220;
            for (_i2220 = 0; _i2220 < _size2216; ++_i2220)
            {
              xfer += iprot->readI32((*(this->success))[_i2220]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_args::~netbufferv4_register_hw_sync_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_pargs::~netbufferv4_register_hw_sync_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_result::~netbufferv4_register_hw_sync_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo3_reg_presult::~netbufferv4_register_hw_sync_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo3_reg_args::~netbufferv4_register_read_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo3_reg_pargs::~netbufferv4_register_read_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo3_reg_result::~netbufferv4_register_read_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2221;
            ::apache::thrift::protocol::TType _etype2224;
            xfer += iprot->readListBegin(_etype2224, _size2221);
            this->success.resize(_size2221);
            uint32_t _i2225;
            for (_i2225 = 0; _i2225 < _size2221; ++_i2225)
            {
              xfer += iprot->readI32(this->success[_i2225]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo3_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2226;
      for (_iter2226 = this->success.begin(); _iter2226 != this->success.end(); ++_iter2226)
      {
        xfer += oprot->writeI32((*_iter2226));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo3_reg_presult::~netbufferv4_register_read_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2227;
            ::apache::thrift::protocol::TType _etype2230;
            xfer += iprot->readListBegin(_etype2230, _size2227);
            (*(this->success)).resize(_size2227);
            uint32_t _i2231;
            for (_i2231 = 0; _i2231 < _size2227; ++_i2231)
            {
              xfer += iprot->readI32((*(this->success))[_i2231]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo3_reg_args::~netbufferv4_register_write_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo3_reg_pargs::~netbufferv4_register_write_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo3_reg_result::~netbufferv4_register_write_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo3_reg_presult::~netbufferv4_register_write_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_args::~netbufferv4_register_reset_all_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_pargs::~netbufferv4_register_reset_all_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_result::~netbufferv4_register_reset_all_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo3_reg_presult::~netbufferv4_register_reset_all_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_args::~netbufferv4_register_range_reset_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_pargs::~netbufferv4_register_range_reset_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_result::~netbufferv4_register_range_reset_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo3_reg_presult::~netbufferv4_register_range_reset_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_args::~netbufferv4_register_write_all_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_pargs::~netbufferv4_register_write_all_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_result::~netbufferv4_register_write_all_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo3_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo3_reg_presult::~netbufferv4_register_write_all_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_args::~netbufferv4_register_range_read_vallo3_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo3_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo3_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_pargs::~netbufferv4_register_range_read_vallo3_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo3_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_result::~netbufferv4_register_range_read_vallo3_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2232;
            ::apache::thrift::protocol::TType _etype2235;
            xfer += iprot->readListBegin(_etype2235, _size2232);
            this->success.resize(_size2232);
            uint32_t _i2236;
            for (_i2236 = 0; _i2236 < _size2232; ++_i2236)
            {
              xfer += iprot->readI32(this->success[_i2236]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo3_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo3_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2237;
      for (_iter2237 = this->success.begin(); _iter2237 != this->success.end(); ++_iter2237)
      {
        xfer += oprot->writeI32((*_iter2237));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo3_reg_presult::~netbufferv4_register_range_read_vallo3_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo3_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2238;
            ::apache::thrift::protocol::TType _etype2241;
            xfer += iprot->readListBegin(_etype2241, _size2238);
            (*(this->success)).resize(_size2238);
            uint32_t _i2242;
            for (_i2242 = 0; _i2242 < _size2238; ++_i2242)
            {
              xfer += iprot->readI32((*(this->success))[_i2242]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_args::~netbufferv4_register_hw_sync_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_pargs::~netbufferv4_register_hw_sync_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_result::~netbufferv4_register_hw_sync_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi8_reg_presult::~netbufferv4_register_hw_sync_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi8_reg_args::~netbufferv4_register_read_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi8_reg_pargs::~netbufferv4_register_read_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi8_reg_result::~netbufferv4_register_read_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2243;
            ::apache::thrift::protocol::TType _etype2246;
            xfer += iprot->readListBegin(_etype2246, _size2243);
            this->success.resize(_size2243);
            uint32_t _i2247;
            for (_i2247 = 0; _i2247 < _size2243; ++_i2247)
            {
              xfer += iprot->readI32(this->success[_i2247]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi8_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2248;
      for (_iter2248 = this->success.begin(); _iter2248 != this->success.end(); ++_iter2248)
      {
        xfer += oprot->writeI32((*_iter2248));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi8_reg_presult::~netbufferv4_register_read_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2249;
            ::apache::thrift::protocol::TType _etype2252;
            xfer += iprot->readListBegin(_etype2252, _size2249);
            (*(this->success)).resize(_size2249);
            uint32_t _i2253;
            for (_i2253 = 0; _i2253 < _size2249; ++_i2253)
            {
              xfer += iprot->readI32((*(this->success))[_i2253]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi8_reg_args::~netbufferv4_register_write_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi8_reg_pargs::~netbufferv4_register_write_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi8_reg_result::~netbufferv4_register_write_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi8_reg_presult::~netbufferv4_register_write_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_args::~netbufferv4_register_reset_all_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_pargs::~netbufferv4_register_reset_all_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_result::~netbufferv4_register_reset_all_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi8_reg_presult::~netbufferv4_register_reset_all_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_args::~netbufferv4_register_range_reset_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_pargs::~netbufferv4_register_range_reset_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_result::~netbufferv4_register_range_reset_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi8_reg_presult::~netbufferv4_register_range_reset_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_args::~netbufferv4_register_write_all_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_pargs::~netbufferv4_register_write_all_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_result::~netbufferv4_register_write_all_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi8_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi8_reg_presult::~netbufferv4_register_write_all_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_args::~netbufferv4_register_range_read_valhi8_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi8_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi8_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_pargs::~netbufferv4_register_range_read_valhi8_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi8_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_result::~netbufferv4_register_range_read_valhi8_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2254;
            ::apache::thrift::protocol::TType _etype2257;
            xfer += iprot->readListBegin(_etype2257, _size2254);
            this->success.resize(_size2254);
            uint32_t _i2258;
            for (_i2258 = 0; _i2258 < _size2254; ++_i2258)
            {
              xfer += iprot->readI32(this->success[_i2258]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi8_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi8_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2259;
      for (_iter2259 = this->success.begin(); _iter2259 != this->success.end(); ++_iter2259)
      {
        xfer += oprot->writeI32((*_iter2259));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi8_reg_presult::~netbufferv4_register_range_read_valhi8_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi8_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2260;
            ::apache::thrift::protocol::TType _etype2263;
            xfer += iprot->readListBegin(_etype2263, _size2260);
            (*(this->success)).resize(_size2260);
            uint32_t _i2264;
            for (_i2264 = 0; _i2264 < _size2260; ++_i2264)
            {
              xfer += iprot->readI32((*(this->success))[_i2264]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_args::~netbufferv4_register_hw_sync_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_pargs::~netbufferv4_register_hw_sync_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_result::~netbufferv4_register_hw_sync_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallen_reg_presult::~netbufferv4_register_hw_sync_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallen_reg_args::~netbufferv4_register_read_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallen_reg_pargs::~netbufferv4_register_read_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallen_reg_result::~netbufferv4_register_read_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2265;
            ::apache::thrift::protocol::TType _etype2268;
            xfer += iprot->readListBegin(_etype2268, _size2265);
            this->success.resize(_size2265);
            uint32_t _i2269;
            for (_i2269 = 0; _i2269 < _size2265; ++_i2269)
            {
              xfer += iprot->readI16(this->success[_i2269]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallen_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2270;
      for (_iter2270 = this->success.begin(); _iter2270 != this->success.end(); ++_iter2270)
      {
        xfer += oprot->writeI16((*_iter2270));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallen_reg_presult::~netbufferv4_register_read_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2271;
            ::apache::thrift::protocol::TType _etype2274;
            xfer += iprot->readListBegin(_etype2274, _size2271);
            (*(this->success)).resize(_size2271);
            uint32_t _i2275;
            for (_i2275 = 0; _i2275 < _size2271; ++_i2275)
            {
              xfer += iprot->readI16((*(this->success))[_i2275]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallen_reg_args::~netbufferv4_register_write_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallen_reg_pargs::~netbufferv4_register_write_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallen_reg_result::~netbufferv4_register_write_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallen_reg_presult::~netbufferv4_register_write_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_args::~netbufferv4_register_reset_all_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_pargs::~netbufferv4_register_reset_all_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_result::~netbufferv4_register_reset_all_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallen_reg_presult::~netbufferv4_register_reset_all_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_args::~netbufferv4_register_range_reset_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_pargs::~netbufferv4_register_range_reset_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_result::~netbufferv4_register_range_reset_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallen_reg_presult::~netbufferv4_register_range_reset_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallen_reg_args::~netbufferv4_register_write_all_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallen_reg_pargs::~netbufferv4_register_write_all_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallen_reg_result::~netbufferv4_register_write_all_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallen_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallen_reg_presult::~netbufferv4_register_write_all_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallen_reg_args::~netbufferv4_register_range_read_vallen_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallen_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallen_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallen_reg_pargs::~netbufferv4_register_range_read_vallen_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallen_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallen_reg_result::~netbufferv4_register_range_read_vallen_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2276;
            ::apache::thrift::protocol::TType _etype2279;
            xfer += iprot->readListBegin(_etype2279, _size2276);
            this->success.resize(_size2276);
            uint32_t _i2280;
            for (_i2280 = 0; _i2280 < _size2276; ++_i2280)
            {
              xfer += iprot->readI16(this->success[_i2280]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallen_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallen_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->success.size()));
      std::vector<int16_t> ::const_iterator _iter2281;
      for (_iter2281 = this->success.begin(); _iter2281 != this->success.end(); ++_iter2281)
      {
        xfer += oprot->writeI16((*_iter2281));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallen_reg_presult::~netbufferv4_register_range_read_vallen_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallen_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2282;
            ::apache::thrift::protocol::TType _etype2285;
            xfer += iprot->readListBegin(_etype2285, _size2282);
            (*(this->success)).resize(_size2282);
            uint32_t _i2286;
            for (_i2286 = 0; _i2286 < _size2282; ++_i2286)
            {
              xfer += iprot->readI16((*(this->success))[_i2286]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_args::~netbufferv4_register_hw_sync_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_pargs::~netbufferv4_register_hw_sync_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_result::~netbufferv4_register_hw_sync_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_vallo1_reg_presult::~netbufferv4_register_hw_sync_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_vallo1_reg_args::~netbufferv4_register_read_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo1_reg_pargs::~netbufferv4_register_read_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_vallo1_reg_result::~netbufferv4_register_read_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2287;
            ::apache::thrift::protocol::TType _etype2290;
            xfer += iprot->readListBegin(_etype2290, _size2287);
            this->success.resize(_size2287);
            uint32_t _i2291;
            for (_i2291 = 0; _i2291 < _size2287; ++_i2291)
            {
              xfer += iprot->readI32(this->success[_i2291]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_vallo1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2292;
      for (_iter2292 = this->success.begin(); _iter2292 != this->success.end(); ++_iter2292)
      {
        xfer += oprot->writeI32((*_iter2292));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_vallo1_reg_presult::~netbufferv4_register_read_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2293;
            ::apache::thrift::protocol::TType _etype2296;
            xfer += iprot->readListBegin(_etype2296, _size2293);
            (*(this->success)).resize(_size2293);
            uint32_t _i2297;
            for (_i2297 = 0; _i2297 < _size2293; ++_i2297)
            {
              xfer += iprot->readI32((*(this->success))[_i2297]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_vallo1_reg_args::~netbufferv4_register_write_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo1_reg_pargs::~netbufferv4_register_write_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_vallo1_reg_result::~netbufferv4_register_write_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_vallo1_reg_presult::~netbufferv4_register_write_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_args::~netbufferv4_register_reset_all_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_pargs::~netbufferv4_register_reset_all_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_result::~netbufferv4_register_reset_all_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_vallo1_reg_presult::~netbufferv4_register_reset_all_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_args::~netbufferv4_register_range_reset_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_pargs::~netbufferv4_register_range_reset_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_result::~netbufferv4_register_range_reset_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_vallo1_reg_presult::~netbufferv4_register_range_reset_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_args::~netbufferv4_register_write_all_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_pargs::~netbufferv4_register_write_all_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_result::~netbufferv4_register_write_all_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_vallo1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_vallo1_reg_presult::~netbufferv4_register_write_all_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_args::~netbufferv4_register_range_read_vallo1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_pargs::~netbufferv4_register_range_read_vallo1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_result::~netbufferv4_register_range_read_vallo1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2298;
            ::apache::thrift::protocol::TType _etype2301;
            xfer += iprot->readListBegin(_etype2301, _size2298);
            this->success.resize(_size2298);
            uint32_t _i2302;
            for (_i2302 = 0; _i2302 < _size2298; ++_i2302)
            {
              xfer += iprot->readI32(this->success[_i2302]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_vallo1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_vallo1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2303;
      for (_iter2303 = this->success.begin(); _iter2303 != this->success.end(); ++_iter2303)
      {
        xfer += oprot->writeI32((*_iter2303));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_vallo1_reg_presult::~netbufferv4_register_range_read_vallo1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_vallo1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2304;
            ::apache::thrift::protocol::TType _etype2307;
            xfer += iprot->readListBegin(_etype2307, _size2304);
            (*(this->success)).resize(_size2304);
            uint32_t _i2308;
            for (_i2308 = 0; _i2308 < _size2304; ++_i2308)
            {
              xfer += iprot->readI32((*(this->success))[_i2308]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_args::~netbufferv4_register_hw_sync_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_pargs::~netbufferv4_register_hw_sync_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_result::~netbufferv4_register_hw_sync_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_savedseq_reg_presult::~netbufferv4_register_hw_sync_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_savedseq_reg_args::~netbufferv4_register_read_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_savedseq_reg_pargs::~netbufferv4_register_read_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_savedseq_reg_result::~netbufferv4_register_read_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2309;
            ::apache::thrift::protocol::TType _etype2312;
            xfer += iprot->readListBegin(_etype2312, _size2309);
            this->success.resize(_size2309);
            uint32_t _i2313;
            for (_i2313 = 0; _i2313 < _size2309; ++_i2313)
            {
              xfer += iprot->readI32(this->success[_i2313]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_savedseq_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2314;
      for (_iter2314 = this->success.begin(); _iter2314 != this->success.end(); ++_iter2314)
      {
        xfer += oprot->writeI32((*_iter2314));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_savedseq_reg_presult::~netbufferv4_register_read_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2315;
            ::apache::thrift::protocol::TType _etype2318;
            xfer += iprot->readListBegin(_etype2318, _size2315);
            (*(this->success)).resize(_size2315);
            uint32_t _i2319;
            for (_i2319 = 0; _i2319 < _size2315; ++_i2319)
            {
              xfer += iprot->readI32((*(this->success))[_i2319]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_savedseq_reg_args::~netbufferv4_register_write_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_savedseq_reg_pargs::~netbufferv4_register_write_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_savedseq_reg_result::~netbufferv4_register_write_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_savedseq_reg_presult::~netbufferv4_register_write_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_args::~netbufferv4_register_reset_all_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_pargs::~netbufferv4_register_reset_all_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_result::~netbufferv4_register_reset_all_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_savedseq_reg_presult::~netbufferv4_register_reset_all_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_args::~netbufferv4_register_range_reset_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_pargs::~netbufferv4_register_range_reset_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_result::~netbufferv4_register_range_reset_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_savedseq_reg_presult::~netbufferv4_register_range_reset_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_args::~netbufferv4_register_write_all_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_pargs::~netbufferv4_register_write_all_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_result::~netbufferv4_register_write_all_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_savedseq_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_savedseq_reg_presult::~netbufferv4_register_write_all_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_args::~netbufferv4_register_range_read_savedseq_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_savedseq_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_savedseq_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_pargs::~netbufferv4_register_range_read_savedseq_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_savedseq_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_result::~netbufferv4_register_range_read_savedseq_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2320;
            ::apache::thrift::protocol::TType _etype2323;
            xfer += iprot->readListBegin(_etype2323, _size2320);
            this->success.resize(_size2320);
            uint32_t _i2324;
            for (_i2324 = 0; _i2324 < _size2320; ++_i2324)
            {
              xfer += iprot->readI32(this->success[_i2324]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_savedseq_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_savedseq_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2325;
      for (_iter2325 = this->success.begin(); _iter2325 != this->success.end(); ++_iter2325)
      {
        xfer += oprot->writeI32((*_iter2325));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_savedseq_reg_presult::~netbufferv4_register_range_read_savedseq_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_savedseq_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2326;
            ::apache::thrift::protocol::TType _etype2329;
            xfer += iprot->readListBegin(_etype2329, _size2326);
            (*(this->success)).resize(_size2326);
            uint32_t _i2330;
            for (_i2330 = 0; _i2330 < _size2326; ++_i2330)
            {
              xfer += iprot->readI32((*(this->success))[_i2330]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_args::~netbufferv4_register_hw_sync_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_pargs::~netbufferv4_register_hw_sync_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_result::~netbufferv4_register_hw_sync_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_valhi15_reg_presult::~netbufferv4_register_hw_sync_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_valhi15_reg_args::~netbufferv4_register_read_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi15_reg_pargs::~netbufferv4_register_read_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_valhi15_reg_result::~netbufferv4_register_read_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2331;
            ::apache::thrift::protocol::TType _etype2334;
            xfer += iprot->readListBegin(_etype2334, _size2331);
            this->success.resize(_size2331);
            uint32_t _i2335;
            for (_i2335 = 0; _i2335 < _size2331; ++_i2335)
            {
              xfer += iprot->readI32(this->success[_i2335]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_valhi15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2336;
      for (_iter2336 = this->success.begin(); _iter2336 != this->success.end(); ++_iter2336)
      {
        xfer += oprot->writeI32((*_iter2336));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_valhi15_reg_presult::~netbufferv4_register_read_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2337;
            ::apache::thrift::protocol::TType _etype2340;
            xfer += iprot->readListBegin(_etype2340, _size2337);
            (*(this->success)).resize(_size2337);
            uint32_t _i2341;
            for (_i2341 = 0; _i2341 < _size2337; ++_i2341)
            {
              xfer += iprot->readI32((*(this->success))[_i2341]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_valhi15_reg_args::~netbufferv4_register_write_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi15_reg_pargs::~netbufferv4_register_write_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_valhi15_reg_result::~netbufferv4_register_write_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_valhi15_reg_presult::~netbufferv4_register_write_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_args::~netbufferv4_register_reset_all_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_pargs::~netbufferv4_register_reset_all_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_result::~netbufferv4_register_reset_all_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_valhi15_reg_presult::~netbufferv4_register_reset_all_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_args::~netbufferv4_register_range_reset_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_pargs::~netbufferv4_register_range_reset_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_result::~netbufferv4_register_range_reset_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_valhi15_reg_presult::~netbufferv4_register_range_reset_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_args::~netbufferv4_register_write_all_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_pargs::~netbufferv4_register_write_all_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_result::~netbufferv4_register_write_all_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_valhi15_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_valhi15_reg_presult::~netbufferv4_register_write_all_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_args::~netbufferv4_register_range_read_valhi15_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi15_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi15_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_pargs::~netbufferv4_register_range_read_valhi15_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi15_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_result::~netbufferv4_register_range_read_valhi15_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2342;
            ::apache::thrift::protocol::TType _etype2345;
            xfer += iprot->readListBegin(_etype2345, _size2342);
            this->success.resize(_size2342);
            uint32_t _i2346;
            for (_i2346 = 0; _i2346 < _size2342; ++_i2346)
            {
              xfer += iprot->readI32(this->success[_i2346]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_valhi15_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_valhi15_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->success.size()));
      std::vector<int32_t> ::const_iterator _iter2347;
      for (_iter2347 = this->success.begin(); _iter2347 != this->success.end(); ++_iter2347)
      {
        xfer += oprot->writeI32((*_iter2347));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_valhi15_reg_presult::~netbufferv4_register_range_read_valhi15_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_valhi15_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2348;
            ::apache::thrift::protocol::TType _etype2351;
            xfer += iprot->readListBegin(_etype2351, _size2348);
            (*(this->success)).resize(_size2348);
            uint32_t _i2352;
            for (_i2352 = 0; _i2352 < _size2348; ++_i2352)
            {
              xfer += iprot->readI32((*(this->success))[_i2352]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_args::~netbufferv4_register_hw_sync_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_pargs::~netbufferv4_register_hw_sync_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_result::~netbufferv4_register_hw_sync_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_hw_sync_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_hw_sync_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_hw_sync_case1_reg_presult::~netbufferv4_register_hw_sync_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_hw_sync_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_read_case1_reg_args::~netbufferv4_register_read_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_case1_reg_pargs::~netbufferv4_register_read_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_read_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_read_case1_reg_result::~netbufferv4_register_read_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2353;
            ::apache::thrift::protocol::TType _etype2356;
            xfer += iprot->readListBegin(_etype2356, _size2353);
            this->success.resize(_size2353);
            uint32_t _i2357;
            for (_i2357 = 0; _i2357 < _size2353; ++_i2357)
            {
              xfer += iprot->readByte(this->success[_i2357]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_read_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_read_case1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2358;
      for (_iter2358 = this->success.begin(); _iter2358 != this->success.end(); ++_iter2358)
      {
        xfer += oprot->writeByte((*_iter2358));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_read_case1_reg_presult::~netbufferv4_register_read_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_read_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2359;
            ::apache::thrift::protocol::TType _etype2362;
            xfer += iprot->readListBegin(_etype2362, _size2359);
            (*(this->success)).resize(_size2359);
            uint32_t _i2363;
            for (_i2363 = 0; _i2363 < _size2359; ++_i2363)
            {
              xfer += iprot->readByte((*(this->success))[_i2363]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_case1_reg_args::~netbufferv4_register_write_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_case1_reg_pargs::~netbufferv4_register_write_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_case1_reg_result::~netbufferv4_register_write_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_case1_reg_presult::~netbufferv4_register_write_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_reset_all_case1_reg_args::~netbufferv4_register_reset_all_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_case1_reg_pargs::~netbufferv4_register_reset_all_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_reset_all_case1_reg_result::~netbufferv4_register_reset_all_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_reset_all_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_reset_all_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_reset_all_case1_reg_presult::~netbufferv4_register_reset_all_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_reset_all_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_reset_case1_reg_args::~netbufferv4_register_range_reset_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_case1_reg_pargs::~netbufferv4_register_range_reset_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_reset_case1_reg_result::~netbufferv4_register_range_reset_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_reset_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_reset_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_reset_case1_reg_presult::~netbufferv4_register_range_reset_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_reset_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_write_all_case1_reg_args::~netbufferv4_register_write_all_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->register_value);
          this->__isset.register_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->register_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_case1_reg_pargs::~netbufferv4_register_write_all_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_value", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->register_value)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_write_all_case1_reg_result::~netbufferv4_register_write_all_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_write_all_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_write_all_case1_reg_result");

  if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_write_all_case1_reg_presult::~netbufferv4_register_write_all_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_write_all_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


netbufferv4_register_range_read_case1_reg_args::~netbufferv4_register_range_read_case1_reg_args() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sess_hdl);
          this->__isset.sess_hdl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dev_tgt.read(iprot);
          this->__isset.dev_tgt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->flags.read(iprot);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_case1_reg_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_case1_reg_args");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sess_hdl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->dev_tgt.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->flags.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_case1_reg_pargs::~netbufferv4_register_range_read_case1_reg_pargs() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_case1_reg_pargs");

  xfer += oprot->writeFieldBegin("sess_hdl", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sess_hdl)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dev_tgt", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->dev_tgt)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->index)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((*(this->count)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += (*(this->flags)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


netbufferv4_register_range_read_case1_reg_result::~netbufferv4_register_range_read_case1_reg_result() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size2364;
            ::apache::thrift::protocol::TType _etype2367;
            xfer += iprot->readListBegin(_etype2367, _size2364);
            this->success.resize(_size2364);
            uint32_t _i2368;
            for (_i2368 = 0; _i2368 < _size2364; ++_i2368)
            {
              xfer += iprot->readByte(this->success[_i2368]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t netbufferv4_register_range_read_case1_reg_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("netbufferv4_register_range_read_case1_reg_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->success.size()));
      std::vector<int8_t> ::const_iterator _iter2369;
      for (_iter2369 = this->success.begin(); _iter2369 != this->success.end(); ++_iter2369)
      {
        xfer += oprot->writeByte((*_iter2369));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ouch) {
    xfer += oprot->writeFieldBegin("ouch", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ouch.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


netbufferv4_register_range_read_case1_reg_presult::~netbufferv4_register_range_read_case1_reg_presult() throw() {
}


uint32_t netbufferv4_register_range_read_case1_reg_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size2370;
            ::apache::thrift::protocol::TType _etype2373;
            xfer += iprot->readListBegin(_etype2373, _size2370);
            (*(this->success)).resize(_size2370);
            uint32_t _i2374;
            for (_i2374 = 0; _i2374 < _size2370; ++_i2374)
            {
              xfer += iprot->readByte((*(this->success))[_i2374]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ouch.read(iprot);
          this->__isset.ouch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cache_frequency_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_case1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_deleted_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_latest_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_savedseq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_seq_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_access_validvalue_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_cache_lookup_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_cache_lookup_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_drop_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_eg_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_cm4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_seq_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_hash_for_seq_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_ig_port_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_ipv4_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_ipv4_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_is_hot_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_is_hot_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::l2l3_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_l2l3_forward_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_l2l3_forward_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_l2l3_forward_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_l2l3_forward_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "l2l3_forward_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_need_recirculate_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_need_recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_prepare_for_cachehit_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::process_scanreq_split_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  send_process_scanreq_split_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_process_scanreq_split_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_process_scanreq_split_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_process_scanreq_split_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_process_scanreq_split_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "process_scanreq_split_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_for_scan_endkey_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_range_partition_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_range_partition_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_recirculate_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_recirculate_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_sample_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_sample_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_save_client_udpport_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_save_client_udpport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_snapshot_flag_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_snapshot_flag_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_ipmac_srcport_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec, priority);
  return recv_update_pktlen_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_pktlen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_valhi9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallen_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo10_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo11_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo12_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo13_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo14_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo15_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo16_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo1_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo2_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo3_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo4_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo5_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo6_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo7_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo8_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_match_spec_to_entry_hdl(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_match_spec_to_entry_hdl();
}

void netbufferv4Client::send_update_vallo9_tbl_match_spec_to_entry_hdl(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_match_spec_to_entry_hdl", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_match_spec_to_entry_hdl_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_match_spec_to_entry_hdl()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_match_spec_to_entry_hdl") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_match_spec_to_entry_hdl_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_match_spec_to_entry_hdl failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_get_cache_frequency(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_get_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_get_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_get_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_get_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_get_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_get_cache_frequency_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_get_cache_frequency failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_update_cache_frequency(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_update_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_update_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_update_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_update_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_update_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_update_cache_frequency_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_update_cache_frequency failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_reset_cache_frequency(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_reset_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_reset_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_reset_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_reset_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_reset_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_reset_cache_frequency_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_reset_cache_frequency failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cache_frequency_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_access_cache_frequency_tbl_table_add_with_nop();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cache_frequency_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cache_frequency_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cache_frequency_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_add_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_add_with_try_case1(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_table_add_with_try_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_add_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_add_with_try_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_add_with_try_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_add_with_try_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_add_with_try_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_add_with_try_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_add_with_try_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_add_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_add_with_read_case1(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_table_add_with_read_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_add_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_add_with_read_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_add_with_read_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_add_with_read_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_add_with_read_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_add_with_read_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_add_with_read_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_case1_tbl_table_add_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_add_with_reset_is_case1(sess_hdl, dev_tgt, match_spec);
  return recv_access_case1_tbl_table_add_with_reset_is_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_add_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_add_with_reset_is_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_add_with_reset_is_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_case1_tbl_table_add_with_reset_is_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_add_with_reset_is_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_case1_tbl_table_add_with_reset_is_case1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_case1_tbl_table_add_with_reset_is_case1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_table_add_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_add_with_update_cm1(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm1_tbl_table_add_with_update_cm1();
}

void netbufferv4Client::send_access_cm1_tbl_table_add_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_add_with_update_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_add_with_update_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_table_add_with_update_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_add_with_update_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_table_add_with_update_cm1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_table_add_with_update_cm1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm1_tbl_table_add_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_add_with_initialize_cm1_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm1_tbl_table_add_with_initialize_cm1_predicate();
}

void netbufferv4Client::send_access_cm1_tbl_table_add_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_add_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_add_with_initialize_cm1_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm1_tbl_table_add_with_initialize_cm1_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_add_with_initialize_cm1_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm1_tbl_table_add_with_initialize_cm1_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm1_tbl_table_add_with_initialize_cm1_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_table_add_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_add_with_update_cm2(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm2_tbl_table_add_with_update_cm2();
}

void netbufferv4Client::send_access_cm2_tbl_table_add_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_add_with_update_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_add_with_update_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_table_add_with_update_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_add_with_update_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_table_add_with_update_cm2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_table_add_with_update_cm2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm2_tbl_table_add_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_add_with_initialize_cm2_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm2_tbl_table_add_with_initialize_cm2_predicate();
}

void netbufferv4Client::send_access_cm2_tbl_table_add_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_add_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_add_with_initialize_cm2_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm2_tbl_table_add_with_initialize_cm2_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_add_with_initialize_cm2_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm2_tbl_table_add_with_initialize_cm2_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm2_tbl_table_add_with_initialize_cm2_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_table_add_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_add_with_update_cm3(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm3_tbl_table_add_with_update_cm3();
}

void netbufferv4Client::send_access_cm3_tbl_table_add_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_add_with_update_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_add_with_update_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_table_add_with_update_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_add_with_update_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_table_add_with_update_cm3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_table_add_with_update_cm3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm3_tbl_table_add_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_add_with_initialize_cm3_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm3_tbl_table_add_with_initialize_cm3_predicate();
}

void netbufferv4Client::send_access_cm3_tbl_table_add_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_add_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_add_with_initialize_cm3_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm3_tbl_table_add_with_initialize_cm3_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_add_with_initialize_cm3_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm3_tbl_table_add_with_initialize_cm3_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm3_tbl_table_add_with_initialize_cm3_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_table_add_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_add_with_update_cm4(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm4_tbl_table_add_with_update_cm4();
}

void netbufferv4Client::send_access_cm4_tbl_table_add_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_add_with_update_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_add_with_update_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_table_add_with_update_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_add_with_update_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_table_add_with_update_cm4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_table_add_with_update_cm4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_cm4_tbl_table_add_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_add_with_initialize_cm4_predicate(sess_hdl, dev_tgt, match_spec);
  return recv_access_cm4_tbl_table_add_with_initialize_cm4_predicate();
}

void netbufferv4Client::send_access_cm4_tbl_table_add_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_add_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_add_with_initialize_cm4_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_cm4_tbl_table_add_with_initialize_cm4_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_add_with_initialize_cm4_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_cm4_tbl_table_add_with_initialize_cm4_predicate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_cm4_tbl_table_add_with_initialize_cm4_predicate failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_get_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_get_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_get_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_set_and_get_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_set_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_set_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_set_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_set_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_set_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_set_and_get_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_set_and_get_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_reset_and_get_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_reset_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_reset_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_reset_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_reset_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_reset_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_reset_and_get_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_reset_and_get_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_deleted_tbl_table_add_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_add_with_reset_is_deleted(sess_hdl, dev_tgt, match_spec);
  return recv_access_deleted_tbl_table_add_with_reset_is_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_add_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_add_with_reset_is_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_add_with_reset_is_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_deleted_tbl_table_add_with_reset_is_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_add_with_reset_is_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_deleted_tbl_table_add_with_reset_is_deleted_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_deleted_tbl_table_add_with_reset_is_deleted failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_get_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_get_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_get_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_set_and_get_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_set_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_set_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_set_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_set_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_set_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_set_and_get_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_set_and_get_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_reset_and_get_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_reset_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_reset_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_reset_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_reset_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_reset_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_reset_and_get_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_reset_and_get_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_latest_tbl_table_add_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_add_with_reset_is_latest(sess_hdl, dev_tgt, match_spec);
  return recv_access_latest_tbl_table_add_with_reset_is_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_add_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_add_with_reset_is_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_add_with_reset_is_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_latest_tbl_table_add_with_reset_is_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_add_with_reset_is_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_latest_tbl_table_add_with_reset_is_latest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_latest_tbl_table_add_with_reset_is_latest failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_add_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_add_with_get_savedseq(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_table_add_with_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_add_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_add_with_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_add_with_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_add_with_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_add_with_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_add_with_get_savedseq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_add_with_get_savedseq failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_add_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_add_with_set_and_get_savedseq(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_table_add_with_set_and_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_add_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_add_with_set_and_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_add_with_set_and_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_add_with_set_and_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_add_with_set_and_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_add_with_set_and_get_savedseq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_add_with_set_and_get_savedseq failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_savedseq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_access_savedseq_tbl_table_add_with_nop();
}

void netbufferv4Client::send_access_savedseq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_savedseq_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_savedseq_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_savedseq_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_table_add_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_add_with_assign_seq(sess_hdl, dev_tgt, match_spec);
  return recv_access_seq_tbl_table_add_with_assign_seq();
}

void netbufferv4Client::send_access_seq_tbl_table_add_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_add_with_assign_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_add_with_assign_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_table_add_with_assign_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_add_with_assign_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_table_add_with_assign_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_table_add_with_assign_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_access_seq_tbl_table_add_with_nop();
}

void netbufferv4Client::send_access_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_seq_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_seq_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_seq_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_add_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_add_with_get_validvalue(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_table_add_with_get_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_add_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_add_with_get_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_add_with_get_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_add_with_get_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_add_with_get_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_add_with_get_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_add_with_get_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_add_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_add_with_set_validvalue(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_table_add_with_set_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_add_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_add_with_set_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_add_with_set_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_add_with_set_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_add_with_set_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_add_with_set_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_add_with_set_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::access_validvalue_tbl_table_add_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_add_with_reset_meta_validvalue(sess_hdl, dev_tgt, match_spec);
  return recv_access_validvalue_tbl_table_add_with_reset_meta_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_add_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_add_with_reset_meta_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_add_with_reset_meta_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_access_validvalue_tbl_table_add_with_reset_meta_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_add_with_reset_meta_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_access_validvalue_tbl_table_add_with_reset_meta_validvalue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "access_validvalue_tbl_table_add_with_reset_meta_validvalue failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_only_vallen(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_only_vallen();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_only_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_only_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_only_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_only_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_only_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_only_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val1(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val1();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val2(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val2();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val3(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val3();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val4(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val4();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val5(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val5();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val6(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val6();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val7(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val7();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val8(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val8();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val9(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val9();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val10(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val10();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val11(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val11();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val12(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val12();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val13(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val13();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val14(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val14();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val15(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val15();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_add_to_val16(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_add_to_val16();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_add_to_val16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_add_to_val16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_add_to_val16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_add_to_val16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_add_to_val16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::add_and_remove_value_header_tbl_table_add_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_add_with_remove_all(sess_hdl, dev_tgt, match_spec, priority);
  return recv_add_and_remove_value_header_tbl_table_add_with_remove_all();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_add_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_add_with_remove_all", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_add_with_remove_all_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_add_and_remove_value_header_tbl_table_add_with_remove_all()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_add_with_remove_all") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_add_and_remove_value_header_tbl_table_add_with_remove_all_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "add_and_remove_value_header_tbl_table_add_with_remove_all failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_table_add_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  send_cache_lookup_tbl_table_add_with_cached_action(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_cache_lookup_tbl_table_add_with_cached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_add_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_add_with_cached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_add_with_cached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_table_add_with_cached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_add_with_cached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_table_add_with_cached_action_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_table_add_with_cached_action failed: unknown result");
}

EntryHandle_t netbufferv4Client::cache_lookup_tbl_table_add_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_table_add_with_uncached_action(sess_hdl, dev_tgt, match_spec);
  return recv_cache_lookup_tbl_table_add_with_uncached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_add_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_add_with_uncached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_add_with_uncached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_cache_lookup_tbl_table_add_with_uncached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_add_with_uncached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_cache_lookup_tbl_table_add_with_uncached_action_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "cache_lookup_tbl_table_add_with_uncached_action failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_add_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_add_with_drop_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_add_with_drop_getres_latest_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_add_with_drop_getres_latest_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_add_with_drop_getres_deleted_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::drop_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_drop_tbl_table_add_with_nop();
}

void netbufferv4Client::send_drop_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_drop_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_drop_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "drop_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_pop failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getreq_nlatest failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getreq_inswitch_to_getres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_seq_case3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_putreq_inswitch_to_putreq_pop_seq_case3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_delreq_inswitch_to_delreq_seq_case3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_scanreq_split_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_forward_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_forward_scanreq_split(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_forward_scanreq_split();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_forward_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_forward_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_forward_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_forward_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_forward_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_forward_scanreq_split_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_forward_scanreq_split failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone failed: unknown result");
}

EntryHandle_t netbufferv4Client::eg_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_eg_port_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_eg_port_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_eg_port_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "eg_port_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_table_add_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_add_with_hash_for_cm1(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm1_tbl_table_add_with_hash_for_cm1();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_add_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_add_with_hash_for_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_add_with_hash_for_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_table_add_with_hash_for_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_add_with_hash_for_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_table_add_with_hash_for_cm1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_table_add_with_hash_for_cm1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm1_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm1_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm1_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm1_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_table_add_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_add_with_hash_for_cm2(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm2_tbl_table_add_with_hash_for_cm2();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_add_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_add_with_hash_for_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_add_with_hash_for_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_table_add_with_hash_for_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_add_with_hash_for_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_table_add_with_hash_for_cm2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_table_add_with_hash_for_cm2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm2_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm2_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm2_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm2_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_table_add_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_add_with_hash_for_cm3(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm3_tbl_table_add_with_hash_for_cm3();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_add_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_add_with_hash_for_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_add_with_hash_for_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_table_add_with_hash_for_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_add_with_hash_for_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_table_add_with_hash_for_cm3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_table_add_with_hash_for_cm3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm3_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm3_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm3_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm3_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_table_add_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_add_with_hash_for_cm4(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm4_tbl_table_add_with_hash_for_cm4();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_add_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_add_with_hash_for_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_add_with_hash_for_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_table_add_with_hash_for_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_add_with_hash_for_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_table_add_with_hash_for_cm4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_table_add_with_hash_for_cm4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_cm4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_cm4_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_cm4_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_cm4_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_cm4_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_table_add_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_add_with_hash_for_seq(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_seq_tbl_table_add_with_hash_for_seq();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_add_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_add_with_hash_for_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_add_with_hash_for_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_table_add_with_hash_for_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_add_with_hash_for_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_table_add_with_hash_for_seq_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_table_add_with_hash_for_seq failed: unknown result");
}

EntryHandle_t netbufferv4Client::hash_for_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_hash_for_seq_tbl_table_add_with_nop();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_hash_for_seq_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_hash_for_seq_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "hash_for_seq_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_getreq_to_getreq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_getres_latest_seq_to_getres_latest_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_putreq_to_putreq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_delreq_to_delreq_inswitch failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_update_scanreq_to_scanreq_split failed: unknown result");
}

EntryHandle_t netbufferv4Client::ig_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_ig_port_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ig_port_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ig_port_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ig_port_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_add_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_add_with_forward_normal_response(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_ipv4_forward_tbl_table_add_with_forward_normal_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_add_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_normal_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_normal_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_add_with_forward_normal_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_add_with_forward_normal_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_add_with_forward_normal_response_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_add_with_forward_normal_response failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_add_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_add_with_forward_special_get_response(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_ipv4_forward_tbl_table_add_with_forward_special_get_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_add_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_add_with_forward_special_get_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_add_with_forward_special_get_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_add_with_forward_special_get_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_add_with_forward_special_get_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_add_with_forward_special_get_response_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_add_with_forward_special_get_response failed: unknown result");
}

EntryHandle_t netbufferv4Client::ipv4_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_ipv4_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_ipv4_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_ipv4_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "ipv4_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_table_add_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_add_with_set_is_hot(sess_hdl, dev_tgt, match_spec);
  return recv_is_hot_tbl_table_add_with_set_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_add_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_add_with_set_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_add_with_set_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_table_add_with_set_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_add_with_set_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_table_add_with_set_is_hot_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_table_add_with_set_is_hot failed: unknown result");
}

EntryHandle_t netbufferv4Client::is_hot_tbl_table_add_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_add_with_reset_is_hot(sess_hdl, dev_tgt, match_spec);
  return recv_is_hot_tbl_table_add_with_reset_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_add_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_add_with_reset_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_add_with_reset_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_is_hot_tbl_table_add_with_reset_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_add_with_reset_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_is_hot_tbl_table_add_with_reset_is_hot_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "is_hot_tbl_table_add_with_reset_is_hot failed: unknown result");
}

EntryHandle_t netbufferv4Client::l2l3_forward_tbl_table_add_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  send_l2l3_forward_tbl_table_add_with_l2l3_forward(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_l2l3_forward_tbl_table_add_with_l2l3_forward();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_add_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_add_with_l2l3_forward", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_add_with_l2l3_forward_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_l2l3_forward_tbl_table_add_with_l2l3_forward()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_add_with_l2l3_forward") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_l2l3_forward_tbl_table_add_with_l2l3_forward_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "l2l3_forward_tbl_table_add_with_l2l3_forward failed: unknown result");
}

EntryHandle_t netbufferv4Client::l2l3_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_l2l3_forward_tbl_table_add_with_nop();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_l2l3_forward_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_l2l3_forward_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "l2l3_forward_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_add_with_set_is_lastclone failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_add_with_set_is_lastscansplit failed: unknown result");
}

EntryHandle_t netbufferv4Client::lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(sess_hdl, dev_tgt, match_spec);
  return recv_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "lastclone_lastscansplit_tbl_table_add_with_reset_is_lastclone_lastscansplit failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_table_add_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_add_with_set_need_recirculate(sess_hdl, dev_tgt, match_spec);
  return recv_need_recirculate_tbl_table_add_with_set_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_add_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_add_with_set_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_add_with_set_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_table_add_with_set_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_add_with_set_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_table_add_with_set_need_recirculate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_table_add_with_set_need_recirculate failed: unknown result");
}

EntryHandle_t netbufferv4Client::need_recirculate_tbl_table_add_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_add_with_reset_need_recirculate(sess_hdl, dev_tgt, match_spec);
  return recv_need_recirculate_tbl_table_add_with_reset_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_add_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_add_with_reset_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_add_with_reset_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_need_recirculate_tbl_table_add_with_reset_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_add_with_reset_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_need_recirculate_tbl_table_add_with_reset_need_recirculate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "need_recirculate_tbl_table_add_with_reset_need_recirculate failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_table_add_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_table_add_with_set_client_sid(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_prepare_for_cachehit_tbl_table_add_with_set_client_sid();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_add_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_set_client_sid", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_set_client_sid_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_table_add_with_set_client_sid()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_add_with_set_client_sid") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_table_add_with_set_client_sid_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_table_add_with_set_client_sid failed: unknown result");
}

EntryHandle_t netbufferv4Client::prepare_for_cachehit_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_prepare_for_cachehit_tbl_table_add_with_nop();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_prepare_for_cachehit_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_prepare_for_cachehit_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "prepare_for_cachehit_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::process_scanreq_split_tbl_table_add_with_process_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_scanreq_split_action_spec_t& action_spec)
{
  send_process_scanreq_split_tbl_table_add_with_process_scanreq_split(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_process_scanreq_split_tbl_table_add_with_process_scanreq_split();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_add_with_process_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_scanreq_split_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_add_with_process_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_add_with_process_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_process_scanreq_split_tbl_table_add_with_process_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_add_with_process_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_process_scanreq_split_tbl_table_add_with_process_scanreq_split_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "process_scanreq_split_tbl_table_add_with_process_scanreq_split failed: unknown result");
}

EntryHandle_t netbufferv4Client::process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_cloned_scanreq_split_action_spec_t& action_spec)
{
  send_process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_cloned_scanreq_split_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "process_scanreq_split_tbl_table_add_with_process_cloned_scanreq_split failed: unknown result");
}

EntryHandle_t netbufferv4Client::process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  send_process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum(sess_hdl, dev_tgt, match_spec);
  return recv_process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "process_scanreq_split_tbl_table_add_with_reset_meta_serversid_remainscannum failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& action_spec)
{
  send_range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_for_scan_endkey_tbl_table_add_with_range_partition_for_scan_endkey failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_for_scan_endkey_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_for_scan_endkey_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec, priority);
  return recv_range_partition_for_scan_endkey_tbl_table_add_with_nop();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_for_scan_endkey_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_for_scan_endkey_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_tbl_table_add_with_range_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_action_spec_t& action_spec)
{
  send_range_partition_tbl_table_add_with_range_partition(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_range_partition_tbl_table_add_with_range_partition();
}

void netbufferv4Client::send_range_partition_tbl_table_add_with_range_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_add_with_range_partition", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_add_with_range_partition_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_tbl_table_add_with_range_partition()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_add_with_range_partition") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_tbl_table_add_with_range_partition_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_tbl_table_add_with_range_partition failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_tbl_table_add_with_range_partition_for_scan(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_action_spec_t& action_spec)
{
  send_range_partition_tbl_table_add_with_range_partition_for_scan(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_range_partition_tbl_table_add_with_range_partition_for_scan();
}

void netbufferv4Client::send_range_partition_tbl_table_add_with_range_partition_for_scan(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_add_with_range_partition_for_scan", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_add_with_range_partition_for_scan_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_tbl_table_add_with_range_partition_for_scan()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_add_with_range_partition_for_scan") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_tbl_table_add_with_range_partition_for_scan_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_tbl_table_add_with_range_partition_for_scan failed: unknown result");
}

EntryHandle_t netbufferv4Client::range_partition_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec, priority);
  return recv_range_partition_tbl_table_add_with_nop();
}

void netbufferv4Client::send_range_partition_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_range_partition_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_range_partition_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "range_partition_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_table_add_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  send_recirculate_tbl_table_add_with_recirculate_pkt(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_recirculate_tbl_table_add_with_recirculate_pkt();
}

void netbufferv4Client::send_recirculate_tbl_table_add_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_add_with_recirculate_pkt", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_add_with_recirculate_pkt_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_table_add_with_recirculate_pkt()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_add_with_recirculate_pkt") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_table_add_with_recirculate_pkt_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_table_add_with_recirculate_pkt failed: unknown result");
}

EntryHandle_t netbufferv4Client::recirculate_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_recirculate_tbl_table_add_with_nop();
}

void netbufferv4Client::send_recirculate_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_recirculate_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_recirculate_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "recirculate_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_table_add_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_add_with_sample(sess_hdl, dev_tgt, match_spec);
  return recv_sample_tbl_table_add_with_sample();
}

void netbufferv4Client::send_sample_tbl_table_add_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_add_with_sample", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_add_with_sample_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_table_add_with_sample()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_add_with_sample") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_table_add_with_sample_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_table_add_with_sample failed: unknown result");
}

EntryHandle_t netbufferv4Client::sample_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_sample_tbl_table_add_with_nop();
}

void netbufferv4Client::send_sample_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_sample_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_sample_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sample_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_table_add_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_add_with_save_client_udpport(sess_hdl, dev_tgt, match_spec);
  return recv_save_client_udpport_tbl_table_add_with_save_client_udpport();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_add_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_add_with_save_client_udpport", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_add_with_save_client_udpport_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_table_add_with_save_client_udpport()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_add_with_save_client_udpport") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_table_add_with_save_client_udpport_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_table_add_with_save_client_udpport failed: unknown result");
}

EntryHandle_t netbufferv4Client::save_client_udpport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_save_client_udpport_tbl_table_add_with_nop();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_save_client_udpport_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_save_client_udpport_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "save_client_udpport_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_table_add_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_add_with_set_snapshot_flag(sess_hdl, dev_tgt, match_spec);
  return recv_snapshot_flag_tbl_table_add_with_set_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_add_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_add_with_set_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_add_with_set_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_table_add_with_set_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_add_with_set_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_table_add_with_set_snapshot_flag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_table_add_with_set_snapshot_flag failed: unknown result");
}

EntryHandle_t netbufferv4Client::snapshot_flag_tbl_table_add_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_add_with_reset_snapshot_flag(sess_hdl, dev_tgt, match_spec);
  return recv_snapshot_flag_tbl_table_add_with_reset_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_add_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_add_with_reset_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_add_with_reset_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_snapshot_flag_tbl_table_add_with_reset_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_add_with_reset_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_snapshot_flag_tbl_table_add_with_reset_snapshot_flag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "snapshot_flag_tbl_table_add_with_reset_snapshot_flag failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_server2client failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_update_ipmac_srcport_switch2switchos failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(sess_hdl, dev_tgt, match_spec, action_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_update_dstipmac_client2server failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_ipmac_srcport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_ipmac_srcport_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_ipmac_srcport_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_ipmac_srcport_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_ipmac_srcport_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_table_add_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  send_update_pktlen_tbl_table_add_with_update_pktlen(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  return recv_update_pktlen_tbl_table_add_with_update_pktlen();
}

void netbufferv4Client::send_update_pktlen_tbl_table_add_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_add_with_update_pktlen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_add_with_update_pktlen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_table_add_with_update_pktlen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_add_with_update_pktlen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_table_add_with_update_pktlen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_table_add_with_update_pktlen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_pktlen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec, priority);
  return recv_update_pktlen_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_pktlen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_pktlen_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_pktlen_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_pktlen_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_get_valhi10(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_get_valhi10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_get_valhi10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_set_and_get_valhi10(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_set_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_set_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_set_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_set_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_set_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_set_and_get_valhi10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_set_and_get_valhi10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_reset_and_get_valhi10(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_reset_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_reset_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_reset_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_reset_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_reset_and_get_valhi10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_reset_and_get_valhi10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi10_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi10_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi10_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi10_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_get_valhi11(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_get_valhi11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_get_valhi11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_set_and_get_valhi11(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_set_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_set_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_set_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_set_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_set_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_set_and_get_valhi11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_set_and_get_valhi11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_reset_and_get_valhi11(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_reset_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_reset_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_reset_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_reset_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_reset_and_get_valhi11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_reset_and_get_valhi11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi11_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi11_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi11_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi11_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_get_valhi12(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_get_valhi12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_get_valhi12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_set_and_get_valhi12(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_set_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_set_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_set_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_set_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_set_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_set_and_get_valhi12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_set_and_get_valhi12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_reset_and_get_valhi12(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_reset_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_reset_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_reset_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_reset_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_reset_and_get_valhi12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_reset_and_get_valhi12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi12_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi12_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi12_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi12_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_get_valhi13(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_get_valhi13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_get_valhi13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_set_and_get_valhi13(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_set_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_set_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_set_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_set_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_set_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_set_and_get_valhi13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_set_and_get_valhi13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_reset_and_get_valhi13(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_reset_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_reset_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_reset_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_reset_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_reset_and_get_valhi13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_reset_and_get_valhi13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi13_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi13_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi13_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi13_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_get_valhi14(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_get_valhi14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_get_valhi14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_set_and_get_valhi14(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_set_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_set_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_set_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_set_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_set_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_set_and_get_valhi14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_set_and_get_valhi14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_reset_and_get_valhi14(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_reset_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_reset_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_reset_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_reset_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_reset_and_get_valhi14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_reset_and_get_valhi14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi14_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi14_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi14_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi14_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_get_valhi15(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_get_valhi15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_get_valhi15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_set_and_get_valhi15(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_set_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_set_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_set_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_set_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_set_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_set_and_get_valhi15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_set_and_get_valhi15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_reset_and_get_valhi15(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_reset_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_reset_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_reset_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_reset_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_reset_and_get_valhi15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_reset_and_get_valhi15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi15_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi15_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi15_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi15_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_get_valhi16(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_get_valhi16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_get_valhi16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_set_and_get_valhi16(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_set_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_set_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_set_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_set_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_set_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_set_and_get_valhi16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_set_and_get_valhi16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_reset_and_get_valhi16(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_reset_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_reset_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_reset_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_reset_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_reset_and_get_valhi16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_reset_and_get_valhi16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi16_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi16_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi16_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi16_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_get_valhi1(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_get_valhi1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_get_valhi1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_set_and_get_valhi1(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_set_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_set_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_set_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_set_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_set_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_set_and_get_valhi1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_set_and_get_valhi1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_reset_and_get_valhi1(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_reset_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_reset_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_reset_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_reset_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_reset_and_get_valhi1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_reset_and_get_valhi1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi1_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi1_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi1_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi1_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_get_valhi2(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_get_valhi2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_get_valhi2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_set_and_get_valhi2(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_set_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_set_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_set_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_set_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_set_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_set_and_get_valhi2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_set_and_get_valhi2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_reset_and_get_valhi2(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_reset_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_reset_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_reset_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_reset_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_reset_and_get_valhi2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_reset_and_get_valhi2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi2_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi2_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi2_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi2_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_get_valhi3(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_get_valhi3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_get_valhi3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_set_and_get_valhi3(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_set_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_set_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_set_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_set_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_set_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_set_and_get_valhi3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_set_and_get_valhi3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_reset_and_get_valhi3(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_reset_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_reset_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_reset_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_reset_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_reset_and_get_valhi3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_reset_and_get_valhi3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi3_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi3_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi3_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi3_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_get_valhi4(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_get_valhi4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_get_valhi4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_set_and_get_valhi4(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_set_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_set_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_set_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_set_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_set_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_set_and_get_valhi4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_set_and_get_valhi4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_reset_and_get_valhi4(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_reset_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_reset_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_reset_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_reset_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_reset_and_get_valhi4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_reset_and_get_valhi4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi4_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi4_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi4_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi4_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_get_valhi5(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_get_valhi5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_get_valhi5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_set_and_get_valhi5(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_set_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_set_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_set_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_set_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_set_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_set_and_get_valhi5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_set_and_get_valhi5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_reset_and_get_valhi5(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_reset_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_reset_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_reset_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_reset_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_reset_and_get_valhi5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_reset_and_get_valhi5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi5_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi5_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi5_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi5_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_get_valhi6(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_get_valhi6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_get_valhi6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_set_and_get_valhi6(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_set_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_set_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_set_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_set_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_set_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_set_and_get_valhi6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_set_and_get_valhi6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_reset_and_get_valhi6(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_reset_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_reset_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_reset_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_reset_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_reset_and_get_valhi6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_reset_and_get_valhi6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi6_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi6_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi6_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi6_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_get_valhi7(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_get_valhi7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_get_valhi7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_set_and_get_valhi7(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_set_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_set_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_set_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_set_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_set_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_set_and_get_valhi7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_set_and_get_valhi7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_reset_and_get_valhi7(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_reset_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_reset_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_reset_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_reset_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_reset_and_get_valhi7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_reset_and_get_valhi7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi7_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi7_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi7_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi7_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_get_valhi8(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_get_valhi8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_get_valhi8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_set_and_get_valhi8(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_set_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_set_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_set_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_set_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_set_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_set_and_get_valhi8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_set_and_get_valhi8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_reset_and_get_valhi8(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_reset_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_reset_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_reset_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_reset_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_reset_and_get_valhi8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_reset_and_get_valhi8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi8_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi8_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi8_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi8_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_get_valhi9(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_get_valhi9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_get_valhi9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_set_and_get_valhi9(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_set_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_set_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_set_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_set_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_set_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_set_and_get_valhi9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_set_and_get_valhi9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_reset_and_get_valhi9(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_reset_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_reset_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_reset_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_reset_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_reset_and_get_valhi9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_reset_and_get_valhi9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_valhi9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_valhi9_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_valhi9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_valhi9_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_valhi9_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_valhi9_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_get_vallen(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_get_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_get_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_set_and_get_vallen(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_set_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_set_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_set_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_set_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_set_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_set_and_get_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_set_and_get_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_reset_and_get_vallen(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_reset_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_reset_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_reset_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_reset_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_reset_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_reset_and_get_vallen_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_reset_and_get_vallen failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_reset_access_val_mode(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_reset_access_val_mode();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_reset_access_val_mode", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_reset_access_val_mode_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_reset_access_val_mode()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_reset_access_val_mode") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_reset_access_val_mode_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_reset_access_val_mode failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallen_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallen_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallen_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallen_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallen_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_get_vallo10(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_get_vallo10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_get_vallo10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_set_and_get_vallo10(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_set_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_set_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_set_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_set_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_set_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_set_and_get_vallo10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_set_and_get_vallo10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_reset_and_get_vallo10(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_reset_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_reset_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_reset_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_reset_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_reset_and_get_vallo10_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_reset_and_get_vallo10 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo10_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo10_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo10_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo10_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo10_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_get_vallo11(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_get_vallo11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_get_vallo11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_set_and_get_vallo11(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_set_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_set_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_set_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_set_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_set_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_set_and_get_vallo11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_set_and_get_vallo11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_reset_and_get_vallo11(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_reset_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_reset_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_reset_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_reset_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_reset_and_get_vallo11_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_reset_and_get_vallo11 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo11_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo11_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo11_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo11_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo11_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_get_vallo12(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_get_vallo12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_get_vallo12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_set_and_get_vallo12(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_set_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_set_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_set_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_set_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_set_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_set_and_get_vallo12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_set_and_get_vallo12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_reset_and_get_vallo12(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_reset_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_reset_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_reset_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_reset_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_reset_and_get_vallo12_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_reset_and_get_vallo12 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo12_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo12_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo12_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo12_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo12_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_get_vallo13(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_get_vallo13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_get_vallo13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_set_and_get_vallo13(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_set_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_set_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_set_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_set_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_set_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_set_and_get_vallo13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_set_and_get_vallo13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_reset_and_get_vallo13(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_reset_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_reset_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_reset_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_reset_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_reset_and_get_vallo13_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_reset_and_get_vallo13 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo13_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo13_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo13_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo13_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo13_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_get_vallo14(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_get_vallo14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_get_vallo14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_set_and_get_vallo14(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_set_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_set_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_set_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_set_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_set_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_set_and_get_vallo14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_set_and_get_vallo14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_reset_and_get_vallo14(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_reset_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_reset_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_reset_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_reset_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_reset_and_get_vallo14_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_reset_and_get_vallo14 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo14_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo14_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo14_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo14_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo14_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_get_vallo15(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_get_vallo15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_get_vallo15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_set_and_get_vallo15(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_set_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_set_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_set_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_set_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_set_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_set_and_get_vallo15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_set_and_get_vallo15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_reset_and_get_vallo15(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_reset_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_reset_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_reset_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_reset_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_reset_and_get_vallo15_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_reset_and_get_vallo15 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo15_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo15_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo15_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo15_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo15_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_get_vallo16(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_get_vallo16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_get_vallo16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_set_and_get_vallo16(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_set_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_set_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_set_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_set_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_set_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_set_and_get_vallo16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_set_and_get_vallo16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_reset_and_get_vallo16(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_reset_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_reset_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_reset_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_reset_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_reset_and_get_vallo16_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_reset_and_get_vallo16 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo16_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo16_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo16_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo16_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo16_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_get_vallo1(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_get_vallo1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_get_vallo1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_set_and_get_vallo1(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_set_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_set_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_set_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_set_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_set_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_set_and_get_vallo1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_set_and_get_vallo1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_reset_and_get_vallo1(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_reset_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_reset_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_reset_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_reset_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_reset_and_get_vallo1_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_reset_and_get_vallo1 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo1_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo1_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo1_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo1_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo1_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_get_vallo2(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_get_vallo2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_get_vallo2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_set_and_get_vallo2(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_set_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_set_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_set_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_set_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_set_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_set_and_get_vallo2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_set_and_get_vallo2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_reset_and_get_vallo2(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_reset_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_reset_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_reset_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_reset_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_reset_and_get_vallo2_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_reset_and_get_vallo2 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo2_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo2_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo2_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo2_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo2_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_get_vallo3(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_get_vallo3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_get_vallo3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_set_and_get_vallo3(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_set_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_set_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_set_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_set_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_set_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_set_and_get_vallo3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_set_and_get_vallo3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_reset_and_get_vallo3(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_reset_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_reset_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_reset_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_reset_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_reset_and_get_vallo3_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_reset_and_get_vallo3 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo3_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo3_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo3_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo3_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo3_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_get_vallo4(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_get_vallo4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_get_vallo4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_set_and_get_vallo4(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_set_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_set_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_set_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_set_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_set_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_set_and_get_vallo4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_set_and_get_vallo4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_reset_and_get_vallo4(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_reset_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_reset_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_reset_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_reset_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_reset_and_get_vallo4_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_reset_and_get_vallo4 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo4_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo4_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo4_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo4_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo4_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_get_vallo5(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_get_vallo5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_get_vallo5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_set_and_get_vallo5(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_set_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_set_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_set_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_set_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_set_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_set_and_get_vallo5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_set_and_get_vallo5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_reset_and_get_vallo5(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_reset_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_reset_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_reset_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_reset_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_reset_and_get_vallo5_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_reset_and_get_vallo5 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo5_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo5_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo5_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo5_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo5_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_get_vallo6(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_get_vallo6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_get_vallo6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_set_and_get_vallo6(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_set_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_set_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_set_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_set_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_set_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_set_and_get_vallo6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_set_and_get_vallo6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_reset_and_get_vallo6(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_reset_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_reset_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_reset_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_reset_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_reset_and_get_vallo6_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_reset_and_get_vallo6 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo6_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo6_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo6_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo6_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo6_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_get_vallo7(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_get_vallo7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_get_vallo7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_set_and_get_vallo7(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_set_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_set_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_set_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_set_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_set_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_set_and_get_vallo7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_set_and_get_vallo7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_reset_and_get_vallo7(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_reset_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_reset_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_reset_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_reset_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_reset_and_get_vallo7_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_reset_and_get_vallo7 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo7_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo7_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo7_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo7_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo7_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_get_vallo8(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_get_vallo8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_get_vallo8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_set_and_get_vallo8(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_set_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_set_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_set_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_set_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_set_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_set_and_get_vallo8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_set_and_get_vallo8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_reset_and_get_vallo8(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_reset_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_reset_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_reset_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_reset_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_reset_and_get_vallo8_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_reset_and_get_vallo8 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo8_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo8_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo8_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo8_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo8_tbl_table_add_with_nop failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_get_vallo9(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_get_vallo9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_get_vallo9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_set_and_get_vallo9(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_set_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_set_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_set_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_set_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_set_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_set_and_get_vallo9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_set_and_get_vallo9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_reset_and_get_vallo9(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_reset_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_reset_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_reset_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_reset_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_reset_and_get_vallo9_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_reset_and_get_vallo9 failed: unknown result");
}

EntryHandle_t netbufferv4Client::update_vallo9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_add_with_nop(sess_hdl, dev_tgt, match_spec);
  return recv_update_vallo9_tbl_table_add_with_nop();
}

void netbufferv4Client::send_update_vallo9_tbl_table_add_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_add_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_add_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

EntryHandle_t netbufferv4Client::recv_update_vallo9_tbl_table_add_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_add_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  EntryHandle_t _return;
  netbufferv4_update_vallo9_tbl_table_add_with_nop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ouch) {
    throw result.ouch;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "update_vallo9_tbl_table_add_with_nop failed: unknown result");
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_get_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_get_cache_frequency_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_update_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_update_cache_frequency_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_reset_cache_frequency_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_modify_with_try_case1(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_modify_with_try_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_try_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_try_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_try_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_try_case1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_try_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_modify_with_try_case1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_modify_with_try_case1_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_try_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_try_case1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_try_case1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_try_case1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_try_case1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_try_case1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_modify_with_read_case1(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_modify_with_read_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_read_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_read_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_read_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_read_case1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_read_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_modify_with_read_case1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_modify_with_read_case1_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_read_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_read_case1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_read_case1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_read_case1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_read_case1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_read_case1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_modify_with_reset_is_case1(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_modify_with_reset_is_case1();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_reset_is_case1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_reset_is_case1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_reset_is_case1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_modify_with_reset_is_case1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm1_tbl_table_modify_with_update_cm1(sess_hdl, dev_id, entry);
  recv_access_cm1_tbl_table_modify_with_update_cm1();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_update_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_update_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_update_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_update_cm1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_update_cm1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_update_cm1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate(sess_hdl, dev_id, entry);
  recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_initialize_cm1_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_modify_with_initialize_cm1_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm2_tbl_table_modify_with_update_cm2(sess_hdl, dev_id, entry);
  recv_access_cm2_tbl_table_modify_with_update_cm2();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_update_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_update_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_update_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_update_cm2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_update_cm2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_update_cm2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate(sess_hdl, dev_id, entry);
  recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_initialize_cm2_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_modify_with_initialize_cm2_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm3_tbl_table_modify_with_update_cm3(sess_hdl, dev_id, entry);
  recv_access_cm3_tbl_table_modify_with_update_cm3();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_update_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_update_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_update_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_update_cm3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_update_cm3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_update_cm3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate(sess_hdl, dev_id, entry);
  recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_initialize_cm3_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_modify_with_initialize_cm3_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm4_tbl_table_modify_with_update_cm4(sess_hdl, dev_id, entry);
  recv_access_cm4_tbl_table_modify_with_update_cm4();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_update_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_update_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_update_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_update_cm4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_update_cm4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_update_cm4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate(sess_hdl, dev_id, entry);
  recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_initialize_cm4_predicate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec();
}

void netbufferv4Client::send_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_modify_with_initialize_cm4_predicate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_get_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_get_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_get_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_get_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_set_and_get_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_set_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_set_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_set_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_set_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_set_and_get_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_reset_and_get_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_and_get_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_and_get_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_and_get_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_modify_with_reset_is_deleted(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_modify_with_reset_is_deleted();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_is_deleted(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_is_deleted()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_is_deleted") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_modify_with_reset_is_deleted_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_get_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_get_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_get_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_get_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_get_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_get_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_get_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_get_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_get_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_set_and_get_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_set_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_set_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_set_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_set_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_set_and_get_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_reset_and_get_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_reset_and_get_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_and_get_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_and_get_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_and_get_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_and_get_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_modify_with_reset_is_latest(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_modify_with_reset_is_latest();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_is_latest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_is_latest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_is_latest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_modify_with_reset_is_latest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_modify_with_get_savedseq(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_modify_with_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_get_savedseq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_set_and_get_savedseq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_set_and_get_savedseq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_seq_tbl_table_modify_with_assign_seq(sess_hdl, dev_id, entry);
  recv_access_seq_tbl_table_modify_with_assign_seq();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_assign_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_assign_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_assign_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_assign_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_modify_with_assign_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_seq_tbl_table_modify_with_assign_seq_by_match_spec();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_assign_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_assign_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_assign_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_assign_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_assign_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_seq_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_access_seq_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_seq_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_access_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_modify_with_get_validvalue(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_modify_with_get_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_get_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_get_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_get_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_get_validvalue_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_modify_with_set_validvalue(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_modify_with_set_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_set_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_set_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_set_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_set_validvalue_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_reset_meta_validvalue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_modify_with_reset_meta_validvalue_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_only_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_add_to_val16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_modify_with_remove_all(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_modify_with_remove_all();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_remove_all(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_remove_all()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_remove_all") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_modify_with_remove_all_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  send_cache_lookup_tbl_table_modify_with_cached_action(sess_hdl, dev_id, entry, action_spec);
  recv_cache_lookup_tbl_table_modify_with_cached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_cached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_cached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_cached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  send_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec, const netbufferv4_cached_action_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_cached_action_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_cached_action_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_cached_action_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_cache_lookup_tbl_table_modify_with_uncached_action(sess_hdl, dev_id, entry);
  recv_cache_lookup_tbl_table_modify_with_uncached_action();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_uncached_action(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_uncached_action()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_uncached_action") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec();
}

void netbufferv4Client::send_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_modify_with_uncached_action_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_latest_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_drop_getres_deleted_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_pop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getreq_nlatest_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getreq_inswitch_to_getres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getreq_inswitch_to_getres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_latest_seq_inswitch_to_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_latest_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_getres_deleted_seq_inswitch_to_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_getres_deleted_seq_inswitch_case1_clone_for_pktloss_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_pop_inswitch_to_cache_pop_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_putreq_seq_inswitch_case1_clone_for_pktloss_and_putres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_seq_inswitch_case1_to_putres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_seq_case3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_putreq_inswitch_to_putreq_pop_seq_case3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_delreq_seq_inswitch_case1_clone_for_pktloss_and_delres_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_seq_inswitch_case1_to_delres_by_mirroring_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_delreq_inswitch_to_delreq_seq_case3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_scanreq_split_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_forward_scanreq_split_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loadfreq_inswitch_to_cache_evict_loadfreq_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_cache_evict_loaddata_inswitch_to_cache_evict_loaddata_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_loadsnapshotdata_inswitch_to_loadsnapshotdata_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(sess_hdl, dev_id, entry, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec, const netbufferv4_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_update_setvalid_inswitch_to_setvalid_inswitch_ack_drop_and_clone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1(sess_hdl, dev_id, entry);
  recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_hash_for_cm1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_hash_for_cm1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm1_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm1_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2(sess_hdl, dev_id, entry);
  recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_hash_for_cm2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_hash_for_cm2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm2_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm2_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3(sess_hdl, dev_id, entry);
  recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_hash_for_cm3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_hash_for_cm3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm3_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm3_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4(sess_hdl, dev_id, entry);
  recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_hash_for_cm4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_hash_for_cm4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm4_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_cm4_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_seq_tbl_table_modify_with_hash_for_seq(sess_hdl, dev_id, entry);
  recv_hash_for_seq_tbl_table_modify_with_hash_for_seq();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_hash_for_seq(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_hash_for_seq()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_hash_for_seq") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_hash_for_seq_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_seq_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_hash_for_seq_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_seq_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getreq_to_getreq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_latest_seq_to_getres_latest_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_getres_deleted_seq_to_getres_deleted_seq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_putreq_to_putreq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_delreq_to_delreq_inswitch_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_update_scanreq_to_scanreq_split_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_normal_response(sess_hdl, dev_id, entry, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_normal_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_normal_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_normal_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_normal_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_normal_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_normal_response_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_special_get_response(sess_hdl, dev_id, entry, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_special_get_response(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_special_get_response") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  send_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec, const netbufferv4_forward_special_get_response_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_forward_special_get_response_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ipv4_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_ipv4_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ipv4_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_is_hot_tbl_table_modify_with_set_is_hot(sess_hdl, dev_id, entry);
  recv_is_hot_tbl_table_modify_with_set_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_set_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_set_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_set_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_set_is_hot_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_set_is_hot_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_set_is_hot_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_is_hot_tbl_table_modify_with_reset_is_hot(sess_hdl, dev_id, entry);
  recv_is_hot_tbl_table_modify_with_reset_is_hot();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_reset_is_hot(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_reset_is_hot()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_reset_is_hot") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec();
}

void netbufferv4Client::send_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_modify_with_reset_is_hot_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  send_l2l3_forward_tbl_table_modify_with_l2l3_forward(sess_hdl, dev_id, entry, action_spec);
  recv_l2l3_forward_tbl_table_modify_with_l2l3_forward();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_l2l3_forward(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_l2l3_forward", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_l2l3_forward()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_l2l3_forward") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  send_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec, const netbufferv4_l2l3_forward_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_l2l3_forward_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_l2l3_forward_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_l2l3_forward_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_l2l3_forward_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastclone_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_set_is_lastscansplit_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_modify_with_reset_is_lastclone_lastscansplit_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_need_recirculate_tbl_table_modify_with_set_need_recirculate(sess_hdl, dev_id, entry);
  recv_need_recirculate_tbl_table_modify_with_set_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_set_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_set_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_set_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_set_need_recirculate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_need_recirculate_tbl_table_modify_with_reset_need_recirculate(sess_hdl, dev_id, entry);
  recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_reset_need_recirculate(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_reset_need_recirculate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec();
}

void netbufferv4Client::send_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_modify_with_reset_need_recirculate_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid(sess_hdl, dev_id, entry, action_spec);
  recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_set_client_sid") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec, const netbufferv4_set_client_sid_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_set_client_sid_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_prepare_for_cachehit_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_prepare_for_cachehit_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_modify_with_process_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_process_scanreq_split_action_spec_t& action_spec)
{
  send_process_scanreq_split_tbl_table_modify_with_process_scanreq_split(sess_hdl, dev_id, entry, action_spec);
  recv_process_scanreq_split_tbl_table_modify_with_process_scanreq_split();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_modify_with_process_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_process_scanreq_split_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_modify_with_process_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_modify_with_process_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_scanreq_split_action_spec_t& action_spec)
{
  send_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_scanreq_split_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_scanreq_split_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_process_cloned_scanreq_split_action_spec_t& action_spec)
{
  send_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split(sess_hdl, dev_id, entry, action_spec);
  recv_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_process_cloned_scanreq_split_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_cloned_scanreq_split_action_spec_t& action_spec)
{
  send_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec, const netbufferv4_process_cloned_scanreq_split_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_modify_with_process_cloned_scanreq_split_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum(sess_hdl, dev_id, entry);
  recv_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  send_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_modify_with_reset_meta_serversid_remainscannum_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& action_spec)
{
  send_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey(sess_hdl, dev_id, entry, action_spec);
  recv_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& action_spec)
{
  send_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_endkey_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_range_partition_for_scan_endkey_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_for_scan_endkey_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_range_partition_for_scan_endkey_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_range_partition_for_scan_endkey_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_for_scan_endkey_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_modify_with_range_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_range_partition_action_spec_t& action_spec)
{
  send_range_partition_tbl_table_modify_with_range_partition(sess_hdl, dev_id, entry, action_spec);
  recv_range_partition_tbl_table_modify_with_range_partition();
}

void netbufferv4Client::send_range_partition_tbl_table_modify_with_range_partition(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_range_partition_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_modify_with_range_partition()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_modify_with_range_partition") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_modify_with_range_partition_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_modify_with_range_partition_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_action_spec_t& action_spec)
{
  send_range_partition_tbl_table_modify_with_range_partition_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_range_partition_tbl_table_modify_with_range_partition_by_match_spec();
}

void netbufferv4Client::send_range_partition_tbl_table_modify_with_range_partition_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_modify_with_range_partition_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_modify_with_range_partition_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_modify_with_range_partition_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_modify_with_range_partition_for_scan(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_range_partition_for_scan_action_spec_t& action_spec)
{
  send_range_partition_tbl_table_modify_with_range_partition_for_scan(sess_hdl, dev_id, entry, action_spec);
  recv_range_partition_tbl_table_modify_with_range_partition_for_scan();
}

void netbufferv4Client::send_range_partition_tbl_table_modify_with_range_partition_for_scan(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_range_partition_for_scan_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition_for_scan", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_for_scan_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_modify_with_range_partition_for_scan()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_modify_with_range_partition_for_scan") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_modify_with_range_partition_for_scan_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_action_spec_t& action_spec)
{
  send_range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec();
}

void netbufferv4Client::send_range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_range_partition_for_scan_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_modify_with_range_partition_for_scan_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_range_partition_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_range_partition_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_range_partition_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_range_partition_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_range_partition_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  send_recirculate_tbl_table_modify_with_recirculate_pkt(sess_hdl, dev_id, entry, action_spec);
  recv_recirculate_tbl_table_modify_with_recirculate_pkt();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_recirculate_pkt(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_recirculate_pkt()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_recirculate_pkt") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  send_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec, const netbufferv4_recirculate_pkt_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_recirculate_pkt_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_recirculate_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_recirculate_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_recirculate_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_recirculate_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_sample_tbl_table_modify_with_sample(sess_hdl, dev_id, entry);
  recv_sample_tbl_table_modify_with_sample();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_sample(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_sample", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_sample_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_sample()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_sample") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_sample_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_sample_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_modify_with_sample_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_sample_tbl_table_modify_with_sample_by_match_spec();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_sample_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_sample_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_sample_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_sample_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_sample_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_sample_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_sample_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_sample_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_sample_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_sample_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_save_client_udpport_tbl_table_modify_with_save_client_udpport(sess_hdl, dev_id, entry);
  recv_save_client_udpport_tbl_table_modify_with_save_client_udpport();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_save_client_udpport(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_save_client_udpport()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_save_client_udpport") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_save_client_udpport_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_save_client_udpport_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_save_client_udpport_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_save_client_udpport_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag(sess_hdl, dev_id, entry);
  recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_set_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_set_snapshot_flag_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(sess_hdl, dev_id, entry);
  recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_modify_with_reset_snapshot_flag_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(sess_hdl, dev_id, entry, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_server2client_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_server2client_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(sess_hdl, dev_id, entry, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_ipmac_srcport_switch2switchos_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_ipmac_srcport_switch2switchos_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(sess_hdl, dev_id, entry, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(sess_hdl, dev_tgt, match_spec, action_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec, const netbufferv4_update_dstipmac_client2server_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_update_dstipmac_client2server_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_ipmac_srcport_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_ipmac_srcport_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  send_update_pktlen_tbl_table_modify_with_update_pktlen(sess_hdl, dev_id, entry, action_spec);
  recv_update_pktlen_tbl_table_modify_with_update_pktlen();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_update_pktlen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_update_pktlen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_update_pktlen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  send_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(sess_hdl, dev_tgt, match_spec, priority, action_spec);
  recv_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority, const netbufferv4_update_pktlen_action_spec_t& action_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.action_spec = &action_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_update_pktlen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_pktlen_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_pktlen_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_update_pktlen_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_pktlen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_get_valhi10(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_get_valhi10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_set_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_set_and_get_valhi10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_reset_and_get_valhi10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_get_valhi11(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_get_valhi11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_set_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_set_and_get_valhi11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_reset_and_get_valhi11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_get_valhi12(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_get_valhi12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_set_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_set_and_get_valhi12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_reset_and_get_valhi12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_get_valhi13(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_get_valhi13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_set_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_set_and_get_valhi13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_reset_and_get_valhi13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_get_valhi14(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_get_valhi14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_set_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_set_and_get_valhi14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_reset_and_get_valhi14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_get_valhi15(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_get_valhi15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_set_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_set_and_get_valhi15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_reset_and_get_valhi15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_get_valhi16(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_get_valhi16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_set_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_set_and_get_valhi16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_reset_and_get_valhi16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_get_valhi1(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_get_valhi1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_set_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_set_and_get_valhi1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_reset_and_get_valhi1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_get_valhi2(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_get_valhi2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_set_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_set_and_get_valhi2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_reset_and_get_valhi2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_get_valhi3(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_get_valhi3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_set_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_set_and_get_valhi3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_reset_and_get_valhi3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_get_valhi4(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_get_valhi4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_set_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_set_and_get_valhi4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_reset_and_get_valhi4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_get_valhi5(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_get_valhi5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_set_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_set_and_get_valhi5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_reset_and_get_valhi5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_get_valhi6(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_get_valhi6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_set_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_set_and_get_valhi6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_reset_and_get_valhi6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_get_valhi7(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_get_valhi7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_set_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_set_and_get_valhi7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_reset_and_get_valhi7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_get_valhi8(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_get_valhi8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_set_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_set_and_get_valhi8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_reset_and_get_valhi8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_get_valhi9(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_get_valhi9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_set_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_set_and_get_valhi9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_reset_and_get_valhi9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_get_vallen(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_get_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_get_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_get_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_set_and_get_vallen(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_set_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_set_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_set_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_set_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_set_and_get_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_reset_and_get_vallen(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_and_get_vallen(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_and_get_vallen") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_and_get_vallen_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_reset_access_val_mode(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_reset_access_val_mode();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_access_val_mode(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_access_val_mode()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_access_val_mode") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_reset_access_val_mode_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_get_vallo10(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_get_vallo10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_set_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_set_and_get_vallo10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_reset_and_get_vallo10_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_get_vallo11(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_get_vallo11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_set_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_set_and_get_vallo11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_reset_and_get_vallo11_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_get_vallo12(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_get_vallo12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_set_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_set_and_get_vallo12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_reset_and_get_vallo12_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_get_vallo13(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_get_vallo13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_set_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_set_and_get_vallo13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_reset_and_get_vallo13_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_get_vallo14(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_get_vallo14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_set_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_set_and_get_vallo14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_reset_and_get_vallo14_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_get_vallo15(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_get_vallo15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_set_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_set_and_get_vallo15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_reset_and_get_vallo15_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_get_vallo16(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_get_vallo16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_set_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_set_and_get_vallo16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_reset_and_get_vallo16_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_get_vallo1(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_get_vallo1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_set_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_set_and_get_vallo1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_reset_and_get_vallo1_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_get_vallo2(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_get_vallo2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_set_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_set_and_get_vallo2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_reset_and_get_vallo2_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_get_vallo3(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_get_vallo3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_set_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_set_and_get_vallo3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_reset_and_get_vallo3_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_get_vallo4(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_get_vallo4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_set_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_set_and_get_vallo4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_reset_and_get_vallo4_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_get_vallo5(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_get_vallo5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_set_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_set_and_get_vallo5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_reset_and_get_vallo5_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_get_vallo6(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_get_vallo6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_set_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_set_and_get_vallo6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_reset_and_get_vallo6_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_get_vallo7(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_get_vallo7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_set_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_set_and_get_vallo7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_reset_and_get_vallo7_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_get_vallo8(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_get_vallo8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_set_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_set_and_get_vallo8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_reset_and_get_vallo8_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_get_vallo9(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_get_vallo9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_set_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_set_and_get_vallo9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_reset_and_get_vallo9_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo9_tbl_table_modify_with_nop(sess_hdl, dev_id, entry);
  recv_update_vallo9_tbl_table_modify_with_nop();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_nop(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_nop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_nop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_nop_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  send_update_vallo9_tbl_table_modify_with_nop_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo9_tbl_table_modify_with_nop_by_match_spec();
}

void netbufferv4Client::send_update_vallo9_tbl_table_modify_with_nop_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo9_tbl_table_modify_with_nop_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo9_tbl_table_modify_with_nop_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo9_tbl_table_modify_with_nop_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo9_tbl_table_modify_with_nop_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo9_tbl_table_modify_with_nop_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cache_frequency_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cache_frequency_tbl_table_delete();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cache_frequency_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  send_access_cache_frequency_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cache_frequency_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cache_frequency_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cache_frequency_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cache_frequency_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cache_frequency_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cache_frequency_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cache_frequency_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cache_frequency_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_case1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_case1_tbl_table_delete();
}

void netbufferv4Client::send_access_case1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_case1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  send_access_case1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_case1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_case1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_case1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_case1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_case1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_case1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_case1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_case1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm1_tbl_table_delete();
}

void netbufferv4Client::send_access_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  send_access_cm1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm2_tbl_table_delete();
}

void netbufferv4Client::send_access_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  send_access_cm2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm3_tbl_table_delete();
}

void netbufferv4Client::send_access_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  send_access_cm3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_cm4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_cm4_tbl_table_delete();
}

void netbufferv4Client::send_access_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  send_access_cm4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_cm4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_cm4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_cm4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_cm4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_cm4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_deleted_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_deleted_tbl_table_delete();
}

void netbufferv4Client::send_access_deleted_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_deleted_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  send_access_deleted_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_deleted_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_deleted_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_deleted_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_deleted_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_deleted_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_deleted_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_deleted_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_deleted_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_latest_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_latest_tbl_table_delete();
}

void netbufferv4Client::send_access_latest_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_latest_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  send_access_latest_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_latest_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_latest_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_latest_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_latest_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_latest_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_latest_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_latest_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_latest_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_savedseq_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_savedseq_tbl_table_delete();
}

void netbufferv4Client::send_access_savedseq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_savedseq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  send_access_savedseq_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_savedseq_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_savedseq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_savedseq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_savedseq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_savedseq_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_savedseq_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_savedseq_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_savedseq_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_seq_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_seq_tbl_table_delete();
}

void netbufferv4Client::send_access_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  send_access_seq_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_seq_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_seq_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_seq_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_seq_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_seq_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_access_validvalue_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_access_validvalue_tbl_table_delete();
}

void netbufferv4Client::send_access_validvalue_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::access_validvalue_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  send_access_validvalue_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_access_validvalue_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_access_validvalue_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_access_validvalue_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("access_validvalue_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_access_validvalue_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_access_validvalue_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("access_validvalue_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_access_validvalue_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_add_and_remove_value_header_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_add_and_remove_value_header_tbl_table_delete();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::add_and_remove_value_header_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_add_and_remove_value_header_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_add_and_remove_value_header_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_add_and_remove_value_header_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_add_and_remove_value_header_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("add_and_remove_value_header_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_add_and_remove_value_header_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_add_and_remove_value_header_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("add_and_remove_value_header_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_add_and_remove_value_header_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_cache_lookup_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_cache_lookup_tbl_table_delete();
}

void netbufferv4Client::send_cache_lookup_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::cache_lookup_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  send_cache_lookup_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_cache_lookup_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_cache_lookup_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_cache_lookup_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("cache_lookup_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_cache_lookup_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_cache_lookup_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("cache_lookup_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_cache_lookup_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_drop_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_drop_tbl_table_delete();
}

void netbufferv4Client::send_drop_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::drop_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  send_drop_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_drop_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_drop_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_drop_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("drop_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_drop_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_drop_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("drop_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_drop_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_eg_port_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_eg_port_forward_tbl_table_delete();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::eg_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  send_eg_port_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_eg_port_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_eg_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_eg_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("eg_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_eg_port_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_eg_port_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("eg_port_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_eg_port_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm1_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm2_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm3_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_cm4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_cm4_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  send_hash_for_cm4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_cm4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_cm4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_cm4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_cm4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_cm4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_cm4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_cm4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_cm4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_hash_for_seq_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_hash_for_seq_tbl_table_delete();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::hash_for_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  send_hash_for_seq_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_hash_for_seq_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_hash_for_seq_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_hash_for_seq_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("hash_for_seq_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_hash_for_seq_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_hash_for_seq_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("hash_for_seq_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_hash_for_seq_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ig_port_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_ig_port_forward_tbl_table_delete();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ig_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  send_ig_port_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ig_port_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_ig_port_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ig_port_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ig_port_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ig_port_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ig_port_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ig_port_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ig_port_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_ipv4_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_ipv4_forward_tbl_table_delete();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::ipv4_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  send_ipv4_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_ipv4_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_ipv4_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_ipv4_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("ipv4_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_ipv4_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_ipv4_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("ipv4_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_ipv4_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_is_hot_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_is_hot_tbl_table_delete();
}

void netbufferv4Client::send_is_hot_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::is_hot_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  send_is_hot_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_is_hot_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_is_hot_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_is_hot_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("is_hot_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_is_hot_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_is_hot_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("is_hot_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_is_hot_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_l2l3_forward_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_l2l3_forward_tbl_table_delete();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::l2l3_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  send_l2l3_forward_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_l2l3_forward_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_l2l3_forward_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_l2l3_forward_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("l2l3_forward_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_l2l3_forward_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_l2l3_forward_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("l2l3_forward_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_l2l3_forward_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_lastclone_lastscansplit_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_lastclone_lastscansplit_tbl_table_delete();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::lastclone_lastscansplit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  send_lastclone_lastscansplit_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_lastclone_lastscansplit_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_lastclone_lastscansplit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_lastclone_lastscansplit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("lastclone_lastscansplit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_lastclone_lastscansplit_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_lastclone_lastscansplit_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("lastclone_lastscansplit_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_lastclone_lastscansplit_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_need_recirculate_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_need_recirculate_tbl_table_delete();
}

void netbufferv4Client::send_need_recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::need_recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  send_need_recirculate_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_need_recirculate_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_need_recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_need_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("need_recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_need_recirculate_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_need_recirculate_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("need_recirculate_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_need_recirculate_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_prepare_for_cachehit_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_prepare_for_cachehit_tbl_table_delete();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::prepare_for_cachehit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  send_prepare_for_cachehit_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_prepare_for_cachehit_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_prepare_for_cachehit_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_prepare_for_cachehit_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("prepare_for_cachehit_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_prepare_for_cachehit_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_prepare_for_cachehit_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("prepare_for_cachehit_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_prepare_for_cachehit_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_process_scanreq_split_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_process_scanreq_split_tbl_table_delete();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::process_scanreq_split_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  send_process_scanreq_split_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_process_scanreq_split_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_process_scanreq_split_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_process_scanreq_split_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("process_scanreq_split_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_process_scanreq_split_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_process_scanreq_split_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("process_scanreq_split_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_process_scanreq_split_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_for_scan_endkey_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_range_partition_for_scan_endkey_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_range_partition_for_scan_endkey_tbl_table_delete();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_for_scan_endkey_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_for_scan_endkey_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_for_scan_endkey_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_for_scan_endkey_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_for_scan_endkey_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_range_partition_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_range_partition_tbl_table_delete();
}

void netbufferv4Client::send_range_partition_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::range_partition_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_range_partition_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_range_partition_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_range_partition_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_range_partition_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("range_partition_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_range_partition_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_range_partition_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("range_partition_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_range_partition_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_recirculate_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_recirculate_tbl_table_delete();
}

void netbufferv4Client::send_recirculate_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  send_recirculate_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_recirculate_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_recirculate_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_recirculate_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("recirculate_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_recirculate_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_recirculate_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("recirculate_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_recirculate_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_sample_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_sample_tbl_table_delete();
}

void netbufferv4Client::send_sample_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::sample_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  send_sample_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_sample_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_sample_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_sample_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sample_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_sample_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_sample_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sample_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_sample_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_save_client_udpport_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_save_client_udpport_tbl_table_delete();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::save_client_udpport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  send_save_client_udpport_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_save_client_udpport_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_save_client_udpport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_save_client_udpport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("save_client_udpport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_save_client_udpport_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_save_client_udpport_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("save_client_udpport_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_save_client_udpport_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_snapshot_flag_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_snapshot_flag_tbl_table_delete();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::snapshot_flag_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  send_snapshot_flag_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_snapshot_flag_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_snapshot_flag_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_snapshot_flag_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("snapshot_flag_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_snapshot_flag_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_snapshot_flag_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("snapshot_flag_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_snapshot_flag_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_ipmac_srcport_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_ipmac_srcport_tbl_table_delete();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_ipmac_srcport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  send_update_ipmac_srcport_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_ipmac_srcport_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_ipmac_srcport_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_ipmac_srcport_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_ipmac_srcport_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_ipmac_srcport_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_ipmac_srcport_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_ipmac_srcport_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_ipmac_srcport_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_pktlen_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_pktlen_tbl_table_delete();
}

void netbufferv4Client::send_update_pktlen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_pktlen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  send_update_pktlen_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec, priority);
  recv_update_pktlen_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_pktlen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_pktlen_tbl_match_spec_t& match_spec, const int32_t priority)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_pktlen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_pktlen_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.priority = &priority;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_pktlen_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_pktlen_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_pktlen_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi10_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi10_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  send_update_valhi10_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi10_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi10_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi10_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi10_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi10_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi11_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi11_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  send_update_valhi11_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi11_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi11_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi11_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi11_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi11_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi12_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi12_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  send_update_valhi12_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi12_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi12_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi12_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi12_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi12_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi13_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi13_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  send_update_valhi13_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi13_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi13_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi13_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi13_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi13_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi14_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi14_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  send_update_valhi14_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi14_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi14_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi14_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi14_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi14_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi15_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi15_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  send_update_valhi15_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi15_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi15_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi15_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi15_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi15_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi16_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi16_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  send_update_valhi16_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi16_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi16_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi16_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi16_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi16_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi1_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  send_update_valhi1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi2_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  send_update_valhi2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi3_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  send_update_valhi3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi4_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  send_update_valhi4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi5_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi5_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  send_update_valhi5_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi5_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi5_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi5_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi5_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi5_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi6_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi6_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  send_update_valhi6_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi6_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi6_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi6_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi6_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi6_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi7_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi7_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  send_update_valhi7_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi7_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi7_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi7_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi7_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi7_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi8_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi8_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  send_update_valhi8_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi8_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi8_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi8_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi8_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi8_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_valhi9_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_valhi9_tbl_table_delete();
}

void netbufferv4Client::send_update_valhi9_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_valhi9_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  send_update_valhi9_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_valhi9_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_valhi9_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_valhi9_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_valhi9_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_valhi9_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_valhi9_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_valhi9_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_valhi9_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallen_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallen_tbl_table_delete();
}

void netbufferv4Client::send_update_vallen_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  send_update_vallen_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallen_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallen_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallen_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallen_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallen_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallen_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallen_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallen_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo10_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo10_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo10_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  send_update_vallo10_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo10_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo10_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo10_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo10_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo10_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo10_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo10_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo10_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo11_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo11_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo11_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  send_update_vallo11_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo11_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo11_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo11_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo11_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo11_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo11_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo11_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo11_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo12_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo12_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo12_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  send_update_vallo12_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo12_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo12_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo12_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo12_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo12_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo12_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo12_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo12_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo13_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo13_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo13_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  send_update_vallo13_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo13_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo13_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo13_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo13_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo13_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo13_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo13_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo13_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo14_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo14_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo14_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  send_update_vallo14_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo14_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo14_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo14_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo14_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo14_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo14_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo14_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo14_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo15_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo15_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo15_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  send_update_vallo15_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo15_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo15_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo15_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo15_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo15_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo15_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo15_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo15_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo16_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo16_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo16_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  send_update_vallo16_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo16_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo16_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo16_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo16_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo16_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo16_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo16_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo16_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo1_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo1_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo1_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  send_update_vallo1_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo1_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo1_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo1_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo1_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo1_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo1_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo1_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo1_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo2_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo2_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo2_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  send_update_vallo2_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo2_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo2_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo2_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo2_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo2_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo2_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo2_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo2_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo3_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo3_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo3_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  send_update_vallo3_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo3_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo3_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo3_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo3_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo3_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo3_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo3_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo3_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo4_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo4_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo4_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  send_update_vallo4_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo4_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo4_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo4_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo4_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo4_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo4_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo4_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo4_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo5_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo5_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo5_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  send_update_vallo5_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo5_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo5_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo5_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo5_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo5_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo5_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo5_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo5_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo6_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo6_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo6_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  send_update_vallo6_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo6_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo6_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo6_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo6_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo6_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo6_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo6_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo6_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo7_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo7_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo7_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  send_update_vallo7_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo7_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo7_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo7_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo7_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo7_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo7_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo7_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo7_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  send_update_vallo8_tbl_table_delete(sess_hdl, dev_id, entry);
  recv_update_vallo8_tbl_table_delete();
}

void netbufferv4Client::send_update_vallo8_tbl_table_delete(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const int8_t dev_id, const EntryHandle_t entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_delete_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_id = &dev_id;
  args.entry = &entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_delete_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}

void netbufferv4Client::update_vallo8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  send_update_vallo8_tbl_table_delete_by_match_spec(sess_hdl, dev_tgt, match_spec);
  recv_update_vallo8_tbl_table_delete_by_match_spec();
}

void netbufferv4Client::send_update_vallo8_tbl_table_delete_by_match_spec(const  ::res_pd_rpc::SessionHandle_t sess_hdl, const  ::res_pd_rpc::DevTarget_t& dev_tgt, const netbufferv4_update_vallo8_tbl_match_spec_t& match_spec)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("update_vallo8_tbl_table_delete_by_match_spec", ::apache::thrift::protocol::T_CALL, cseqid);

  netbufferv4_update_vallo8_tbl_table_delete_by_match_spec_pargs args;
  args.sess_hdl = &sess_hdl;
  args.dev_tgt = &dev_tgt;
  args.match_spec = &match_spec;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void netbufferv4Client::recv_update_vallo8_tbl_table_delete_by_match_spec()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_vallo8_tbl_table_delete_by_match_spec") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  netbufferv4_update_vallo8_tbl_table_delete_by_match_spec_presult result;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.ouch) {
    throw result.ouch;
  }
  return;
}
} // namespace
